ARM GAS  /tmp/ccHSsU65.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32f7xx_hal_pwr_ex.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_PWREx_EnableBkUpReg,"ax",%progbits
  17              		.align	1
  18              		.global	HAL_PWREx_EnableBkUpReg
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	HAL_PWREx_EnableBkUpReg:
  26              	.LFB141:
  27              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @file    stm32f7xx_hal_pwr_ex.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *          functionalities of PWR extension peripheral:           
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *           + Peripheral Extended features functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   ******************************************************************************
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @attention
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * All rights reserved.</center></h2>
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * the "License"; You may not use this file except in compliance with the
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * License. You may obtain a copy of the License at:
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   ******************************************************************************
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */ 
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** #include "stm32f7xx_hal.h"
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /** @addtogroup STM32F7xx_HAL_Driver
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @{
  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
ARM GAS  /tmp/ccHSsU65.s 			page 2


  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief PWR HAL module driver
  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @{
  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Private_Constants
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @{
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */    
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** #define PWR_OVERDRIVE_TIMEOUT_VALUE  1000
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** #define PWR_UDERDRIVE_TIMEOUT_VALUE  1000
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** #define PWR_BKPREG_TIMEOUT_VALUE     1000
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** #define PWR_VOSRDY_TIMEOUT_VALUE     1000
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @}
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /* Private functions ---------------------------------------------------------*/
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWREx Exported Functions
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *  @{
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Peripheral Extended features functions 
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *  @brief Peripheral Extended features functions 
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** @verbatim   
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****  ===============================================================================
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****                  ##### Peripheral extended features functions #####
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****  ===============================================================================
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     *** Main and Backup Regulators configuration ***
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     ================================================
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     [..] 
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only from 
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           the CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is 
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           retained even in Standby or VBAT mode when the low power backup regulator
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           is enabled. It can be considered as an internal EEPROM when VBAT is 
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           always present. You can use the HAL_PWREx_EnableBkUpReg() function to 
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           enable the low power backup regulator. 
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to VDD) 
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           the backup SRAM is powered from VDD which replaces the VBAT power supply to 
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           save battery life.
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       (+) The backup SRAM is not mass erased by a tamper event. It is read 
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           protected to prevent confidential data, such as cryptographic private 
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           key, from being accessed. The backup SRAM can be erased only through 
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           the Flash interface when a protection level change from level 1 to 
  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           level 0 is requested. 
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       -@- Refer to the description of Read protection (RDP) in the Flash 
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           programming manual.
ARM GAS  /tmp/ccHSsU65.s 			page 3


  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to have a tradeoff between 
  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           performance and power consumption when the device does not operate at 
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           the maximum frequency. This is done through __HAL_PWR_MAINREGULATORMODE_CONFIG() 
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           macro which configure VOS bit in PWR_CR register
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****         Refer to the product datasheets for more details.
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     *** FLASH Power Down configuration ****
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     =======================================
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     [..] 
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       (+) By setting the FPDS bit in the PWR_CR register by using the 
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableFlashPowerDown() function, the Flash memory also enters power 
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           down mode when the device enters Stop mode. When the Flash memory 
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           is in power down mode, an additional startup delay is incurred when 
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****           waking up from Stop mode.
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     *** Over-Drive and Under-Drive configuration ****
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     =================================================
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     [..]         
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****        (+) In Run mode: the main regulator has 2 operating modes available:
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****         (++) Normal mode: The CPU and core logic operate at maximum frequency at a given 
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****              voltage scaling (scale 1, scale 2 or scale 3)
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****         (++) Over-drive mode: This mode allows the CPU and the core logic to operate at a 
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****             higher frequency than the normal mode for a given voltage scaling (scale 1,  
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****             scale 2 or scale 3). This mode is enabled through HAL_PWREx_EnableOverDrive() function 
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****             disabled by HAL_PWREx_DisableOverDrive() function, to enter or exit from Over-drive mod
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****             the sequence described in Reference manual.
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****              
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****        (+) In Stop mode: the main regulator or low power regulator supplies a low power 
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****            voltage to the 1.2V domain, thus preserving the content of registers 
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****            and internal SRAM. 2 operating modes are available:
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****          (++) Normal mode: the 1.2V domain is preserved in nominal leakage mode. This mode is only 
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****               available when the main regulator or the low power regulator is used in Scale 3 or 
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****               low voltage mode.
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****          (++) Under-drive mode: the 1.2V domain is preserved in reduced leakage mode. This mode is 
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****               available when the main regulator or the low power regulator is in low voltage mode.
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** @endverbatim
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @{
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Enables the Backup Regulator.
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval HAL status
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
  28              		.loc 1 136 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
ARM GAS  /tmp/ccHSsU65.s 			page 4


  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   uint32_t tickstart = 0;
  43              		.loc 1 137 12
  44 0006 0023     		movs	r3, #0
  45 0008 7B60     		str	r3, [r7, #4]
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable Backup regulator */
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CSR1 |= PWR_CSR1_BRE;
  46              		.loc 1 140 13
  47 000a 124B     		ldr	r3, .L5
  48 000c 5B68     		ldr	r3, [r3, #4]
  49 000e 114A     		ldr	r2, .L5
  50 0010 43F40073 		orr	r3, r3, #512
  51 0014 5360     		str	r3, [r2, #4]
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Workaround for the following hardware bug: */
 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Id 19: PWR : No STANDBY wake-up when Back-up RAM enabled (ref. Errata Sheet p23) */
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CSR1 |= PWR_CSR1_EIWUP;
  52              		.loc 1 144 13
  53 0016 0F4B     		ldr	r3, .L5
  54 0018 5B68     		ldr	r3, [r3, #4]
  55 001a 0E4A     		ldr	r2, .L5
  56 001c 43F48073 		orr	r3, r3, #256
  57 0020 5360     		str	r3, [r2, #4]
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Get tick */
 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
  58              		.loc 1 147 15
  59 0022 FFF7FEFF 		bl	HAL_GetTick
  60 0026 7860     		str	r0, [r7, #4]
 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */  
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
  61              		.loc 1 150 8
  62 0028 09E0     		b	.L2
  63              	.L4:
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
  64              		.loc 1 152 9
  65 002a FFF7FEFF 		bl	HAL_GetTick
  66 002e 0246     		mov	r2, r0
  67              		.loc 1 152 23
  68 0030 7B68     		ldr	r3, [r7, #4]
  69 0032 D31A     		subs	r3, r2, r3
  70              		.loc 1 152 7
  71 0034 B3F57A7F 		cmp	r3, #1000
  72 0038 01D9     		bls	.L2
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
  73              		.loc 1 154 14
  74 003a 0323     		movs	r3, #3
  75 003c 06E0     		b	.L3
ARM GAS  /tmp/ccHSsU65.s 			page 5


  76              	.L2:
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
  77              		.loc 1 150 9
  78 003e 054B     		ldr	r3, .L5
  79 0040 5B68     		ldr	r3, [r3, #4]
  80 0042 03F00803 		and	r3, r3, #8
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
  81              		.loc 1 150 8
  82 0046 082B     		cmp	r3, #8
  83 0048 EFD1     		bne	.L4
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     } 
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   }
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   return HAL_OK;
  84              		.loc 1 157 10
  85 004a 0023     		movs	r3, #0
  86              	.L3:
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
  87              		.loc 1 158 1
  88 004c 1846     		mov	r0, r3
  89 004e 0837     		adds	r7, r7, #8
  90              	.LCFI3:
  91              		.cfi_def_cfa_offset 8
  92 0050 BD46     		mov	sp, r7
  93              	.LCFI4:
  94              		.cfi_def_cfa_register 13
  95              		@ sp needed
  96 0052 80BD     		pop	{r7, pc}
  97              	.L6:
  98              		.align	2
  99              	.L5:
 100 0054 00700040 		.word	1073770496
 101              		.cfi_endproc
 102              	.LFE141:
 104              		.section	.text.HAL_PWREx_DisableBkUpReg,"ax",%progbits
 105              		.align	1
 106              		.global	HAL_PWREx_DisableBkUpReg
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
 110              		.fpu fpv5-d16
 112              	HAL_PWREx_DisableBkUpReg:
 113              	.LFB142:
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Disables the Backup Regulator.
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval HAL status
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 114              		.loc 1 165 1
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 8
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 80B5     		push	{r7, lr}
 119              	.LCFI5:
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 7, -8
ARM GAS  /tmp/ccHSsU65.s 			page 6


 122              		.cfi_offset 14, -4
 123 0002 82B0     		sub	sp, sp, #8
 124              	.LCFI6:
 125              		.cfi_def_cfa_offset 16
 126 0004 00AF     		add	r7, sp, #0
 127              	.LCFI7:
 128              		.cfi_def_cfa_register 7
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   uint32_t tickstart = 0;
 129              		.loc 1 166 12
 130 0006 0023     		movs	r3, #0
 131 0008 7B60     		str	r3, [r7, #4]
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Disable Backup regulator */
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CSR1 &= (uint32_t)~((uint32_t)PWR_CSR1_BRE);
 132              		.loc 1 169 13
 133 000a 124B     		ldr	r3, .L11
 134 000c 5B68     		ldr	r3, [r3, #4]
 135 000e 114A     		ldr	r2, .L11
 136 0010 23F40073 		bic	r3, r3, #512
 137 0014 5360     		str	r3, [r2, #4]
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Workaround for the following hardware bug: */
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Id 19: PWR : No STANDBY wake-up when Back-up RAM enabled (ref. Errata Sheet p23) */
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CSR1 |= PWR_CSR1_EIWUP;
 138              		.loc 1 173 13
 139 0016 0F4B     		ldr	r3, .L11
 140 0018 5B68     		ldr	r3, [r3, #4]
 141 001a 0E4A     		ldr	r2, .L11
 142 001c 43F48073 		orr	r3, r3, #256
 143 0020 5360     		str	r3, [r2, #4]
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Get tick */
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 144              		.loc 1 176 15
 145 0022 FFF7FEFF 		bl	HAL_GetTick
 146 0026 7860     		str	r0, [r7, #4]
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */  
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 147              		.loc 1 179 8
 148 0028 09E0     		b	.L8
 149              	.L10:
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 150              		.loc 1 181 9
 151 002a FFF7FEFF 		bl	HAL_GetTick
 152 002e 0246     		mov	r2, r0
 153              		.loc 1 181 23
 154 0030 7B68     		ldr	r3, [r7, #4]
 155 0032 D31A     		subs	r3, r2, r3
 156              		.loc 1 181 7
 157 0034 B3F57A7F 		cmp	r3, #1000
 158 0038 01D9     		bls	.L8
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 159              		.loc 1 183 14
 160 003a 0323     		movs	r3, #3
ARM GAS  /tmp/ccHSsU65.s 			page 7


 161 003c 06E0     		b	.L9
 162              	.L8:
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 163              		.loc 1 179 9
 164 003e 054B     		ldr	r3, .L11
 165 0040 5B68     		ldr	r3, [r3, #4]
 166 0042 03F00803 		and	r3, r3, #8
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 167              		.loc 1 179 8
 168 0046 082B     		cmp	r3, #8
 169 0048 EFD0     		beq	.L10
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     } 
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   }
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   return HAL_OK;
 170              		.loc 1 186 10
 171 004a 0023     		movs	r3, #0
 172              	.L9:
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 173              		.loc 1 187 1
 174 004c 1846     		mov	r0, r3
 175 004e 0837     		adds	r7, r7, #8
 176              	.LCFI8:
 177              		.cfi_def_cfa_offset 8
 178 0050 BD46     		mov	sp, r7
 179              	.LCFI9:
 180              		.cfi_def_cfa_register 13
 181              		@ sp needed
 182 0052 80BD     		pop	{r7, pc}
 183              	.L12:
 184              		.align	2
 185              	.L11:
 186 0054 00700040 		.word	1073770496
 187              		.cfi_endproc
 188              	.LFE142:
 190              		.section	.text.HAL_PWREx_EnableFlashPowerDown,"ax",%progbits
 191              		.align	1
 192              		.global	HAL_PWREx_EnableFlashPowerDown
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv5-d16
 198              	HAL_PWREx_EnableFlashPowerDown:
 199              	.LFB143:
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Enables the Flash Power Down in Stop mode.
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval None
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFlashPowerDown(void)
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 200              		.loc 1 194 1
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205 0000 80B4     		push	{r7}
 206              	.LCFI10:
ARM GAS  /tmp/ccHSsU65.s 			page 8


 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 7, -4
 209 0002 00AF     		add	r7, sp, #0
 210              	.LCFI11:
 211              		.cfi_def_cfa_register 7
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable the Flash Power Down */
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CR1 |= PWR_CR1_FPDS;
 212              		.loc 1 196 12
 213 0004 054B     		ldr	r3, .L14
 214 0006 1B68     		ldr	r3, [r3]
 215 0008 044A     		ldr	r2, .L14
 216 000a 43F40073 		orr	r3, r3, #512
 217 000e 1360     		str	r3, [r2]
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 218              		.loc 1 197 1
 219 0010 00BF     		nop
 220 0012 BD46     		mov	sp, r7
 221              	.LCFI12:
 222              		.cfi_def_cfa_register 13
 223              		@ sp needed
 224 0014 5DF8047B 		ldr	r7, [sp], #4
 225              	.LCFI13:
 226              		.cfi_restore 7
 227              		.cfi_def_cfa_offset 0
 228 0018 7047     		bx	lr
 229              	.L15:
 230 001a 00BF     		.align	2
 231              	.L14:
 232 001c 00700040 		.word	1073770496
 233              		.cfi_endproc
 234              	.LFE143:
 236              		.section	.text.HAL_PWREx_DisableFlashPowerDown,"ax",%progbits
 237              		.align	1
 238              		.global	HAL_PWREx_DisableFlashPowerDown
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu fpv5-d16
 244              	HAL_PWREx_DisableFlashPowerDown:
 245              	.LFB144:
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Disables the Flash Power Down in Stop mode.
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval None
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFlashPowerDown(void)
 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 246              		.loc 1 204 1
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 251 0000 80B4     		push	{r7}
 252              	.LCFI14:
 253              		.cfi_def_cfa_offset 4
 254              		.cfi_offset 7, -4
 255 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccHSsU65.s 			page 9


 256              	.LCFI15:
 257              		.cfi_def_cfa_register 7
 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Disable the Flash Power Down */
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_FPDS);
 258              		.loc 1 206 12
 259 0004 054B     		ldr	r3, .L17
 260 0006 1B68     		ldr	r3, [r3]
 261 0008 044A     		ldr	r2, .L17
 262 000a 23F40073 		bic	r3, r3, #512
 263 000e 1360     		str	r3, [r2]
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 264              		.loc 1 207 1
 265 0010 00BF     		nop
 266 0012 BD46     		mov	sp, r7
 267              	.LCFI16:
 268              		.cfi_def_cfa_register 13
 269              		@ sp needed
 270 0014 5DF8047B 		ldr	r7, [sp], #4
 271              	.LCFI17:
 272              		.cfi_restore 7
 273              		.cfi_def_cfa_offset 0
 274 0018 7047     		bx	lr
 275              	.L18:
 276 001a 00BF     		.align	2
 277              	.L17:
 278 001c 00700040 		.word	1073770496
 279              		.cfi_endproc
 280              	.LFE144:
 282              		.section	.text.HAL_PWREx_EnableMainRegulatorLowVoltage,"ax",%progbits
 283              		.align	1
 284              		.global	HAL_PWREx_EnableMainRegulatorLowVoltage
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu fpv5-d16
 290              	HAL_PWREx_EnableMainRegulatorLowVoltage:
 291              	.LFB145:
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Enables Main Regulator low voltage mode.
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval None
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMainRegulatorLowVoltage(void)
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 292              		.loc 1 214 1
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 1, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 297 0000 80B4     		push	{r7}
 298              	.LCFI18:
 299              		.cfi_def_cfa_offset 4
 300              		.cfi_offset 7, -4
 301 0002 00AF     		add	r7, sp, #0
 302              	.LCFI19:
 303              		.cfi_def_cfa_register 7
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable Main regulator low voltage */
ARM GAS  /tmp/ccHSsU65.s 			page 10


 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CR1 |= PWR_CR1_MRUDS;
 304              		.loc 1 216 12
 305 0004 054B     		ldr	r3, .L20
 306 0006 1B68     		ldr	r3, [r3]
 307 0008 044A     		ldr	r2, .L20
 308 000a 43F40063 		orr	r3, r3, #2048
 309 000e 1360     		str	r3, [r2]
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 310              		.loc 1 217 1
 311 0010 00BF     		nop
 312 0012 BD46     		mov	sp, r7
 313              	.LCFI20:
 314              		.cfi_def_cfa_register 13
 315              		@ sp needed
 316 0014 5DF8047B 		ldr	r7, [sp], #4
 317              	.LCFI21:
 318              		.cfi_restore 7
 319              		.cfi_def_cfa_offset 0
 320 0018 7047     		bx	lr
 321              	.L21:
 322 001a 00BF     		.align	2
 323              	.L20:
 324 001c 00700040 		.word	1073770496
 325              		.cfi_endproc
 326              	.LFE145:
 328              		.section	.text.HAL_PWREx_DisableMainRegulatorLowVoltage,"ax",%progbits
 329              		.align	1
 330              		.global	HAL_PWREx_DisableMainRegulatorLowVoltage
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv5-d16
 336              	HAL_PWREx_DisableMainRegulatorLowVoltage:
 337              	.LFB146:
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Disables Main Regulator low voltage mode.
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval None
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMainRegulatorLowVoltage(void)
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {  
 338              		.loc 1 224 1
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 1, uses_anonymous_args = 0
 342              		@ link register save eliminated.
 343 0000 80B4     		push	{r7}
 344              	.LCFI22:
 345              		.cfi_def_cfa_offset 4
 346              		.cfi_offset 7, -4
 347 0002 00AF     		add	r7, sp, #0
 348              	.LCFI23:
 349              		.cfi_def_cfa_register 7
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Disable Main regulator low voltage */
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_MRUDS);
 350              		.loc 1 226 12
 351 0004 054B     		ldr	r3, .L23
ARM GAS  /tmp/ccHSsU65.s 			page 11


 352 0006 1B68     		ldr	r3, [r3]
 353 0008 044A     		ldr	r2, .L23
 354 000a 23F40063 		bic	r3, r3, #2048
 355 000e 1360     		str	r3, [r2]
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 356              		.loc 1 227 1
 357 0010 00BF     		nop
 358 0012 BD46     		mov	sp, r7
 359              	.LCFI24:
 360              		.cfi_def_cfa_register 13
 361              		@ sp needed
 362 0014 5DF8047B 		ldr	r7, [sp], #4
 363              	.LCFI25:
 364              		.cfi_restore 7
 365              		.cfi_def_cfa_offset 0
 366 0018 7047     		bx	lr
 367              	.L24:
 368 001a 00BF     		.align	2
 369              	.L23:
 370 001c 00700040 		.word	1073770496
 371              		.cfi_endproc
 372              	.LFE146:
 374              		.section	.text.HAL_PWREx_EnableLowRegulatorLowVoltage,"ax",%progbits
 375              		.align	1
 376              		.global	HAL_PWREx_EnableLowRegulatorLowVoltage
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu fpv5-d16
 382              	HAL_PWREx_EnableLowRegulatorLowVoltage:
 383              	.LFB147:
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Enables Low Power Regulator low voltage mode.
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval None
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableLowRegulatorLowVoltage(void)
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 384              		.loc 1 234 1
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389 0000 80B4     		push	{r7}
 390              	.LCFI26:
 391              		.cfi_def_cfa_offset 4
 392              		.cfi_offset 7, -4
 393 0002 00AF     		add	r7, sp, #0
 394              	.LCFI27:
 395              		.cfi_def_cfa_register 7
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable low power regulator */
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CR1 |= PWR_CR1_LPUDS;
 396              		.loc 1 236 12
 397 0004 054B     		ldr	r3, .L26
 398 0006 1B68     		ldr	r3, [r3]
 399 0008 044A     		ldr	r2, .L26
 400 000a 43F48063 		orr	r3, r3, #1024
ARM GAS  /tmp/ccHSsU65.s 			page 12


 401 000e 1360     		str	r3, [r2]
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 402              		.loc 1 237 1
 403 0010 00BF     		nop
 404 0012 BD46     		mov	sp, r7
 405              	.LCFI28:
 406              		.cfi_def_cfa_register 13
 407              		@ sp needed
 408 0014 5DF8047B 		ldr	r7, [sp], #4
 409              	.LCFI29:
 410              		.cfi_restore 7
 411              		.cfi_def_cfa_offset 0
 412 0018 7047     		bx	lr
 413              	.L27:
 414 001a 00BF     		.align	2
 415              	.L26:
 416 001c 00700040 		.word	1073770496
 417              		.cfi_endproc
 418              	.LFE147:
 420              		.section	.text.HAL_PWREx_DisableLowRegulatorLowVoltage,"ax",%progbits
 421              		.align	1
 422              		.global	HAL_PWREx_DisableLowRegulatorLowVoltage
 423              		.syntax unified
 424              		.thumb
 425              		.thumb_func
 426              		.fpu fpv5-d16
 428              	HAL_PWREx_DisableLowRegulatorLowVoltage:
 429              	.LFB148:
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Disables Low Power Regulator low voltage mode.
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval None
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableLowRegulatorLowVoltage(void)
 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 430              		.loc 1 244 1
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 1, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 435 0000 80B4     		push	{r7}
 436              	.LCFI30:
 437              		.cfi_def_cfa_offset 4
 438              		.cfi_offset 7, -4
 439 0002 00AF     		add	r7, sp, #0
 440              	.LCFI31:
 441              		.cfi_def_cfa_register 7
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Disable low power regulator */
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_LPUDS);
 442              		.loc 1 246 12
 443 0004 054B     		ldr	r3, .L29
 444 0006 1B68     		ldr	r3, [r3]
 445 0008 044A     		ldr	r2, .L29
 446 000a 23F48063 		bic	r3, r3, #1024
 447 000e 1360     		str	r3, [r2]
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 448              		.loc 1 247 1
ARM GAS  /tmp/ccHSsU65.s 			page 13


 449 0010 00BF     		nop
 450 0012 BD46     		mov	sp, r7
 451              	.LCFI32:
 452              		.cfi_def_cfa_register 13
 453              		@ sp needed
 454 0014 5DF8047B 		ldr	r7, [sp], #4
 455              	.LCFI33:
 456              		.cfi_restore 7
 457              		.cfi_def_cfa_offset 0
 458 0018 7047     		bx	lr
 459              	.L30:
 460 001a 00BF     		.align	2
 461              	.L29:
 462 001c 00700040 		.word	1073770496
 463              		.cfi_endproc
 464              	.LFE148:
 466              		.section	.text.HAL_PWREx_EnableOverDrive,"ax",%progbits
 467              		.align	1
 468              		.global	HAL_PWREx_EnableOverDrive
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu fpv5-d16
 474              	HAL_PWREx_EnableOverDrive:
 475              	.LFB149:
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief  Activates the Over-Drive mode.
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note   This mode allows the CPU and the core logic to operate at a higher frequency
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         than the normal mode for a given voltage scaling (scale 1, scale 2 or scale 3).   
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note   It is recommended to enter or exit Over-drive mode when the application is not running 
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         critical tasks and when the system clock source is either HSI or HSE. 
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval HAL status
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 476              		.loc 1 260 1
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 8
 479              		@ frame_needed = 1, uses_anonymous_args = 0
 480 0000 80B5     		push	{r7, lr}
 481              	.LCFI34:
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 7, -8
 484              		.cfi_offset 14, -4
 485 0002 82B0     		sub	sp, sp, #8
 486              	.LCFI35:
 487              		.cfi_def_cfa_offset 16
 488 0004 00AF     		add	r7, sp, #0
 489              	.LCFI36:
 490              		.cfi_def_cfa_register 7
 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   uint32_t tickstart = 0;
 491              		.loc 1 261 12
 492 0006 0023     		movs	r3, #0
 493 0008 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/ccHSsU65.s 			page 14


 494              	.LBB2:
 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 495              		.loc 1 263 3
 496 000a 234B     		ldr	r3, .L37
 497 000c 1B6C     		ldr	r3, [r3, #64]
 498 000e 224A     		ldr	r2, .L37
 499 0010 43F08053 		orr	r3, r3, #268435456
 500 0014 1364     		str	r3, [r2, #64]
 501 0016 204B     		ldr	r3, .L37
 502 0018 1B6C     		ldr	r3, [r3, #64]
 503 001a 03F08053 		and	r3, r3, #268435456
 504 001e 3B60     		str	r3, [r7]
 505 0020 3B68     		ldr	r3, [r7]
 506              	.LBE2:
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable the Over-drive to extend the clock frequency to 216 MHz */
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_PWR_OVERDRIVE_ENABLE();
 507              		.loc 1 266 3
 508 0022 1E4B     		ldr	r3, .L37+4
 509 0024 1B68     		ldr	r3, [r3]
 510 0026 1D4A     		ldr	r2, .L37+4
 511 0028 43F48033 		orr	r3, r3, #65536
 512 002c 1360     		str	r3, [r2]
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Get tick */
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 513              		.loc 1 269 15
 514 002e FFF7FEFF 		bl	HAL_GetTick
 515 0032 7860     		str	r0, [r7, #4]
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 516              		.loc 1 271 8
 517 0034 09E0     		b	.L32
 518              	.L34:
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 519              		.loc 1 273 9
 520 0036 FFF7FEFF 		bl	HAL_GetTick
 521 003a 0246     		mov	r2, r0
 522              		.loc 1 273 23
 523 003c 7B68     		ldr	r3, [r7, #4]
 524 003e D31A     		subs	r3, r2, r3
 525              		.loc 1 273 7
 526 0040 B3F57A7F 		cmp	r3, #1000
 527 0044 01D9     		bls	.L32
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 528              		.loc 1 275 14
 529 0046 0323     		movs	r3, #3
 530 0048 22E0     		b	.L33
 531              	.L32:
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 532              		.loc 1 271 10
 533 004a 144B     		ldr	r3, .L37+4
 534 004c 5B68     		ldr	r3, [r3, #4]
 535 004e 03F48033 		and	r3, r3, #65536
ARM GAS  /tmp/ccHSsU65.s 			page 15


 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 536              		.loc 1 271 8
 537 0052 B3F5803F 		cmp	r3, #65536
 538 0056 EED1     		bne	.L34
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     }
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   }
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable the Over-drive switch */
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 539              		.loc 1 280 3
 540 0058 104B     		ldr	r3, .L37+4
 541 005a 1B68     		ldr	r3, [r3]
 542 005c 0F4A     		ldr	r2, .L37+4
 543 005e 43F40033 		orr	r3, r3, #131072
 544 0062 1360     		str	r3, [r2]
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Get tick */
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 545              		.loc 1 283 15
 546 0064 FFF7FEFF 		bl	HAL_GetTick
 547 0068 7860     		str	r0, [r7, #4]
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 548              		.loc 1 285 8
 549 006a 09E0     		b	.L35
 550              	.L36:
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 551              		.loc 1 287 9
 552 006c FFF7FEFF 		bl	HAL_GetTick
 553 0070 0246     		mov	r2, r0
 554              		.loc 1 287 23
 555 0072 7B68     		ldr	r3, [r7, #4]
 556 0074 D31A     		subs	r3, r2, r3
 557              		.loc 1 287 7
 558 0076 B3F57A7F 		cmp	r3, #1000
 559 007a 01D9     		bls	.L35
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 560              		.loc 1 289 14
 561 007c 0323     		movs	r3, #3
 562 007e 07E0     		b	.L33
 563              	.L35:
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 564              		.loc 1 285 10
 565 0080 064B     		ldr	r3, .L37+4
 566 0082 5B68     		ldr	r3, [r3, #4]
 567 0084 03F40033 		and	r3, r3, #131072
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 568              		.loc 1 285 8
 569 0088 B3F5003F 		cmp	r3, #131072
 570 008c EED1     		bne	.L36
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     }
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   } 
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   return HAL_OK;
 571              		.loc 1 292 10
 572 008e 0023     		movs	r3, #0
ARM GAS  /tmp/ccHSsU65.s 			page 16


 573              	.L33:
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 574              		.loc 1 293 1
 575 0090 1846     		mov	r0, r3
 576 0092 0837     		adds	r7, r7, #8
 577              	.LCFI37:
 578              		.cfi_def_cfa_offset 8
 579 0094 BD46     		mov	sp, r7
 580              	.LCFI38:
 581              		.cfi_def_cfa_register 13
 582              		@ sp needed
 583 0096 80BD     		pop	{r7, pc}
 584              	.L38:
 585              		.align	2
 586              	.L37:
 587 0098 00380240 		.word	1073887232
 588 009c 00700040 		.word	1073770496
 589              		.cfi_endproc
 590              	.LFE149:
 592              		.section	.text.HAL_PWREx_DisableOverDrive,"ax",%progbits
 593              		.align	1
 594              		.global	HAL_PWREx_DisableOverDrive
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu fpv5-d16
 600              	HAL_PWREx_DisableOverDrive:
 601              	.LFB150:
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief  Deactivates the Over-Drive mode.
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note   This mode allows the CPU and the core logic to operate at a higher frequency
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         than the normal mode for a given voltage scaling (scale 1, scale 2 or scale 3).    
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note   It is recommended to enter or exit Over-drive mode when the application is not running 
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         critical tasks and when the system clock source is either HSI or HSE. 
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         The peripheral clocks must be enabled once the Over-drive mode is activated.
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval HAL status
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 602              		.loc 1 306 1
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 8
 605              		@ frame_needed = 1, uses_anonymous_args = 0
 606 0000 80B5     		push	{r7, lr}
 607              	.LCFI39:
 608              		.cfi_def_cfa_offset 8
 609              		.cfi_offset 7, -8
 610              		.cfi_offset 14, -4
 611 0002 82B0     		sub	sp, sp, #8
 612              	.LCFI40:
 613              		.cfi_def_cfa_offset 16
 614 0004 00AF     		add	r7, sp, #0
 615              	.LCFI41:
 616              		.cfi_def_cfa_register 7
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   uint32_t tickstart = 0;
ARM GAS  /tmp/ccHSsU65.s 			page 17


 617              		.loc 1 307 12
 618 0006 0023     		movs	r3, #0
 619 0008 7B60     		str	r3, [r7, #4]
 620              	.LBB3:
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 621              		.loc 1 309 3
 622 000a 234B     		ldr	r3, .L45
 623 000c 1B6C     		ldr	r3, [r3, #64]
 624 000e 224A     		ldr	r2, .L45
 625 0010 43F08053 		orr	r3, r3, #268435456
 626 0014 1364     		str	r3, [r2, #64]
 627 0016 204B     		ldr	r3, .L45
 628 0018 1B6C     		ldr	r3, [r3, #64]
 629 001a 03F08053 		and	r3, r3, #268435456
 630 001e 3B60     		str	r3, [r7]
 631 0020 3B68     		ldr	r3, [r7]
 632              	.LBE3:
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Disable the Over-drive switch */
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
 633              		.loc 1 312 3
 634 0022 1E4B     		ldr	r3, .L45+4
 635 0024 1B68     		ldr	r3, [r3]
 636 0026 1D4A     		ldr	r2, .L45+4
 637 0028 23F40033 		bic	r3, r3, #131072
 638 002c 1360     		str	r3, [r2]
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Get tick */
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 639              		.loc 1 315 15
 640 002e FFF7FEFF 		bl	HAL_GetTick
 641 0032 7860     		str	r0, [r7, #4]
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****  
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 642              		.loc 1 317 8
 643 0034 09E0     		b	.L40
 644              	.L42:
 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 645              		.loc 1 319 9
 646 0036 FFF7FEFF 		bl	HAL_GetTick
 647 003a 0246     		mov	r2, r0
 648              		.loc 1 319 23
 649 003c 7B68     		ldr	r3, [r7, #4]
 650 003e D31A     		subs	r3, r2, r3
 651              		.loc 1 319 7
 652 0040 B3F57A7F 		cmp	r3, #1000
 653 0044 01D9     		bls	.L40
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 654              		.loc 1 321 14
 655 0046 0323     		movs	r3, #3
 656 0048 22E0     		b	.L41
 657              	.L40:
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 658              		.loc 1 317 9
ARM GAS  /tmp/ccHSsU65.s 			page 18


 659 004a 144B     		ldr	r3, .L45+4
 660 004c 5B68     		ldr	r3, [r3, #4]
 661 004e 03F40033 		and	r3, r3, #131072
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 662              		.loc 1 317 8
 663 0052 B3F5003F 		cmp	r3, #131072
 664 0056 EED0     		beq	.L42
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     }
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   } 
 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Disable the Over-drive */
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_PWR_OVERDRIVE_DISABLE();
 665              		.loc 1 326 3
 666 0058 104B     		ldr	r3, .L45+4
 667 005a 1B68     		ldr	r3, [r3]
 668 005c 0F4A     		ldr	r2, .L45+4
 669 005e 23F48033 		bic	r3, r3, #65536
 670 0062 1360     		str	r3, [r2]
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Get tick */
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 671              		.loc 1 329 15
 672 0064 FFF7FEFF 		bl	HAL_GetTick
 673 0068 7860     		str	r0, [r7, #4]
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 674              		.loc 1 331 8
 675 006a 09E0     		b	.L43
 676              	.L44:
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 677              		.loc 1 333 9
 678 006c FFF7FEFF 		bl	HAL_GetTick
 679 0070 0246     		mov	r2, r0
 680              		.loc 1 333 23
 681 0072 7B68     		ldr	r3, [r7, #4]
 682 0074 D31A     		subs	r3, r2, r3
 683              		.loc 1 333 7
 684 0076 B3F57A7F 		cmp	r3, #1000
 685 007a 01D9     		bls	.L43
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 686              		.loc 1 335 14
 687 007c 0323     		movs	r3, #3
 688 007e 07E0     		b	.L41
 689              	.L43:
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 690              		.loc 1 331 9
 691 0080 064B     		ldr	r3, .L45+4
 692 0082 5B68     		ldr	r3, [r3, #4]
 693 0084 03F48033 		and	r3, r3, #65536
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 694              		.loc 1 331 8
 695 0088 B3F5803F 		cmp	r3, #65536
 696 008c EED0     		beq	.L44
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     }
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccHSsU65.s 			page 19


 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   return HAL_OK;
 697              		.loc 1 339 10
 698 008e 0023     		movs	r3, #0
 699              	.L41:
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 700              		.loc 1 340 1
 701 0090 1846     		mov	r0, r3
 702 0092 0837     		adds	r7, r7, #8
 703              	.LCFI42:
 704              		.cfi_def_cfa_offset 8
 705 0094 BD46     		mov	sp, r7
 706              	.LCFI43:
 707              		.cfi_def_cfa_register 13
 708              		@ sp needed
 709 0096 80BD     		pop	{r7, pc}
 710              	.L46:
 711              		.align	2
 712              	.L45:
 713 0098 00380240 		.word	1073887232
 714 009c 00700040 		.word	1073770496
 715              		.cfi_endproc
 716              	.LFE150:
 718              		.section	.text.HAL_PWREx_EnterUnderDriveSTOPMode,"ax",%progbits
 719              		.align	1
 720              		.global	HAL_PWREx_EnterUnderDriveSTOPMode
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu fpv5-d16
 726              	HAL_PWREx_EnterUnderDriveSTOPMode:
 727              	.LFB151:
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief  Enters in Under-Drive STOP mode.
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * 
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note    This mode can be selected only when the Under-Drive is already active 
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *   
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note    This mode is enabled only with STOP low power mode.
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *          In this mode, the 1.2V domain is preserved in reduced leakage mode. This 
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *          mode is only available when the main regulator or the low power regulator 
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *          is in low voltage mode
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *        
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note   If the Under-drive mode was enabled, it is automatically disabled after 
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         exiting Stop mode. 
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         When the voltage regulator operates in Under-drive mode, an additional  
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         startup delay is induced when waking up from Stop mode.
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                    
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *   
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         the HSI RC oscillator is selected as system clock.
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *           
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         startup delay is incurred when waking up from Stop mode. 
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         is higher although the startup time is reduced.
ARM GAS  /tmp/ccHSsU65.s 			page 20


 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *     
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @param  Regulator specifies the regulator state in STOP mode.
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_UNDERDRIVE_ON:  Main Regulator in under-drive mode 
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                 and Flash memory in power-down when the device is in Stop under-drive mode
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_UNDERDRIVE_ON:  Low Power Regulator in under-drive mode 
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                and Flash memory in power-down when the device is in Stop under-drive mode
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @param  STOPEntry specifies if STOP mode in entered with WFI or WFE instruction.
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval None
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 728              		.loc 1 380 1
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 24
 731              		@ frame_needed = 1, uses_anonymous_args = 0
 732 0000 80B5     		push	{r7, lr}
 733              	.LCFI44:
 734              		.cfi_def_cfa_offset 8
 735              		.cfi_offset 7, -8
 736              		.cfi_offset 14, -4
 737 0002 86B0     		sub	sp, sp, #24
 738              	.LCFI45:
 739              		.cfi_def_cfa_offset 32
 740 0004 00AF     		add	r7, sp, #0
 741              	.LCFI46:
 742              		.cfi_def_cfa_register 7
 743 0006 7860     		str	r0, [r7, #4]
 744 0008 0B46     		mov	r3, r1
 745 000a FB70     		strb	r3, [r7, #3]
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   uint32_t tempreg = 0;
 746              		.loc 1 381 12
 747 000c 0023     		movs	r3, #0
 748 000e 7B61     		str	r3, [r7, #20]
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   uint32_t tickstart = 0;
 749              		.loc 1 382 12
 750 0010 0023     		movs	r3, #0
 751 0012 3B61     		str	r3, [r7, #16]
 752              	.LBB4:
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Check the parameters */
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable Power ctrl clock */
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 753              		.loc 1 389 3
 754 0014 284B     		ldr	r3, .L53
 755 0016 1B6C     		ldr	r3, [r3, #64]
 756 0018 274A     		ldr	r2, .L53
 757 001a 43F08053 		orr	r3, r3, #268435456
 758 001e 1364     		str	r3, [r2, #64]
 759 0020 254B     		ldr	r3, .L53
 760 0022 1B6C     		ldr	r3, [r3, #64]
ARM GAS  /tmp/ccHSsU65.s 			page 21


 761 0024 03F08053 		and	r3, r3, #268435456
 762 0028 FB60     		str	r3, [r7, #12]
 763 002a FB68     		ldr	r3, [r7, #12]
 764              	.LBE4:
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable the Under-drive Mode ---------------------------------------------*/
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Clear Under-drive flag */
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_PWR_CLEAR_ODRUDR_FLAG();
 765              		.loc 1 392 3
 766 002c 234B     		ldr	r3, .L53+4
 767 002e 5A68     		ldr	r2, [r3, #4]
 768 0030 2249     		ldr	r1, .L53+4
 769 0032 234B     		ldr	r3, .L53+8
 770 0034 1343     		orrs	r3, r3, r2
 771 0036 4B60     		str	r3, [r1, #4]
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable the Under-drive */ 
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_PWR_UNDERDRIVE_ENABLE();
 772              		.loc 1 395 3
 773 0038 204B     		ldr	r3, .L53+4
 774 003a 1B68     		ldr	r3, [r3]
 775 003c 1F4A     		ldr	r2, .L53+4
 776 003e 43F44023 		orr	r3, r3, #786432
 777 0042 1360     		str	r3, [r2]
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Get tick */
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 778              		.loc 1 398 15
 779 0044 FFF7FEFF 		bl	HAL_GetTick
 780 0048 3861     		str	r0, [r7, #16]
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Wait for UnderDrive mode is ready */
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
 781              		.loc 1 401 8
 782 004a 09E0     		b	.L48
 783              	.L50:
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_UDERDRIVE_TIMEOUT_VALUE)
 784              		.loc 1 403 9
 785 004c FFF7FEFF 		bl	HAL_GetTick
 786 0050 0246     		mov	r2, r0
 787              		.loc 1 403 23
 788 0052 3B69     		ldr	r3, [r7, #16]
 789 0054 D31A     		subs	r3, r2, r3
 790              		.loc 1 403 7
 791 0056 B3F57A7F 		cmp	r3, #1000
 792 005a 01D9     		bls	.L48
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 793              		.loc 1 405 14
 794 005c 0323     		movs	r3, #3
 795 005e 27E0     		b	.L49
 796              	.L48:
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 797              		.loc 1 401 9
 798 0060 164B     		ldr	r3, .L53+4
 799 0062 5B68     		ldr	r3, [r3, #4]
 800 0064 03F44023 		and	r3, r3, #786432
ARM GAS  /tmp/ccHSsU65.s 			page 22


 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 801              		.loc 1 401 8
 802 0068 B3F5402F 		cmp	r3, #786432
 803 006c EED0     		beq	.L50
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     }
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   }
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tempreg = PWR->CR1;
 804              		.loc 1 410 16
 805 006e 134B     		ldr	r3, .L53+4
 806              		.loc 1 410 11
 807 0070 1B68     		ldr	r3, [r3]
 808 0072 7B61     		str	r3, [r7, #20]
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Clear PDDS, LPDS, MRLUDS and LPLUDS bits */
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tempreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS | PWR_CR1_LPUDS | PWR_CR1_MRUDS);
 809              		.loc 1 412 11
 810 0074 7A69     		ldr	r2, [r7, #20]
 811 0076 134B     		ldr	r3, .L53+12
 812 0078 1340     		ands	r3, r3, r2
 813 007a 7B61     		str	r3, [r7, #20]
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   tempreg |= Regulator;
 814              		.loc 1 415 11
 815 007c 7A69     		ldr	r2, [r7, #20]
 816 007e 7B68     		ldr	r3, [r7, #4]
 817 0080 1343     		orrs	r3, r3, r2
 818 0082 7B61     		str	r3, [r7, #20]
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Store the new value */
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   PWR->CR1 = tempreg;
 819              		.loc 1 418 6
 820 0084 0D4A     		ldr	r2, .L53+4
 821              		.loc 1 418 12
 822 0086 7B69     		ldr	r3, [r7, #20]
 823 0088 1360     		str	r3, [r2]
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 824              		.loc 1 421 12
 825 008a 0F4B     		ldr	r3, .L53+16
 826 008c 1B69     		ldr	r3, [r3, #16]
 827 008e 0E4A     		ldr	r2, .L53+16
 828 0090 43F00403 		orr	r3, r3, #4
 829 0094 1361     		str	r3, [r2, #16]
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Select STOP mode entry --------------------------------------------------*/
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   if(STOPEntry == PWR_SLEEPENTRY_WFI)
 830              		.loc 1 424 5
 831 0096 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 832 0098 012B     		cmp	r3, #1
 833 009a 01D1     		bne	.L51
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {   
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     __WFI();
 834              		.loc 1 427 5
ARM GAS  /tmp/ccHSsU65.s 			page 23


 835              		.syntax unified
 836              	@ 427 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c" 1
 837 009c 30BF     		wfi
 838              	@ 0 "" 2
 839              		.thumb
 840              		.syntax unified
 841 009e 00E0     		b	.L52
 842              	.L51:
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   }
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   else
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Request Wait For Event */
 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     __WFE();
 843              		.loc 1 432 5
 844              		.syntax unified
 845              	@ 432 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c" 1
 846 00a0 20BF     		wfe
 847              	@ 0 "" 2
 848              		.thumb
 849              		.syntax unified
 850              	.L52:
 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   }
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 851              		.loc 1 435 12
 852 00a2 094B     		ldr	r3, .L53+16
 853 00a4 1B69     		ldr	r3, [r3, #16]
 854 00a6 084A     		ldr	r2, .L53+16
 855 00a8 23F00403 		bic	r3, r3, #4
 856 00ac 1361     		str	r3, [r2, #16]
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   return HAL_OK;  
 857              		.loc 1 437 10
 858 00ae 0023     		movs	r3, #0
 859              	.L49:
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 860              		.loc 1 438 1
 861 00b0 1846     		mov	r0, r3
 862 00b2 1837     		adds	r7, r7, #24
 863              	.LCFI47:
 864              		.cfi_def_cfa_offset 8
 865 00b4 BD46     		mov	sp, r7
 866              	.LCFI48:
 867              		.cfi_def_cfa_register 13
 868              		@ sp needed
 869 00b6 80BD     		pop	{r7, pc}
 870              	.L54:
 871              		.align	2
 872              	.L53:
 873 00b8 00380240 		.word	1073887232
 874 00bc 00700040 		.word	1073770496
 875 00c0 00010C00 		.word	786688
 876 00c4 FCF3FFFF 		.word	-3076
 877 00c8 00ED00E0 		.word	-536810240
 878              		.cfi_endproc
 879              	.LFE151:
 881              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
ARM GAS  /tmp/ccHSsU65.s 			page 24


 882              		.align	1
 883              		.global	HAL_PWREx_GetVoltageRange
 884              		.syntax unified
 885              		.thumb
 886              		.thumb_func
 887              		.fpu fpv5-d16
 889              	HAL_PWREx_GetVoltageRange:
 890              	.LFB152:
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Returns Voltage Scaling Range.
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1, PWR_REGULATOR_VOLTAGE_SCALE2 or 
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *            PWR_REGULATOR_VOLTAGE_SCALE3)PWR_REGULATOR_VOLTAGE_SCALE1
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */  
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange(void)
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 891              		.loc 1 446 1
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 1, uses_anonymous_args = 0
 895              		@ link register save eliminated.
 896 0000 80B4     		push	{r7}
 897              	.LCFI49:
 898              		.cfi_def_cfa_offset 4
 899              		.cfi_offset 7, -4
 900 0002 00AF     		add	r7, sp, #0
 901              	.LCFI50:
 902              		.cfi_def_cfa_register 7
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   return  (PWR->CR1 & PWR_CR1_VOS);
 903              		.loc 1 447 15
 904 0004 044B     		ldr	r3, .L57
 905 0006 1B68     		ldr	r3, [r3]
 906              		.loc 1 447 21
 907 0008 03F44043 		and	r3, r3, #49152
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 908              		.loc 1 448 1
 909 000c 1846     		mov	r0, r3
 910 000e BD46     		mov	sp, r7
 911              	.LCFI51:
 912              		.cfi_def_cfa_register 13
 913              		@ sp needed
 914 0010 5DF8047B 		ldr	r7, [sp], #4
 915              	.LCFI52:
 916              		.cfi_restore 7
 917              		.cfi_def_cfa_offset 0
 918 0014 7047     		bx	lr
 919              	.L58:
 920 0016 00BF     		.align	2
 921              	.L57:
 922 0018 00700040 		.word	1073770496
 923              		.cfi_endproc
 924              	.LFE152:
 926              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
 927              		.align	1
 928              		.global	HAL_PWREx_ControlVoltageScaling
 929              		.syntax unified
 930              		.thumb
ARM GAS  /tmp/ccHSsU65.s 			page 25


 931              		.thumb_func
 932              		.fpu fpv5-d16
 934              	HAL_PWREx_ControlVoltageScaling:
 935              	.LFB153:
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** /**
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @brief Configures the main internal regulator output voltage.
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @param  VoltageScaling specifies the regulator output voltage to achieve
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *         a tradeoff between performance and power consumption.
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output range 1 mode,
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                                                typical output voltage at 1.4 V,  
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                                                system frequency up to 216 MHz.
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output range 2 mode,
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                                                typical output voltage at 1.2 V,                
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                                                system frequency up to 180 MHz.
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output range 2 mode,
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                                                typical output voltage at 1.00 V,               
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *                                                system frequency up to 151 MHz.
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note To update the system clock frequency(SYSCLK):
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *        - Set the HSI or HSE as system clock frequency using the HAL_RCC_ClockConfig().
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *        - Call the HAL_RCC_OscConfig() to configure the PLL.
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *        - Call HAL_PWREx_ConfigVoltageScaling() API to adjust the voltage scale.
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *        - Set the new system clock frequency using the HAL_RCC_ClockConfig().
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note The scale can be modified only when the HSI or HSE clock source is selected 
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *        as system clock source, otherwise the API returns HAL_ERROR.  
 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note When the PLL is OFF, the voltage scale 3 is automatically selected and the VOS bits
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   *       value in the PWR_CR1 register are not taken in account.
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @note The new voltage scale is active only when the PLL is ON.  
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   * @retval HAL Status
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   */
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** {
 936              		.loc 1 478 1
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 24
 939              		@ frame_needed = 1, uses_anonymous_args = 0
 940 0000 80B5     		push	{r7, lr}
 941              	.LCFI53:
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 7, -8
 944              		.cfi_offset 14, -4
 945 0002 86B0     		sub	sp, sp, #24
 946              	.LCFI54:
 947              		.cfi_def_cfa_offset 32
 948 0004 00AF     		add	r7, sp, #0
 949              	.LCFI55:
 950              		.cfi_def_cfa_register 7
 951 0006 7860     		str	r0, [r7, #4]
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   uint32_t tickstart = 0;
 952              		.loc 1 479 12
 953 0008 0023     		movs	r3, #0
 954 000a 7B61     		str	r3, [r7, #20]
 955              	.LBB5:
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));
ARM GAS  /tmp/ccHSsU65.s 			page 26


 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Enable Power ctrl clock */
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 956              		.loc 1 484 3
 957 000c 374B     		ldr	r3, .L70
 958 000e 1B6C     		ldr	r3, [r3, #64]
 959 0010 364A     		ldr	r2, .L70
 960 0012 43F08053 		orr	r3, r3, #268435456
 961 0016 1364     		str	r3, [r2, #64]
 962 0018 344B     		ldr	r3, .L70
 963 001a 1B6C     		ldr	r3, [r3, #64]
 964 001c 03F08053 		and	r3, r3, #268435456
 965 0020 3B61     		str	r3, [r7, #16]
 966 0022 3B69     		ldr	r3, [r7, #16]
 967              	.LBE5:
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** 
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   /* Check if the PLL is used as system clock or not */
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 968              		.loc 1 487 6
 969 0024 314B     		ldr	r3, .L70
 970 0026 9B68     		ldr	r3, [r3, #8]
 971 0028 03F00C03 		and	r3, r3, #12
 972              		.loc 1 487 5
 973 002c 082B     		cmp	r3, #8
 974 002e 55D0     		beq	.L60
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Disable the main PLL */
 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     __HAL_RCC_PLL_DISABLE();
 975              		.loc 1 490 5
 976 0030 2E4B     		ldr	r3, .L70
 977 0032 1B68     		ldr	r3, [r3]
 978 0034 2D4A     		ldr	r2, .L70
 979 0036 23F08073 		bic	r3, r3, #16777216
 980 003a 1360     		str	r3, [r2]
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Get Start Tick */
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     tickstart = HAL_GetTick();    
 981              		.loc 1 493 17
 982 003c FFF7FEFF 		bl	HAL_GetTick
 983 0040 7861     		str	r0, [r7, #20]
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Wait till PLL is disabled */  
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 984              		.loc 1 495 10
 985 0042 08E0     		b	.L61
 986              	.L63:
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 987              		.loc 1 497 11
 988 0044 FFF7FEFF 		bl	HAL_GetTick
 989 0048 0246     		mov	r2, r0
 990              		.loc 1 497 25
 991 004a 7B69     		ldr	r3, [r7, #20]
 992 004c D31A     		subs	r3, r2, r3
 993              		.loc 1 497 9
 994 004e 022B     		cmp	r3, #2
 995 0050 01D9     		bls	.L61
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       {
ARM GAS  /tmp/ccHSsU65.s 			page 27


 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****         return HAL_TIMEOUT;
 996              		.loc 1 499 16
 997 0052 0323     		movs	r3, #3
 998 0054 45E0     		b	.L62
 999              	.L61:
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 1000              		.loc 1 495 11
 1001 0056 254B     		ldr	r3, .L70
 1002 0058 1B68     		ldr	r3, [r3]
 1003 005a 03F00073 		and	r3, r3, #33554432
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 1004              		.loc 1 495 10
 1005 005e 002B     		cmp	r3, #0
 1006 0060 F0D1     		bne	.L63
 1007              	.LBB6:
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       }
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     }
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Set Range */
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 1008              		.loc 1 504 5
 1009 0062 234B     		ldr	r3, .L70+4
 1010 0064 1B68     		ldr	r3, [r3]
 1011 0066 23F44042 		bic	r2, r3, #49152
 1012 006a 2149     		ldr	r1, .L70+4
 1013 006c 7B68     		ldr	r3, [r7, #4]
 1014 006e 1343     		orrs	r3, r3, r2
 1015 0070 0B60     		str	r3, [r1]
 1016 0072 1F4B     		ldr	r3, .L70+4
 1017 0074 1B68     		ldr	r3, [r3]
 1018 0076 03F44043 		and	r3, r3, #49152
 1019 007a FB60     		str	r3, [r7, #12]
 1020 007c FB68     		ldr	r3, [r7, #12]
 1021              	.LBE6:
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Enable the main PLL */
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     __HAL_RCC_PLL_ENABLE();
 1022              		.loc 1 507 5
 1023 007e 1B4B     		ldr	r3, .L70
 1024 0080 1B68     		ldr	r3, [r3]
 1025 0082 1A4A     		ldr	r2, .L70
 1026 0084 43F08073 		orr	r3, r3, #16777216
 1027 0088 1360     		str	r3, [r2]
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Get Start Tick */
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     tickstart = HAL_GetTick();
 1028              		.loc 1 510 17
 1029 008a FFF7FEFF 		bl	HAL_GetTick
 1030 008e 7861     		str	r0, [r7, #20]
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Wait till PLL is ready */  
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1031              		.loc 1 512 10
 1032 0090 08E0     		b	.L64
 1033              	.L65:
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 1034              		.loc 1 514 11
ARM GAS  /tmp/ccHSsU65.s 			page 28


 1035 0092 FFF7FEFF 		bl	HAL_GetTick
 1036 0096 0246     		mov	r2, r0
 1037              		.loc 1 514 25
 1038 0098 7B69     		ldr	r3, [r7, #20]
 1039 009a D31A     		subs	r3, r2, r3
 1040              		.loc 1 514 9
 1041 009c 022B     		cmp	r3, #2
 1042 009e 01D9     		bls	.L64
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       {
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****         return HAL_TIMEOUT;
 1043              		.loc 1 516 16
 1044 00a0 0323     		movs	r3, #3
 1045 00a2 1EE0     		b	.L62
 1046              	.L64:
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 1047              		.loc 1 512 11
 1048 00a4 114B     		ldr	r3, .L70
 1049 00a6 1B68     		ldr	r3, [r3]
 1050 00a8 03F00073 		and	r3, r3, #33554432
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 1051              		.loc 1 512 10
 1052 00ac 002B     		cmp	r3, #0
 1053 00ae F0D0     		beq	.L65
 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       } 
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     }
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     /* Get Start Tick */
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     tickstart = HAL_GetTick();
 1054              		.loc 1 521 17
 1055 00b0 FFF7FEFF 		bl	HAL_GetTick
 1056 00b4 7861     		str	r0, [r7, #20]
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 1057              		.loc 1 522 10
 1058 00b6 09E0     		b	.L66
 1059              	.L67:
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 1060              		.loc 1 524 11
 1061 00b8 FFF7FEFF 		bl	HAL_GetTick
 1062 00bc 0246     		mov	r2, r0
 1063              		.loc 1 524 25
 1064 00be 7B69     		ldr	r3, [r7, #20]
 1065 00c0 D31A     		subs	r3, r2, r3
 1066              		.loc 1 524 9
 1067 00c2 B3F57A7F 		cmp	r3, #1000
 1068 00c6 01D9     		bls	.L66
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       {
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****         return HAL_TIMEOUT;
 1069              		.loc 1 526 16
 1070 00c8 0323     		movs	r3, #3
 1071 00ca 0AE0     		b	.L62
 1072              	.L66:
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 1073              		.loc 1 522 12
 1074 00cc 084B     		ldr	r3, .L70+4
 1075 00ce 5B68     		ldr	r3, [r3, #4]
 1076 00d0 03F48043 		and	r3, r3, #16384
ARM GAS  /tmp/ccHSsU65.s 			page 29


 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     {
 1077              		.loc 1 522 10
 1078 00d4 B3F5804F 		cmp	r3, #16384
 1079 00d8 EED1     		bne	.L67
 1080 00da 01E0     		b	.L69
 1081              	.L60:
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****       } 
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     }
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   }
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   else
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   {
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****     return HAL_ERROR;
 1082              		.loc 1 532 12
 1083 00dc 0123     		movs	r3, #1
 1084 00de 00E0     		b	.L62
 1085              	.L69:
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   }
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c ****   return HAL_OK;
 1086              		.loc 1 534 10
 1087 00e0 0023     		movs	r3, #0
 1088              	.L62:
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_pwr_ex.c **** }
 1089              		.loc 1 535 1
 1090 00e2 1846     		mov	r0, r3
 1091 00e4 1837     		adds	r7, r7, #24
 1092              	.LCFI56:
 1093              		.cfi_def_cfa_offset 8
 1094 00e6 BD46     		mov	sp, r7
 1095              	.LCFI57:
 1096              		.cfi_def_cfa_register 13
 1097              		@ sp needed
 1098 00e8 80BD     		pop	{r7, pc}
 1099              	.L71:
 1100 00ea 00BF     		.align	2
 1101              	.L70:
 1102 00ec 00380240 		.word	1073887232
 1103 00f0 00700040 		.word	1073770496
 1104              		.cfi_endproc
 1105              	.LFE153:
 1107              		.text
 1108              	.Letext0:
 1109              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1110              		.file 3 "Drivers/CMSIS/Include/core_cm7.h"
 1111              		.file 4 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1112              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f765xx.h"
 1113              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1114              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1115              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccHSsU65.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_pwr_ex.c
     /tmp/ccHSsU65.s:17     .text.HAL_PWREx_EnableBkUpReg:0000000000000000 $t
     /tmp/ccHSsU65.s:25     .text.HAL_PWREx_EnableBkUpReg:0000000000000000 HAL_PWREx_EnableBkUpReg
     /tmp/ccHSsU65.s:100    .text.HAL_PWREx_EnableBkUpReg:0000000000000054 $d
     /tmp/ccHSsU65.s:105    .text.HAL_PWREx_DisableBkUpReg:0000000000000000 $t
     /tmp/ccHSsU65.s:112    .text.HAL_PWREx_DisableBkUpReg:0000000000000000 HAL_PWREx_DisableBkUpReg
     /tmp/ccHSsU65.s:186    .text.HAL_PWREx_DisableBkUpReg:0000000000000054 $d
     /tmp/ccHSsU65.s:191    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 $t
     /tmp/ccHSsU65.s:198    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 HAL_PWREx_EnableFlashPowerDown
     /tmp/ccHSsU65.s:232    .text.HAL_PWREx_EnableFlashPowerDown:000000000000001c $d
     /tmp/ccHSsU65.s:237    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 $t
     /tmp/ccHSsU65.s:244    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 HAL_PWREx_DisableFlashPowerDown
     /tmp/ccHSsU65.s:278    .text.HAL_PWREx_DisableFlashPowerDown:000000000000001c $d
     /tmp/ccHSsU65.s:283    .text.HAL_PWREx_EnableMainRegulatorLowVoltage:0000000000000000 $t
     /tmp/ccHSsU65.s:290    .text.HAL_PWREx_EnableMainRegulatorLowVoltage:0000000000000000 HAL_PWREx_EnableMainRegulatorLowVoltage
     /tmp/ccHSsU65.s:324    .text.HAL_PWREx_EnableMainRegulatorLowVoltage:000000000000001c $d
     /tmp/ccHSsU65.s:329    .text.HAL_PWREx_DisableMainRegulatorLowVoltage:0000000000000000 $t
     /tmp/ccHSsU65.s:336    .text.HAL_PWREx_DisableMainRegulatorLowVoltage:0000000000000000 HAL_PWREx_DisableMainRegulatorLowVoltage
     /tmp/ccHSsU65.s:370    .text.HAL_PWREx_DisableMainRegulatorLowVoltage:000000000000001c $d
     /tmp/ccHSsU65.s:375    .text.HAL_PWREx_EnableLowRegulatorLowVoltage:0000000000000000 $t
     /tmp/ccHSsU65.s:382    .text.HAL_PWREx_EnableLowRegulatorLowVoltage:0000000000000000 HAL_PWREx_EnableLowRegulatorLowVoltage
     /tmp/ccHSsU65.s:416    .text.HAL_PWREx_EnableLowRegulatorLowVoltage:000000000000001c $d
     /tmp/ccHSsU65.s:421    .text.HAL_PWREx_DisableLowRegulatorLowVoltage:0000000000000000 $t
     /tmp/ccHSsU65.s:428    .text.HAL_PWREx_DisableLowRegulatorLowVoltage:0000000000000000 HAL_PWREx_DisableLowRegulatorLowVoltage
     /tmp/ccHSsU65.s:462    .text.HAL_PWREx_DisableLowRegulatorLowVoltage:000000000000001c $d
     /tmp/ccHSsU65.s:467    .text.HAL_PWREx_EnableOverDrive:0000000000000000 $t
     /tmp/ccHSsU65.s:474    .text.HAL_PWREx_EnableOverDrive:0000000000000000 HAL_PWREx_EnableOverDrive
     /tmp/ccHSsU65.s:587    .text.HAL_PWREx_EnableOverDrive:0000000000000098 $d
     /tmp/ccHSsU65.s:593    .text.HAL_PWREx_DisableOverDrive:0000000000000000 $t
     /tmp/ccHSsU65.s:600    .text.HAL_PWREx_DisableOverDrive:0000000000000000 HAL_PWREx_DisableOverDrive
     /tmp/ccHSsU65.s:713    .text.HAL_PWREx_DisableOverDrive:0000000000000098 $d
     /tmp/ccHSsU65.s:719    .text.HAL_PWREx_EnterUnderDriveSTOPMode:0000000000000000 $t
     /tmp/ccHSsU65.s:726    .text.HAL_PWREx_EnterUnderDriveSTOPMode:0000000000000000 HAL_PWREx_EnterUnderDriveSTOPMode
     /tmp/ccHSsU65.s:873    .text.HAL_PWREx_EnterUnderDriveSTOPMode:00000000000000b8 $d
     /tmp/ccHSsU65.s:882    .text.HAL_PWREx_GetVoltageRange:0000000000000000 $t
     /tmp/ccHSsU65.s:889    .text.HAL_PWREx_GetVoltageRange:0000000000000000 HAL_PWREx_GetVoltageRange
     /tmp/ccHSsU65.s:922    .text.HAL_PWREx_GetVoltageRange:0000000000000018 $d
     /tmp/ccHSsU65.s:927    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 $t
     /tmp/ccHSsU65.s:934    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 HAL_PWREx_ControlVoltageScaling
     /tmp/ccHSsU65.s:1102   .text.HAL_PWREx_ControlVoltageScaling:00000000000000ec $d

UNDEFINED SYMBOLS
HAL_GetTick
