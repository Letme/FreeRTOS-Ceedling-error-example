ARM GAS  /tmp/ccHYJnM0.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"tasks.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.global	pxCurrentTCB
  17              		.section	.bss.pxCurrentTCB,"aw",%nobits
  18              		.align	2
  21              	pxCurrentTCB:
  22 0000 00000000 		.space	4
  23              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  24              		.align	2
  27              	pxReadyTasksLists:
  28 0000 00000000 		.space	140
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  30              		.align	2
  33              	xDelayedTaskList1:
  34 0000 00000000 		.space	20
  34      00000000 
  34      00000000 
  34      00000000 
  34      00000000 
  35              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  36              		.align	2
  39              	xDelayedTaskList2:
  40 0000 00000000 		.space	20
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  42              		.align	2
  45              	pxDelayedTaskList:
  46 0000 00000000 		.space	4
  47              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  48              		.align	2
  51              	pxOverflowDelayedTaskList:
  52 0000 00000000 		.space	4
  53              		.section	.bss.xPendingReadyList,"aw",%nobits
  54              		.align	2
  57              	xPendingReadyList:
  58 0000 00000000 		.space	20
  58      00000000 
ARM GAS  /tmp/ccHYJnM0.s 			page 2


  58      00000000 
  58      00000000 
  58      00000000 
  59              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  60              		.align	2
  63              	xTasksWaitingTermination:
  64 0000 00000000 		.space	20
  64      00000000 
  64      00000000 
  64      00000000 
  64      00000000 
  65              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  66              		.align	2
  69              	uxDeletedTasksWaitingCleanUp:
  70 0000 00000000 		.space	4
  71              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  72              		.align	2
  75              	xSuspendedTaskList:
  76 0000 00000000 		.space	20
  76      00000000 
  76      00000000 
  76      00000000 
  76      00000000 
  77              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  78              		.align	2
  81              	uxCurrentNumberOfTasks:
  82 0000 00000000 		.space	4
  83              		.section	.bss.xTickCount,"aw",%nobits
  84              		.align	2
  87              	xTickCount:
  88 0000 00000000 		.space	4
  89              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  90              		.align	2
  93              	uxTopReadyPriority:
  94 0000 00000000 		.space	4
  95              		.section	.bss.xSchedulerRunning,"aw",%nobits
  96              		.align	2
  99              	xSchedulerRunning:
 100 0000 00000000 		.space	4
 101              		.section	.bss.uxPendedTicks,"aw",%nobits
 102              		.align	2
 105              	uxPendedTicks:
 106 0000 00000000 		.space	4
 107              		.section	.bss.xYieldPending,"aw",%nobits
 108              		.align	2
 111              	xYieldPending:
 112 0000 00000000 		.space	4
 113              		.section	.bss.xNumOfOverflows,"aw",%nobits
 114              		.align	2
 117              	xNumOfOverflows:
 118 0000 00000000 		.space	4
 119              		.section	.bss.uxTaskNumber,"aw",%nobits
 120              		.align	2
 123              	uxTaskNumber:
 124 0000 00000000 		.space	4
 125              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 126              		.align	2
ARM GAS  /tmp/ccHYJnM0.s 			page 3


 129              	xNextTaskUnblockTime:
 130 0000 00000000 		.space	4
 131              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 132              		.align	2
 135              	xIdleTaskHandle:
 136 0000 00000000 		.space	4
 137              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 138              		.align	2
 141              	uxSchedulerSuspended:
 142 0000 00000000 		.space	4
 143              		.section	.text.xTaskCreateStatic,"ax",%progbits
 144              		.align	1
 145              		.global	xTaskCreateStatic
 146              		.arch armv7e-m
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv5-d16
 152              	xTaskCreateStatic:
 153              	.LFB5:
 154              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 4


  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
ARM GAS  /tmp/ccHYJnM0.s 			page 5


  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
ARM GAS  /tmp/ccHYJnM0.s 			page 6


 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
ARM GAS  /tmp/ccHYJnM0.s 			page 7


 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
ARM GAS  /tmp/ccHYJnM0.s 			page 8


 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 9


 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
ARM GAS  /tmp/ccHYJnM0.s 			page 10


 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
ARM GAS  /tmp/ccHYJnM0.s 			page 11


 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/ccHYJnM0.s 			page 12


 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
ARM GAS  /tmp/ccHYJnM0.s 			page 13


 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 155              		.loc 1 585 2
 156              		.cfi_startproc
 157              		@ args = 12, pretend = 0, frame = 40
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 8EB0     		sub	sp, sp, #56
 165              	.LCFI1:
 166              		.cfi_def_cfa_offset 64
 167 0004 04AF     		add	r7, sp, #16
 168              	.LCFI2:
 169              		.cfi_def_cfa 7, 48
 170 0006 F860     		str	r0, [r7, #12]
 171 0008 B960     		str	r1, [r7, #8]
 172 000a 7A60     		str	r2, [r7, #4]
 173 000c 3B60     		str	r3, [r7]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
ARM GAS  /tmp/ccHYJnM0.s 			page 14


 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 174              		.loc 1 589 3
 175 000e 7B6B     		ldr	r3, [r7, #52]
 176 0010 002B     		cmp	r3, #0
 177 0012 0CD1     		bne	.L2
 178              	.LBB108:
 179              	.LBB109:
 180              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
ARM GAS  /tmp/ccHYJnM0.s 			page 15


  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 16


 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 17


 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 181              		.loc 2 195 2
 182              		.syntax unified
 183              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 184 0014 4FF05003 			mov r3, #80												
 185 0018 72B6     		cpsid i													
 186 001a 83F31188 		msr basepri, r3											
 187 001e BFF36F8F 		isb														
 188 0022 BFF34F8F 		dsb														
 189 0026 62B6     		cpsie i													
 190              	
 191              	@ 0 "" 2
 192              		.thumb
 193              		.syntax unified
 194 0028 3B62     		str	r3, [r7, #32]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
ARM GAS  /tmp/ccHYJnM0.s 			page 18


 195              		.loc 2 205 1
 196 002a 00BF     		nop
 197              	.L3:
 198              	.LBE109:
 199              	.LBE108:
 200              		.loc 1 589 3 discriminator 1
 201 002c FEE7     		b	.L3
 202              	.L2:
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 203              		.loc 1 590 3
 204 002e BB6B     		ldr	r3, [r7, #56]
 205 0030 002B     		cmp	r3, #0
 206 0032 0CD1     		bne	.L4
 207              	.LBB110:
 208              	.LBB111:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 209              		.loc 2 195 2
 210              		.syntax unified
 211              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 212 0034 4FF05003 			mov r3, #80												
 213 0038 72B6     		cpsid i													
 214 003a 83F31188 		msr basepri, r3											
 215 003e BFF36F8F 		isb														
 216 0042 BFF34F8F 		dsb														
 217 0046 62B6     		cpsie i													
 218              	
 219              	@ 0 "" 2
 220              		.thumb
 221              		.syntax unified
 222 0048 FB61     		str	r3, [r7, #28]
 223              		.loc 2 205 1
 224 004a 00BF     		nop
 225              	.L5:
 226              	.LBE111:
 227              	.LBE110:
 228              		.loc 1 590 3 discriminator 2
 229 004c FEE7     		b	.L5
 230              	.L4:
 231              	.LBB112:
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 232              		.loc 1 597 20
 233 004e 5423     		movs	r3, #84
 234 0050 3B61     		str	r3, [r7, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 235              		.loc 1 598 4
 236 0052 3B69     		ldr	r3, [r7, #16]
 237 0054 542B     		cmp	r3, #84
 238 0056 0CD0     		beq	.L6
 239              	.LBB113:
 240              	.LBB114:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
ARM GAS  /tmp/ccHYJnM0.s 			page 19


 241              		.loc 2 195 2
 242              		.syntax unified
 243              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 244 0058 4FF05003 			mov r3, #80												
 245 005c 72B6     		cpsid i													
 246 005e 83F31188 		msr basepri, r3											
 247 0062 BFF36F8F 		isb														
 248 0066 BFF34F8F 		dsb														
 249 006a 62B6     		cpsie i													
 250              	
 251              	@ 0 "" 2
 252              		.thumb
 253              		.syntax unified
 254 006c BB61     		str	r3, [r7, #24]
 255              		.loc 2 205 1
 256 006e 00BF     		nop
 257              	.L7:
 258              	.LBE114:
 259              	.LBE113:
 260              		.loc 1 598 4 discriminator 3
 261 0070 FEE7     		b	.L7
 262              	.L6:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 263              		.loc 1 599 4
 264 0072 3B69     		ldr	r3, [r7, #16]
 265              	.LBE112:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 266              		.loc 1 604 5
 267 0074 BB6B     		ldr	r3, [r7, #56]
 268 0076 002B     		cmp	r3, #0
 269 0078 1ED0     		beq	.L8
 270              		.loc 1 604 32 discriminator 1
 271 007a 7B6B     		ldr	r3, [r7, #52]
 272 007c 002B     		cmp	r3, #0
 273 007e 1BD0     		beq	.L8
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 274              		.loc 1 608 13
 275 0080 BB6B     		ldr	r3, [r7, #56]
 276 0082 7B62     		str	r3, [r7, #36]
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 277              		.loc 1 609 22
 278 0084 7B6A     		ldr	r3, [r7, #36]
 279 0086 7A6B     		ldr	r2, [r7, #52]
 280 0088 1A63     		str	r2, [r3, #48]
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
ARM GAS  /tmp/ccHYJnM0.s 			page 20


 281              		.loc 1 615 37
 282 008a 7B6A     		ldr	r3, [r7, #36]
 283 008c 0222     		movs	r2, #2
 284 008e 83F85120 		strb	r2, [r3, #81]
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 285              		.loc 1 619 4
 286 0092 0023     		movs	r3, #0
 287 0094 0393     		str	r3, [sp, #12]
 288 0096 7B6A     		ldr	r3, [r7, #36]
 289 0098 0293     		str	r3, [sp, #8]
 290 009a 07F11403 		add	r3, r7, #20
 291 009e 0193     		str	r3, [sp, #4]
 292 00a0 3B6B     		ldr	r3, [r7, #48]
 293 00a2 0093     		str	r3, [sp]
 294 00a4 3B68     		ldr	r3, [r7]
 295 00a6 7A68     		ldr	r2, [r7, #4]
 296 00a8 B968     		ldr	r1, [r7, #8]
 297 00aa F868     		ldr	r0, [r7, #12]
 298 00ac FFF7FEFF 		bl	prvInitialiseNewTask
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 299              		.loc 1 620 4
 300 00b0 786A     		ldr	r0, [r7, #36]
 301 00b2 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 302 00b6 01E0     		b	.L9
 303              	.L8:
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 304              		.loc 1 624 12
 305 00b8 0023     		movs	r3, #0
 306 00ba 7B61     		str	r3, [r7, #20]
 307              	.L9:
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 308              		.loc 1 627 10
 309 00bc 7B69     		ldr	r3, [r7, #20]
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 310              		.loc 1 628 2
 311 00be 1846     		mov	r0, r3
 312 00c0 2837     		adds	r7, r7, #40
 313              	.LCFI3:
 314              		.cfi_def_cfa_offset 8
 315 00c2 BD46     		mov	sp, r7
 316              	.LCFI4:
 317              		.cfi_def_cfa_register 13
 318              		@ sp needed
 319 00c4 80BD     		pop	{r7, pc}
 320              		.cfi_endproc
 321              	.LFE5:
 323              		.section	.text.xTaskCreate,"ax",%progbits
 324              		.align	1
 325              		.global	xTaskCreate
ARM GAS  /tmp/ccHYJnM0.s 			page 21


 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu fpv5-d16
 331              	xTaskCreate:
 332              	.LFB6:
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
ARM GAS  /tmp/ccHYJnM0.s 			page 22


 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccHYJnM0.s 			page 23


 333              		.loc 1 736 2
 334              		.cfi_startproc
 335              		@ args = 8, pretend = 0, frame = 32
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337 0000 80B5     		push	{r7, lr}
 338              	.LCFI5:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 0002 8CB0     		sub	sp, sp, #48
 343              	.LCFI6:
 344              		.cfi_def_cfa_offset 56
 345 0004 04AF     		add	r7, sp, #16
 346              	.LCFI7:
 347              		.cfi_def_cfa 7, 40
 348 0006 F860     		str	r0, [r7, #12]
 349 0008 B960     		str	r1, [r7, #8]
 350 000a 3B60     		str	r3, [r7]
 351 000c 1346     		mov	r3, r2	@ movhi
 352 000e FB80     		strh	r3, [r7, #6]	@ movhi
 353              	.LBB115:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 354              		.loc 1 770 32
 355 0010 FB88     		ldrh	r3, [r7, #6]
ARM GAS  /tmp/ccHYJnM0.s 			page 24


 356              		.loc 1 770 14
 357 0012 9B00     		lsls	r3, r3, #2
 358 0014 1846     		mov	r0, r3
 359 0016 FFF7FEFF 		bl	pvPortMalloc
 360 001a 7861     		str	r0, [r7, #20]
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 361              		.loc 1 772 6
 362 001c 7B69     		ldr	r3, [r7, #20]
 363 001e 002B     		cmp	r3, #0
 364 0020 0ED0     		beq	.L12
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 365              		.loc 1 775 28
 366 0022 5420     		movs	r0, #84
 367 0024 FFF7FEFF 		bl	pvPortMalloc
 368 0028 F861     		str	r0, [r7, #28]
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 369              		.loc 1 777 7
 370 002a FB69     		ldr	r3, [r7, #28]
 371 002c 002B     		cmp	r3, #0
 372 002e 03D0     		beq	.L13
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 373              		.loc 1 780 24
 374 0030 FB69     		ldr	r3, [r7, #28]
 375 0032 7A69     		ldr	r2, [r7, #20]
 376 0034 1A63     		str	r2, [r3, #48]
 377 0036 05E0     		b	.L14
 378              	.L13:
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 379              		.loc 1 786 6
 380 0038 7869     		ldr	r0, [r7, #20]
 381 003a FFF7FEFF 		bl	vPortFree
 382 003e 01E0     		b	.L14
 383              	.L12:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 384              		.loc 1 791 14
 385 0040 0023     		movs	r3, #0
 386 0042 FB61     		str	r3, [r7, #28]
 387              	.L14:
 388              	.LBE115:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
ARM GAS  /tmp/ccHYJnM0.s 			page 25


 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 389              		.loc 1 796 5
 390 0044 FB69     		ldr	r3, [r7, #28]
 391 0046 002B     		cmp	r3, #0
 392 0048 17D0     		beq	.L15
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 393              		.loc 1 802 37
 394 004a FB69     		ldr	r3, [r7, #28]
 395 004c 0022     		movs	r2, #0
 396 004e 83F85120 		strb	r2, [r3, #81]
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 397              		.loc 1 806 4
 398 0052 FA88     		ldrh	r2, [r7, #6]
 399 0054 0023     		movs	r3, #0
 400 0056 0393     		str	r3, [sp, #12]
 401 0058 FB69     		ldr	r3, [r7, #28]
 402 005a 0293     		str	r3, [sp, #8]
 403 005c FB6A     		ldr	r3, [r7, #44]
 404 005e 0193     		str	r3, [sp, #4]
 405 0060 BB6A     		ldr	r3, [r7, #40]
 406 0062 0093     		str	r3, [sp]
 407 0064 3B68     		ldr	r3, [r7]
 408 0066 B968     		ldr	r1, [r7, #8]
 409 0068 F868     		ldr	r0, [r7, #12]
 410 006a FFF7FEFF 		bl	prvInitialiseNewTask
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 411              		.loc 1 807 4
 412 006e F869     		ldr	r0, [r7, #28]
 413 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 414              		.loc 1 808 12
 415 0074 0123     		movs	r3, #1
 416 0076 BB61     		str	r3, [r7, #24]
 417 0078 02E0     		b	.L16
 418              	.L15:
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 419              		.loc 1 812 12
 420 007a 4FF0FF33 		mov	r3, #-1
 421 007e BB61     		str	r3, [r7, #24]
 422              	.L16:
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 423              		.loc 1 815 10
 424 0080 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccHYJnM0.s 			page 26


 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 425              		.loc 1 816 2
 426 0082 1846     		mov	r0, r3
 427 0084 2037     		adds	r7, r7, #32
 428              	.LCFI8:
 429              		.cfi_def_cfa_offset 8
 430 0086 BD46     		mov	sp, r7
 431              	.LCFI9:
 432              		.cfi_def_cfa_register 13
 433              		@ sp needed
 434 0088 80BD     		pop	{r7, pc}
 435              		.cfi_endproc
 436              	.LFE6:
 438              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 439              		.align	1
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv5-d16
 445              	prvInitialiseNewTask:
 446              	.LFB7:
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 447              		.loc 1 829 1
 448              		.cfi_startproc
 449              		@ args = 16, pretend = 0, frame = 32
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451 0000 80B5     		push	{r7, lr}
 452              	.LCFI10:
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 0002 88B0     		sub	sp, sp, #32
 457              	.LCFI11:
 458              		.cfi_def_cfa_offset 40
 459 0004 00AF     		add	r7, sp, #0
 460              	.LCFI12:
 461              		.cfi_def_cfa_register 7
 462 0006 F860     		str	r0, [r7, #12]
 463 0008 B960     		str	r1, [r7, #8]
 464 000a 7A60     		str	r2, [r7, #4]
 465 000c 3B60     		str	r3, [r7]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
ARM GAS  /tmp/ccHYJnM0.s 			page 27


 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 466              		.loc 1 861 29
 467 000e 3B6B     		ldr	r3, [r7, #48]
 468 0010 1A6B     		ldr	r2, [r3, #48]
 469              		.loc 1 861 38
 470 0012 7968     		ldr	r1, [r7, #4]
 471 0014 6FF04043 		mvn	r3, #-1073741824
 472 0018 0B44     		add	r3, r3, r1
 473 001a 9B00     		lsls	r3, r3, #2
 474              		.loc 1 861 16
 475 001c 1344     		add	r3, r3, r2
 476 001e BB61     		str	r3, [r7, #24]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 477              		.loc 1 862 40
 478 0020 BB69     		ldr	r3, [r7, #24]
 479              		.loc 1 862 81
 480 0022 23F00703 		bic	r3, r3, #7
 481              		.loc 1 862 16
 482 0026 BB61     		str	r3, [r7, #24]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 483              		.loc 1 865 3
 484 0028 BB69     		ldr	r3, [r7, #24]
 485 002a 03F00703 		and	r3, r3, #7
 486 002e 002B     		cmp	r3, #0
 487 0030 0CD0     		beq	.L19
 488              	.LBB116:
 489              	.LBB117:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
ARM GAS  /tmp/ccHYJnM0.s 			page 28


 490              		.loc 2 195 2
 491              		.syntax unified
 492              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 493 0032 4FF05003 			mov r3, #80												
 494 0036 72B6     		cpsid i													
 495 0038 83F31188 		msr basepri, r3											
 496 003c BFF36F8F 		isb														
 497 0040 BFF34F8F 		dsb														
 498 0044 62B6     		cpsie i													
 499              	
 500              	@ 0 "" 2
 501              		.thumb
 502              		.syntax unified
 503 0046 7B61     		str	r3, [r7, #20]
 504              		.loc 2 205 1
 505 0048 00BF     		nop
 506              	.L20:
 507              	.LBE117:
 508              	.LBE116:
 509              		.loc 1 865 3 discriminator 1
 510 004a FEE7     		b	.L20
 511              	.L19:
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 512              		.loc 1 889 4
 513 004c BB68     		ldr	r3, [r7, #8]
 514 004e 002B     		cmp	r3, #0
 515 0050 1FD0     		beq	.L21
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 516              		.loc 1 891 10
 517 0052 0023     		movs	r3, #0
 518 0054 FB61     		str	r3, [r7, #28]
 519              		.loc 1 891 3
 520 0056 12E0     		b	.L22
ARM GAS  /tmp/ccHYJnM0.s 			page 29


 521              	.L25:
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 522              		.loc 1 893 38
 523 0058 BA68     		ldr	r2, [r7, #8]
 524 005a FB69     		ldr	r3, [r7, #28]
 525 005c 1344     		add	r3, r3, r2
 526 005e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 527              		.loc 1 893 30
 528 0060 3A6B     		ldr	r2, [r7, #48]
 529 0062 FB69     		ldr	r3, [r7, #28]
 530 0064 1344     		add	r3, r3, r2
 531 0066 3433     		adds	r3, r3, #52
 532 0068 0A46     		mov	r2, r1
 533 006a 1A70     		strb	r2, [r3]
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 534              		.loc 1 898 14
 535 006c BA68     		ldr	r2, [r7, #8]
 536 006e FB69     		ldr	r3, [r7, #28]
 537 0070 1344     		add	r3, r3, r2
 538 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 539              		.loc 1 898 6
 540 0074 002B     		cmp	r3, #0
 541 0076 06D0     		beq	.L29
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 542              		.loc 1 891 77 discriminator 2
 543 0078 FB69     		ldr	r3, [r7, #28]
 544 007a 0133     		adds	r3, r3, #1
 545 007c FB61     		str	r3, [r7, #28]
 546              	.L22:
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 547              		.loc 1 891 3 discriminator 1
 548 007e FB69     		ldr	r3, [r7, #28]
 549 0080 0F2B     		cmp	r3, #15
 550 0082 E9D9     		bls	.L25
 551 0084 00E0     		b	.L24
 552              	.L29:
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 553              		.loc 1 900 5
 554 0086 00BF     		nop
 555              	.L24:
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 556              		.loc 1 910 55
ARM GAS  /tmp/ccHYJnM0.s 			page 30


 557 0088 3B6B     		ldr	r3, [r7, #48]
 558 008a 0022     		movs	r2, #0
 559 008c 83F84320 		strb	r2, [r3, #67]
 560 0090 03E0     		b	.L26
 561              	.L21:
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 562              		.loc 1 916 29
 563 0092 3B6B     		ldr	r3, [r7, #48]
 564 0094 0022     		movs	r2, #0
 565 0096 83F83420 		strb	r2, [r3, #52]
 566              	.L26:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 567              		.loc 1 921 4
 568 009a BB6A     		ldr	r3, [r7, #40]
 569 009c 062B     		cmp	r3, #6
 570 009e 01D9     		bls	.L27
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 571              		.loc 1 923 14
 572 00a0 0623     		movs	r3, #6
 573 00a2 BB62     		str	r3, [r7, #40]
 574              	.L27:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 575              		.loc 1 930 23
 576 00a4 3B6B     		ldr	r3, [r7, #48]
 577 00a6 BA6A     		ldr	r2, [r7, #40]
 578 00a8 DA62     		str	r2, [r3, #44]
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 579              		.loc 1 933 28
 580 00aa 3B6B     		ldr	r3, [r7, #48]
 581 00ac BA6A     		ldr	r2, [r7, #40]
 582 00ae 5A64     		str	r2, [r3, #68]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 583              		.loc 1 934 27
 584 00b0 3B6B     		ldr	r3, [r7, #48]
 585 00b2 0022     		movs	r2, #0
 586 00b4 9A64     		str	r2, [r3, #72]
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 31


 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 587              		.loc 1 938 2
 588 00b6 3B6B     		ldr	r3, [r7, #48]
 589 00b8 0433     		adds	r3, r3, #4
 590 00ba 1846     		mov	r0, r3
 591 00bc FFF7FEFF 		bl	vListInitialiseItem
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 592              		.loc 1 939 2
 593 00c0 3B6B     		ldr	r3, [r7, #48]
 594 00c2 1833     		adds	r3, r3, #24
 595 00c4 1846     		mov	r0, r3
 596 00c6 FFF7FEFF 		bl	vListInitialiseItem
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 597              		.loc 1 943 2
 598 00ca 3B6B     		ldr	r3, [r7, #48]
 599 00cc 3A6B     		ldr	r2, [r7, #48]
 600 00ce 1A61     		str	r2, [r3, #16]
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 601              		.loc 1 946 2
 602 00d0 BB6A     		ldr	r3, [r7, #40]
 603 00d2 C3F10702 		rsb	r2, r3, #7
 604 00d6 3B6B     		ldr	r3, [r7, #48]
 605 00d8 9A61     		str	r2, [r3, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 606              		.loc 1 947 2
 607 00da 3B6B     		ldr	r3, [r7, #48]
 608 00dc 3A6B     		ldr	r2, [r7, #48]
 609 00de 5A62     		str	r2, [r3, #36]
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
ARM GAS  /tmp/ccHYJnM0.s 			page 32


 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 610              		.loc 1 989 29
 611 00e0 3B6B     		ldr	r3, [r7, #48]
 612 00e2 0022     		movs	r2, #0
 613 00e4 DA64     		str	r2, [r3, #76]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 614              		.loc 1 990 27
 615 00e6 3B6B     		ldr	r3, [r7, #48]
 616 00e8 0022     		movs	r2, #0
 617 00ea 83F85020 		strb	r2, [r3, #80]
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
ARM GAS  /tmp/ccHYJnM0.s 			page 33


1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 618              		.loc 1 1053 29
 619 00ee 3A68     		ldr	r2, [r7]
 620 00f0 F968     		ldr	r1, [r7, #12]
 621 00f2 B869     		ldr	r0, [r7, #24]
 622 00f4 FFF7FEFF 		bl	pxPortInitialiseStack
 623 00f8 0246     		mov	r2, r0
 624              		.loc 1 1053 27
 625 00fa 3B6B     		ldr	r3, [r7, #48]
 626 00fc 1A60     		str	r2, [r3]
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 627              		.loc 1 1059 4
 628 00fe FB6A     		ldr	r3, [r7, #44]
 629 0100 002B     		cmp	r3, #0
 630 0102 02D0     		beq	.L30
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 631              		.loc 1 1063 18
ARM GAS  /tmp/ccHYJnM0.s 			page 34


 632 0104 FB6A     		ldr	r3, [r7, #44]
 633 0106 3A6B     		ldr	r2, [r7, #48]
 634 0108 1A60     		str	r2, [r3]
 635              	.L30:
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 636              		.loc 1 1069 1
 637 010a 00BF     		nop
 638 010c 2037     		adds	r7, r7, #32
 639              	.LCFI13:
 640              		.cfi_def_cfa_offset 8
 641 010e BD46     		mov	sp, r7
 642              	.LCFI14:
 643              		.cfi_def_cfa_register 13
 644              		@ sp needed
 645 0110 80BD     		pop	{r7, pc}
 646              		.cfi_endproc
 647              	.LFE7:
 649              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 650              		.align	1
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu fpv5-d16
 656              	prvAddNewTaskToReadyList:
 657              	.LFB8:
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 658              		.loc 1 1073 1
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 8
 661              		@ frame_needed = 1, uses_anonymous_args = 0
 662 0000 80B5     		push	{r7, lr}
 663              	.LCFI15:
 664              		.cfi_def_cfa_offset 8
 665              		.cfi_offset 7, -8
 666              		.cfi_offset 14, -4
 667 0002 82B0     		sub	sp, sp, #8
 668              	.LCFI16:
 669              		.cfi_def_cfa_offset 16
 670 0004 00AF     		add	r7, sp, #0
 671              	.LCFI17:
 672              		.cfi_def_cfa_register 7
 673 0006 7860     		str	r0, [r7, #4]
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 674              		.loc 1 1076 2
 675 0008 FFF7FEFF 		bl	vPortEnterCritical
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
ARM GAS  /tmp/ccHYJnM0.s 			page 35


 676              		.loc 1 1078 25
 677 000c 2A4B     		ldr	r3, .L36
 678 000e 1B68     		ldr	r3, [r3]
 679 0010 0133     		adds	r3, r3, #1
 680 0012 294A     		ldr	r2, .L36
 681 0014 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 682              		.loc 1 1079 20
 683 0016 294B     		ldr	r3, .L36+4
 684 0018 1B68     		ldr	r3, [r3]
 685              		.loc 1 1079 5
 686 001a 002B     		cmp	r3, #0
 687 001c 09D1     		bne	.L32
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 688              		.loc 1 1083 17
 689 001e 274A     		ldr	r2, .L36+4
 690 0020 7B68     		ldr	r3, [r7, #4]
 691 0022 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 692              		.loc 1 1085 31
 693 0024 244B     		ldr	r3, .L36
 694 0026 1B68     		ldr	r3, [r3]
 695              		.loc 1 1085 6
 696 0028 012B     		cmp	r3, #1
 697 002a 10D1     		bne	.L33
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 698              		.loc 1 1090 5
 699 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 700 0030 0DE0     		b	.L33
 701              	.L32:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 702              		.loc 1 1102 26
 703 0032 234B     		ldr	r3, .L36+8
 704 0034 1B68     		ldr	r3, [r3]
 705              		.loc 1 1102 6
 706 0036 002B     		cmp	r3, #0
 707 0038 09D1     		bne	.L33
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccHYJnM0.s 			page 36


1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 708              		.loc 1 1104 21
 709 003a 204B     		ldr	r3, .L36+4
 710 003c 1B68     		ldr	r3, [r3]
 711 003e DA6A     		ldr	r2, [r3, #44]
 712              		.loc 1 1104 45
 713 0040 7B68     		ldr	r3, [r7, #4]
 714 0042 DB6A     		ldr	r3, [r3, #44]
 715              		.loc 1 1104 7
 716 0044 9A42     		cmp	r2, r3
 717 0046 02D8     		bhi	.L33
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 718              		.loc 1 1106 19
 719 0048 1C4A     		ldr	r2, .L36+4
 720 004a 7B68     		ldr	r3, [r7, #4]
 721 004c 1360     		str	r3, [r2]
 722              	.L33:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 723              		.loc 1 1119 15
 724 004e 1D4B     		ldr	r3, .L36+12
 725 0050 1B68     		ldr	r3, [r3]
 726 0052 0133     		adds	r3, r3, #1
 727 0054 1B4A     		ldr	r2, .L36+12
 728 0056 1360     		str	r3, [r2]
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 729              		.loc 1 1129 3
 730 0058 7B68     		ldr	r3, [r7, #4]
 731 005a DB6A     		ldr	r3, [r3, #44]
 732 005c 0122     		movs	r2, #1
 733 005e 9A40     		lsls	r2, r2, r3
 734 0060 194B     		ldr	r3, .L36+16
 735 0062 1B68     		ldr	r3, [r3]
 736 0064 1343     		orrs	r3, r3, r2
 737 0066 184A     		ldr	r2, .L36+16
 738 0068 1360     		str	r3, [r2]
ARM GAS  /tmp/ccHYJnM0.s 			page 37


 739 006a 7B68     		ldr	r3, [r7, #4]
 740 006c DA6A     		ldr	r2, [r3, #44]
 741 006e 1346     		mov	r3, r2
 742 0070 9B00     		lsls	r3, r3, #2
 743 0072 1344     		add	r3, r3, r2
 744 0074 9B00     		lsls	r3, r3, #2
 745 0076 154A     		ldr	r2, .L36+20
 746 0078 1A44     		add	r2, r2, r3
 747 007a 7B68     		ldr	r3, [r7, #4]
 748 007c 0433     		adds	r3, r3, #4
 749 007e 1946     		mov	r1, r3
 750 0080 1046     		mov	r0, r2
 751 0082 FFF7FEFF 		bl	vListInsertEnd
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 752              		.loc 1 1133 2
 753 0086 FFF7FEFF 		bl	vPortExitCritical
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 754              		.loc 1 1135 24
 755 008a 0D4B     		ldr	r3, .L36+8
 756 008c 1B68     		ldr	r3, [r3]
 757              		.loc 1 1135 4
 758 008e 002B     		cmp	r3, #0
 759 0090 0ED0     		beq	.L35
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 760              		.loc 1 1139 19
 761 0092 0A4B     		ldr	r3, .L36+4
 762 0094 1B68     		ldr	r3, [r3]
 763 0096 DA6A     		ldr	r2, [r3, #44]
 764              		.loc 1 1139 42
 765 0098 7B68     		ldr	r3, [r7, #4]
 766 009a DB6A     		ldr	r3, [r3, #44]
 767              		.loc 1 1139 5
 768 009c 9A42     		cmp	r2, r3
 769 009e 07D2     		bcs	.L35
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 770              		.loc 1 1141 4
 771 00a0 0B4B     		ldr	r3, .L36+24
 772 00a2 4FF08052 		mov	r2, #268435456
 773 00a6 1A60     		str	r2, [r3]
 774              		.syntax unified
 775              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 776 00a8 BFF34F8F 		dsb
 777              	@ 0 "" 2
 778              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 779 00ac BFF36F8F 		isb
 780              	@ 0 "" 2
 781              		.thumb
 782              		.syntax unified
 783              	.L35:
ARM GAS  /tmp/ccHYJnM0.s 			page 38


1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 784              		.loc 1 1152 1
 785 00b0 00BF     		nop
 786 00b2 0837     		adds	r7, r7, #8
 787              	.LCFI18:
 788              		.cfi_def_cfa_offset 8
 789 00b4 BD46     		mov	sp, r7
 790              	.LCFI19:
 791              		.cfi_def_cfa_register 13
 792              		@ sp needed
 793 00b6 80BD     		pop	{r7, pc}
 794              	.L37:
 795              		.align	2
 796              	.L36:
 797 00b8 00000000 		.word	uxCurrentNumberOfTasks
 798 00bc 00000000 		.word	pxCurrentTCB
 799 00c0 00000000 		.word	xSchedulerRunning
 800 00c4 00000000 		.word	uxTaskNumber
 801 00c8 00000000 		.word	uxTopReadyPriority
 802 00cc 00000000 		.word	pxReadyTasksLists
 803 00d0 04ED00E0 		.word	-536810236
 804              		.cfi_endproc
 805              	.LFE8:
 807              		.section	.text.vTaskDelete,"ax",%progbits
 808              		.align	1
 809              		.global	vTaskDelete
 810              		.syntax unified
 811              		.thumb
 812              		.thumb_func
 813              		.fpu fpv5-d16
 815              	vTaskDelete:
 816              	.LFB9:
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 817              		.loc 1 1158 2
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 16
 820              		@ frame_needed = 1, uses_anonymous_args = 0
 821 0000 80B5     		push	{r7, lr}
 822              	.LCFI20:
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
ARM GAS  /tmp/ccHYJnM0.s 			page 39


 826 0002 84B0     		sub	sp, sp, #16
 827              	.LCFI21:
 828              		.cfi_def_cfa_offset 24
 829 0004 00AF     		add	r7, sp, #0
 830              	.LCFI22:
 831              		.cfi_def_cfa_register 7
 832 0006 7860     		str	r0, [r7, #4]
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 833              		.loc 1 1161 3
 834 0008 FFF7FEFF 		bl	vPortEnterCritical
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 835              		.loc 1 1165 12
 836 000c 7B68     		ldr	r3, [r7, #4]
 837 000e 002B     		cmp	r3, #0
 838 0010 02D1     		bne	.L39
 839              		.loc 1 1165 12 is_stmt 0 discriminator 1
 840 0012 3A4B     		ldr	r3, .L49
 841 0014 1B68     		ldr	r3, [r3]
 842 0016 00E0     		b	.L40
 843              	.L39:
 844              		.loc 1 1165 12 discriminator 2
 845 0018 7B68     		ldr	r3, [r7, #4]
 846              	.L40:
 847              		.loc 1 1165 10 is_stmt 1 discriminator 4
 848 001a FB60     		str	r3, [r7, #12]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 849              		.loc 1 1168 8 discriminator 4
 850 001c FB68     		ldr	r3, [r7, #12]
 851 001e 0433     		adds	r3, r3, #4
 852 0020 1846     		mov	r0, r3
 853 0022 FFF7FEFF 		bl	uxListRemove
 854 0026 0346     		mov	r3, r0
 855              		.loc 1 1168 6 discriminator 4
 856 0028 002B     		cmp	r3, #0
 857 002a 15D1     		bne	.L41
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 858              		.loc 1 1170 5
 859 002c FB68     		ldr	r3, [r7, #12]
 860 002e DA6A     		ldr	r2, [r3, #44]
 861 0030 3349     		ldr	r1, .L49+4
 862 0032 1346     		mov	r3, r2
 863 0034 9B00     		lsls	r3, r3, #2
 864 0036 1344     		add	r3, r3, r2
 865 0038 9B00     		lsls	r3, r3, #2
 866 003a 0B44     		add	r3, r3, r1
 867 003c 1B68     		ldr	r3, [r3]
 868 003e 002B     		cmp	r3, #0
 869 0040 0AD1     		bne	.L41
 870              		.loc 1 1170 5 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccHYJnM0.s 			page 40


 871 0042 FB68     		ldr	r3, [r7, #12]
 872 0044 DB6A     		ldr	r3, [r3, #44]
 873 0046 0122     		movs	r2, #1
 874 0048 02FA03F3 		lsl	r3, r2, r3
 875 004c DA43     		mvns	r2, r3
 876 004e 2D4B     		ldr	r3, .L49+8
 877 0050 1B68     		ldr	r3, [r3]
 878 0052 1340     		ands	r3, r3, r2
 879 0054 2B4A     		ldr	r2, .L49+8
 880 0056 1360     		str	r3, [r2]
 881              	.L41:
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 882              		.loc 1 1178 8 is_stmt 1
 883 0058 FB68     		ldr	r3, [r7, #12]
 884 005a 9B6A     		ldr	r3, [r3, #40]
 885              		.loc 1 1178 6
 886 005c 002B     		cmp	r3, #0
 887 005e 04D0     		beq	.L42
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 888              		.loc 1 1180 14
 889 0060 FB68     		ldr	r3, [r7, #12]
 890 0062 1833     		adds	r3, r3, #24
 891 0064 1846     		mov	r0, r3
 892 0066 FFF7FEFF 		bl	uxListRemove
 893              	.L42:
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 894              		.loc 1 1191 16
 895 006a 274B     		ldr	r3, .L49+12
 896 006c 1B68     		ldr	r3, [r3]
 897 006e 0133     		adds	r3, r3, #1
 898 0070 254A     		ldr	r2, .L49+12
 899 0072 1360     		str	r3, [r2]
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 900              		.loc 1 1193 14
 901 0074 214B     		ldr	r3, .L49
 902 0076 1B68     		ldr	r3, [r3]
 903              		.loc 1 1193 6
 904 0078 FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/ccHYJnM0.s 			page 41


 905 007a 9A42     		cmp	r2, r3
 906 007c 0BD1     		bne	.L43
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 907              		.loc 1 1200 5
 908 007e FB68     		ldr	r3, [r7, #12]
 909 0080 0433     		adds	r3, r3, #4
 910 0082 1946     		mov	r1, r3
 911 0084 2148     		ldr	r0, .L49+16
 912 0086 FFF7FEFF 		bl	vListInsertEnd
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 913              		.loc 1 1205 5
 914 008a 214B     		ldr	r3, .L49+20
 915 008c 1B68     		ldr	r3, [r3]
 916 008e 0133     		adds	r3, r3, #1
 917 0090 1F4A     		ldr	r2, .L49+20
 918 0092 1360     		str	r3, [r2]
 919 0094 09E0     		b	.L44
 920              	.L43:
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 921              		.loc 1 1216 5
 922 0096 1F4B     		ldr	r3, .L49+24
 923 0098 1B68     		ldr	r3, [r3]
 924 009a 013B     		subs	r3, r3, #1
 925 009c 1D4A     		ldr	r2, .L49+24
 926 009e 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 927              		.loc 1 1217 5
 928 00a0 F868     		ldr	r0, [r7, #12]
 929 00a2 FFF7FEFF 		bl	prvDeleteTCB
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 930              		.loc 1 1221 5
 931 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 932              	.L44:
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccHYJnM0.s 			page 42


1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 933              		.loc 1 1226 3
 934 00aa FFF7FEFF 		bl	vPortExitCritical
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 935              		.loc 1 1230 25
 936 00ae 1A4B     		ldr	r3, .L49+28
 937 00b0 1B68     		ldr	r3, [r3]
 938              		.loc 1 1230 5
 939 00b2 002B     		cmp	r3, #0
 940 00b4 1DD0     		beq	.L48
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 941              		.loc 1 1232 14
 942 00b6 114B     		ldr	r3, .L49
 943 00b8 1B68     		ldr	r3, [r3]
 944              		.loc 1 1232 6
 945 00ba FA68     		ldr	r2, [r7, #12]
 946 00bc 9A42     		cmp	r2, r3
 947 00be 18D1     		bne	.L48
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 948              		.loc 1 1234 5
 949 00c0 164B     		ldr	r3, .L49+32
 950 00c2 1B68     		ldr	r3, [r3]
 951 00c4 002B     		cmp	r3, #0
 952 00c6 0CD0     		beq	.L46
 953              	.LBB118:
 954              	.LBB119:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 955              		.loc 2 195 2
 956              		.syntax unified
 957              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 958 00c8 4FF05003 			mov r3, #80												
 959 00cc 72B6     		cpsid i													
 960 00ce 83F31188 		msr basepri, r3											
 961 00d2 BFF36F8F 		isb														
 962 00d6 BFF34F8F 		dsb														
 963 00da 62B6     		cpsie i													
 964              	
 965              	@ 0 "" 2
 966              		.thumb
 967              		.syntax unified
 968 00dc BB60     		str	r3, [r7, #8]
 969              		.loc 2 205 1
 970 00de 00BF     		nop
 971              	.L47:
 972              	.LBE119:
 973              	.LBE118:
 974              		.loc 1 1234 5 discriminator 1
 975 00e0 FEE7     		b	.L47
 976              	.L46:
ARM GAS  /tmp/ccHYJnM0.s 			page 43


1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 977              		.loc 1 1235 5
 978 00e2 0F4B     		ldr	r3, .L49+36
 979 00e4 4FF08052 		mov	r2, #268435456
 980 00e8 1A60     		str	r2, [r3]
 981              		.syntax unified
 982              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 983 00ea BFF34F8F 		dsb
 984              	@ 0 "" 2
 985              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 986 00ee BFF36F8F 		isb
 987              	@ 0 "" 2
 988              		.thumb
 989              		.syntax unified
 990              	.L48:
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 991              		.loc 1 1242 2
 992 00f2 00BF     		nop
 993 00f4 1037     		adds	r7, r7, #16
 994              	.LCFI23:
 995              		.cfi_def_cfa_offset 8
 996 00f6 BD46     		mov	sp, r7
 997              	.LCFI24:
 998              		.cfi_def_cfa_register 13
 999              		@ sp needed
 1000 00f8 80BD     		pop	{r7, pc}
 1001              	.L50:
 1002 00fa 00BF     		.align	2
 1003              	.L49:
 1004 00fc 00000000 		.word	pxCurrentTCB
 1005 0100 00000000 		.word	pxReadyTasksLists
 1006 0104 00000000 		.word	uxTopReadyPriority
 1007 0108 00000000 		.word	uxTaskNumber
 1008 010c 00000000 		.word	xTasksWaitingTermination
 1009 0110 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1010 0114 00000000 		.word	uxCurrentNumberOfTasks
 1011 0118 00000000 		.word	xSchedulerRunning
 1012 011c 00000000 		.word	uxSchedulerSuspended
 1013 0120 04ED00E0 		.word	-536810236
 1014              		.cfi_endproc
 1015              	.LFE9:
 1017              		.section	.text.vTaskDelay,"ax",%progbits
 1018              		.align	1
 1019              		.global	vTaskDelay
 1020              		.syntax unified
 1021              		.thumb
 1022              		.thumb_func
 1023              		.fpu fpv5-d16
 1025              	vTaskDelay:
 1026              	.LFB10:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 44


1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 45


1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1027              		.loc 1 1334 2
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 16
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031 0000 80B5     		push	{r7, lr}
 1032              	.LCFI25:
 1033              		.cfi_def_cfa_offset 8
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 0002 84B0     		sub	sp, sp, #16
 1037              	.LCFI26:
 1038              		.cfi_def_cfa_offset 24
 1039 0004 00AF     		add	r7, sp, #0
 1040              	.LCFI27:
 1041              		.cfi_def_cfa_register 7
 1042 0006 7860     		str	r0, [r7, #4]
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1043              		.loc 1 1335 13
 1044 0008 0023     		movs	r3, #0
 1045 000a FB60     		str	r3, [r7, #12]
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
ARM GAS  /tmp/ccHYJnM0.s 			page 46


 1046              		.loc 1 1338 5
 1047 000c 7B68     		ldr	r3, [r7, #4]
 1048 000e 002B     		cmp	r3, #0
 1049 0010 19D0     		beq	.L52
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1050              		.loc 1 1340 4
 1051 0012 144B     		ldr	r3, .L57
 1052 0014 1B68     		ldr	r3, [r3]
 1053 0016 002B     		cmp	r3, #0
 1054 0018 0CD0     		beq	.L53
 1055              	.LBB120:
 1056              	.LBB121:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1057              		.loc 2 195 2
 1058              		.syntax unified
 1059              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1060 001a 4FF05003 			mov r3, #80												
 1061 001e 72B6     		cpsid i													
 1062 0020 83F31188 		msr basepri, r3											
 1063 0024 BFF36F8F 		isb														
 1064 0028 BFF34F8F 		dsb														
 1065 002c 62B6     		cpsie i													
 1066              	
 1067              	@ 0 "" 2
 1068              		.thumb
 1069              		.syntax unified
 1070 002e BB60     		str	r3, [r7, #8]
 1071              		.loc 2 205 1
 1072 0030 00BF     		nop
 1073              	.L54:
 1074              	.LBE121:
 1075              	.LBE120:
 1076              		.loc 1 1340 4 discriminator 1
 1077 0032 FEE7     		b	.L54
 1078              	.L53:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1079              		.loc 1 1341 4
 1080 0034 FFF7FEFF 		bl	vTaskSuspendAll
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1081              		.loc 1 1352 5
 1082 0038 0021     		movs	r1, #0
 1083 003a 7868     		ldr	r0, [r7, #4]
 1084 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1085              		.loc 1 1354 22
ARM GAS  /tmp/ccHYJnM0.s 			page 47


 1086 0040 FFF7FEFF 		bl	xTaskResumeAll
 1087 0044 F860     		str	r0, [r7, #12]
 1088              	.L52:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1089              		.loc 1 1363 5
 1090 0046 FB68     		ldr	r3, [r7, #12]
 1091 0048 002B     		cmp	r3, #0
 1092 004a 07D1     		bne	.L56
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1093              		.loc 1 1365 4
 1094 004c 064B     		ldr	r3, .L57+4
 1095 004e 4FF08052 		mov	r2, #268435456
 1096 0052 1A60     		str	r2, [r3]
 1097              		.syntax unified
 1098              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1099 0054 BFF34F8F 		dsb
 1100              	@ 0 "" 2
 1101              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1102 0058 BFF36F8F 		isb
 1103              	@ 0 "" 2
 1104              		.thumb
 1105              		.syntax unified
 1106              	.L56:
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1107              		.loc 1 1371 2
 1108 005c 00BF     		nop
 1109 005e 1037     		adds	r7, r7, #16
 1110              	.LCFI28:
 1111              		.cfi_def_cfa_offset 8
 1112 0060 BD46     		mov	sp, r7
 1113              	.LCFI29:
 1114              		.cfi_def_cfa_register 13
 1115              		@ sp needed
 1116 0062 80BD     		pop	{r7, pc}
 1117              	.L58:
 1118              		.align	2
 1119              	.L57:
 1120 0064 00000000 		.word	uxSchedulerSuspended
 1121 0068 04ED00E0 		.word	-536810236
 1122              		.cfi_endproc
 1123              	.LFE10:
 1125              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1126              		.align	1
ARM GAS  /tmp/ccHYJnM0.s 			page 48


 1127              		.global	uxTaskPriorityGet
 1128              		.syntax unified
 1129              		.thumb
 1130              		.thumb_func
 1131              		.fpu fpv5-d16
 1133              	uxTaskPriorityGet:
 1134              	.LFB11:
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
ARM GAS  /tmp/ccHYJnM0.s 			page 49


1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1135              		.loc 1 1471 2
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 16
 1138              		@ frame_needed = 1, uses_anonymous_args = 0
 1139 0000 80B5     		push	{r7, lr}
 1140              	.LCFI30:
 1141              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccHYJnM0.s 			page 50


 1142              		.cfi_offset 7, -8
 1143              		.cfi_offset 14, -4
 1144 0002 84B0     		sub	sp, sp, #16
 1145              	.LCFI31:
 1146              		.cfi_def_cfa_offset 24
 1147 0004 00AF     		add	r7, sp, #0
 1148              	.LCFI32:
 1149              		.cfi_def_cfa_register 7
 1150 0006 7860     		str	r0, [r7, #4]
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1151              		.loc 1 1475 3
 1152 0008 FFF7FEFF 		bl	vPortEnterCritical
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1153              		.loc 1 1479 12
 1154 000c 7B68     		ldr	r3, [r7, #4]
 1155 000e 002B     		cmp	r3, #0
 1156 0010 02D1     		bne	.L60
 1157              		.loc 1 1479 12 is_stmt 0 discriminator 1
 1158 0012 074B     		ldr	r3, .L63
 1159 0014 1B68     		ldr	r3, [r3]
 1160 0016 00E0     		b	.L61
 1161              	.L60:
 1162              		.loc 1 1479 12 discriminator 2
 1163 0018 7B68     		ldr	r3, [r7, #4]
 1164              	.L61:
 1165              		.loc 1 1479 10 is_stmt 1 discriminator 4
 1166 001a FB60     		str	r3, [r7, #12]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1167              		.loc 1 1480 13 discriminator 4
 1168 001c FB68     		ldr	r3, [r7, #12]
 1169 001e DB6A     		ldr	r3, [r3, #44]
 1170 0020 BB60     		str	r3, [r7, #8]
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1171              		.loc 1 1482 3 discriminator 4
 1172 0022 FFF7FEFF 		bl	vPortExitCritical
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1173              		.loc 1 1484 10 discriminator 4
 1174 0026 BB68     		ldr	r3, [r7, #8]
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1175              		.loc 1 1485 2 discriminator 4
 1176 0028 1846     		mov	r0, r3
 1177 002a 1037     		adds	r7, r7, #16
 1178              	.LCFI33:
 1179              		.cfi_def_cfa_offset 8
 1180 002c BD46     		mov	sp, r7
 1181              	.LCFI34:
 1182              		.cfi_def_cfa_register 13
 1183              		@ sp needed
 1184 002e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccHYJnM0.s 			page 51


 1185              	.L64:
 1186              		.align	2
 1187              	.L63:
 1188 0030 00000000 		.word	pxCurrentTCB
 1189              		.cfi_endproc
 1190              	.LFE11:
 1192              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1193              		.align	1
 1194              		.global	uxTaskPriorityGetFromISR
 1195              		.syntax unified
 1196              		.thumb
 1197              		.thumb_func
 1198              		.fpu fpv5-d16
 1200              	uxTaskPriorityGetFromISR:
 1201              	.LFB12:
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1202              		.loc 1 1493 2
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 32
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206 0000 80B5     		push	{r7, lr}
 1207              	.LCFI35:
 1208              		.cfi_def_cfa_offset 8
 1209              		.cfi_offset 7, -8
 1210              		.cfi_offset 14, -4
 1211 0002 88B0     		sub	sp, sp, #32
 1212              	.LCFI36:
 1213              		.cfi_def_cfa_offset 40
 1214 0004 00AF     		add	r7, sp, #0
 1215              	.LCFI37:
 1216              		.cfi_def_cfa_register 7
 1217 0006 7860     		str	r0, [r7, #4]
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
ARM GAS  /tmp/ccHYJnM0.s 			page 52


1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1218              		.loc 1 1513 3
 1219 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1220              	.LBB122:
 1221              	.LBB123:
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1222              		.loc 2 213 2
 1223              		.syntax unified
 1224              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1225 000c EFF31182 			mrs r2, basepri											
 1226 0010 4FF05003 		mov r3, #80												
 1227 0014 72B6     		cpsid i													
 1228 0016 83F31188 		msr basepri, r3											
 1229 001a BFF36F8F 		isb														
 1230 001e BFF34F8F 		dsb														
 1231 0022 62B6     		cpsie i													
 1232              	
 1233              	@ 0 "" 2
 1234              		.thumb
 1235              		.syntax unified
 1236 0024 3A61     		str	r2, [r7, #16]
 1237 0026 FB60     		str	r3, [r7, #12]
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 1238              		.loc 2 227 9
 1239 0028 3B69     		ldr	r3, [r7, #16]
 1240              	.LBE123:
 1241              	.LBE122:
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1242              		.loc 1 1515 27
 1243 002a FB61     		str	r3, [r7, #28]
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1244              		.loc 1 1519 12
ARM GAS  /tmp/ccHYJnM0.s 			page 53


 1245 002c 7B68     		ldr	r3, [r7, #4]
 1246 002e 002B     		cmp	r3, #0
 1247 0030 02D1     		bne	.L67
 1248              		.loc 1 1519 12 is_stmt 0 discriminator 1
 1249 0032 094B     		ldr	r3, .L70
 1250 0034 1B68     		ldr	r3, [r3]
 1251 0036 00E0     		b	.L68
 1252              	.L67:
 1253              		.loc 1 1519 12 discriminator 2
 1254 0038 7B68     		ldr	r3, [r7, #4]
 1255              	.L68:
 1256              		.loc 1 1519 10 is_stmt 1 discriminator 4
 1257 003a BB61     		str	r3, [r7, #24]
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1258              		.loc 1 1520 13 discriminator 4
 1259 003c BB69     		ldr	r3, [r7, #24]
 1260 003e DB6A     		ldr	r3, [r3, #44]
 1261 0040 7B61     		str	r3, [r7, #20]
 1262 0042 FB69     		ldr	r3, [r7, #28]
 1263 0044 BB60     		str	r3, [r7, #8]
 1264              	.LBB124:
 1265              	.LBB125:
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1266              		.loc 2 233 2 discriminator 4
 1267 0046 BB68     		ldr	r3, [r7, #8]
 1268              		.syntax unified
 1269              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1270 0048 83F31188 			msr basepri, r3	
 1271              	@ 0 "" 2
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 1272              		.loc 2 237 1 discriminator 4
 1273              		.thumb
 1274              		.syntax unified
 1275 004c 00BF     		nop
 1276              	.LBE125:
 1277              	.LBE124:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1278              		.loc 1 1524 10 discriminator 4
 1279 004e 7B69     		ldr	r3, [r7, #20]
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1280              		.loc 1 1525 2 discriminator 4
 1281 0050 1846     		mov	r0, r3
 1282 0052 2037     		adds	r7, r7, #32
 1283              	.LCFI38:
 1284              		.cfi_def_cfa_offset 8
 1285 0054 BD46     		mov	sp, r7
ARM GAS  /tmp/ccHYJnM0.s 			page 54


 1286              	.LCFI39:
 1287              		.cfi_def_cfa_register 13
 1288              		@ sp needed
 1289 0056 80BD     		pop	{r7, pc}
 1290              	.L71:
 1291              		.align	2
 1292              	.L70:
 1293 0058 00000000 		.word	pxCurrentTCB
 1294              		.cfi_endproc
 1295              	.LFE12:
 1297              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1298              		.align	1
 1299              		.global	vTaskPrioritySet
 1300              		.syntax unified
 1301              		.thumb
 1302              		.thumb_func
 1303              		.fpu fpv5-d16
 1305              	vTaskPrioritySet:
 1306              	.LFB13:
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1307              		.loc 1 1533 2
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 32
 1310              		@ frame_needed = 1, uses_anonymous_args = 0
 1311 0000 80B5     		push	{r7, lr}
 1312              	.LCFI40:
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 88B0     		sub	sp, sp, #32
 1317              	.LCFI41:
 1318              		.cfi_def_cfa_offset 40
 1319 0004 00AF     		add	r7, sp, #0
 1320              	.LCFI42:
 1321              		.cfi_def_cfa_register 7
 1322 0006 7860     		str	r0, [r7, #4]
 1323 0008 3960     		str	r1, [r7]
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1324              		.loc 1 1536 13
 1325 000a 0023     		movs	r3, #0
 1326 000c FB61     		str	r3, [r7, #28]
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1327              		.loc 1 1538 3
 1328 000e 3B68     		ldr	r3, [r7]
 1329 0010 062B     		cmp	r3, #6
 1330 0012 0CD9     		bls	.L73
 1331              	.LBB126:
ARM GAS  /tmp/ccHYJnM0.s 			page 55


 1332              	.LBB127:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1333              		.loc 2 195 2
 1334              		.syntax unified
 1335              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1336 0014 4FF05003 			mov r3, #80												
 1337 0018 72B6     		cpsid i													
 1338 001a 83F31188 		msr basepri, r3											
 1339 001e BFF36F8F 		isb														
 1340 0022 BFF34F8F 		dsb														
 1341 0026 62B6     		cpsie i													
 1342              	
 1343              	@ 0 "" 2
 1344              		.thumb
 1345              		.syntax unified
 1346 0028 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1347              		.loc 2 205 1
 1348 002a 00BF     		nop
 1349              	.L74:
 1350              	.LBE127:
 1351              	.LBE126:
 1352              		.loc 1 1538 3 discriminator 1
 1353 002c FEE7     		b	.L74
 1354              	.L73:
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1355              		.loc 1 1541 5
 1356 002e 3B68     		ldr	r3, [r7]
 1357 0030 062B     		cmp	r3, #6
 1358 0032 01D9     		bls	.L75
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1359              		.loc 1 1543 18
 1360 0034 0623     		movs	r3, #6
 1361 0036 3B60     		str	r3, [r7]
 1362              	.L75:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1363              		.loc 1 1550 3
 1364 0038 FFF7FEFF 		bl	vPortEnterCritical
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1365              		.loc 1 1554 12
 1366 003c 7B68     		ldr	r3, [r7, #4]
 1367 003e 002B     		cmp	r3, #0
 1368 0040 02D1     		bne	.L76
 1369              		.loc 1 1554 12 is_stmt 0 discriminator 1
 1370 0042 414B     		ldr	r3, .L85
ARM GAS  /tmp/ccHYJnM0.s 			page 56


 1371 0044 1B68     		ldr	r3, [r3]
 1372 0046 00E0     		b	.L77
 1373              	.L76:
 1374              		.loc 1 1554 12 discriminator 2
 1375 0048 7B68     		ldr	r3, [r7, #4]
 1376              	.L77:
 1377              		.loc 1 1554 10 is_stmt 1 discriminator 4
 1378 004a BB61     		str	r3, [r7, #24]
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1379              		.loc 1 1560 27 discriminator 4
 1380 004c BB69     		ldr	r3, [r7, #24]
 1381 004e 5B6C     		ldr	r3, [r3, #68]
 1382 0050 7B61     		str	r3, [r7, #20]
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1383              		.loc 1 1568 6 discriminator 4
 1384 0052 7A69     		ldr	r2, [r7, #20]
 1385 0054 3B68     		ldr	r3, [r7]
 1386 0056 9A42     		cmp	r2, r3
 1387 0058 6FD0     		beq	.L78
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1388              		.loc 1 1572 7
 1389 005a 3A68     		ldr	r2, [r7]
 1390 005c 7B69     		ldr	r3, [r7, #20]
 1391 005e 9A42     		cmp	r2, r3
 1392 0060 0DD9     		bls	.L79
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1393              		.loc 1 1574 16
 1394 0062 394B     		ldr	r3, .L85
 1395 0064 1B68     		ldr	r3, [r3]
 1396              		.loc 1 1574 8
 1397 0066 BA69     		ldr	r2, [r7, #24]
 1398 0068 9A42     		cmp	r2, r3
 1399 006a 0FD0     		beq	.L80
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1400              		.loc 1 1579 40
 1401 006c 364B     		ldr	r3, .L85
 1402 006e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccHYJnM0.s 			page 57


 1403 0070 DB6A     		ldr	r3, [r3, #44]
 1404              		.loc 1 1579 9
 1405 0072 3A68     		ldr	r2, [r7]
 1406 0074 9A42     		cmp	r2, r3
 1407 0076 09D3     		bcc	.L80
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1408              		.loc 1 1581 23
 1409 0078 0123     		movs	r3, #1
 1410 007a FB61     		str	r3, [r7, #28]
 1411 007c 06E0     		b	.L80
 1412              	.L79:
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1413              		.loc 1 1595 20
 1414 007e 324B     		ldr	r3, .L85
 1415 0080 1B68     		ldr	r3, [r3]
 1416              		.loc 1 1595 12
 1417 0082 BA69     		ldr	r2, [r7, #24]
 1418 0084 9A42     		cmp	r2, r3
 1419 0086 01D1     		bne	.L80
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1420              		.loc 1 1600 21
 1421 0088 0123     		movs	r3, #1
 1422 008a FB61     		str	r3, [r7, #28]
 1423              	.L80:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1424              		.loc 1 1612 27
 1425 008c BB69     		ldr	r3, [r7, #24]
 1426 008e DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccHYJnM0.s 			page 58


 1427 0090 3B61     		str	r3, [r7, #16]
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1428              		.loc 1 1618 15
 1429 0092 BB69     		ldr	r3, [r7, #24]
 1430 0094 5A6C     		ldr	r2, [r3, #68]
 1431              		.loc 1 1618 40
 1432 0096 BB69     		ldr	r3, [r7, #24]
 1433 0098 DB6A     		ldr	r3, [r3, #44]
 1434              		.loc 1 1618 8
 1435 009a 9A42     		cmp	r2, r3
 1436 009c 02D1     		bne	.L81
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1437              		.loc 1 1620 25
 1438 009e BB69     		ldr	r3, [r7, #24]
 1439 00a0 3A68     		ldr	r2, [r7]
 1440 00a2 DA62     		str	r2, [r3, #44]
 1441              	.L81:
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1442              		.loc 1 1628 28
 1443 00a4 BB69     		ldr	r3, [r7, #24]
 1444 00a6 3A68     		ldr	r2, [r7]
 1445 00a8 5A64     		str	r2, [r3, #68]
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1446              		.loc 1 1638 11
 1447 00aa BB69     		ldr	r3, [r7, #24]
 1448 00ac 9B69     		ldr	r3, [r3, #24]
 1449              		.loc 1 1638 7
 1450 00ae 002B     		cmp	r3, #0
 1451 00b0 04DB     		blt	.L82
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1452              		.loc 1 1640 6
 1453 00b2 3B68     		ldr	r3, [r7]
 1454 00b4 C3F10702 		rsb	r2, r3, #7
 1455 00b8 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccHYJnM0.s 			page 59


 1456 00ba 9A61     		str	r2, [r3, #24]
 1457              	.L82:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1458              		.loc 1 1651 9
 1459 00bc BB69     		ldr	r3, [r7, #24]
 1460 00be 5969     		ldr	r1, [r3, #20]
 1461 00c0 3A69     		ldr	r2, [r7, #16]
 1462 00c2 1346     		mov	r3, r2
 1463 00c4 9B00     		lsls	r3, r3, #2
 1464 00c6 1344     		add	r3, r3, r2
 1465 00c8 9B00     		lsls	r3, r3, #2
 1466 00ca 204A     		ldr	r2, .L85+4
 1467 00cc 1344     		add	r3, r3, r2
 1468              		.loc 1 1651 7
 1469 00ce 9942     		cmp	r1, r3
 1470 00d0 28D1     		bne	.L83
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1471              		.loc 1 1656 10
 1472 00d2 BB69     		ldr	r3, [r7, #24]
 1473 00d4 0433     		adds	r3, r3, #4
 1474 00d6 1846     		mov	r0, r3
 1475 00d8 FFF7FEFF 		bl	uxListRemove
 1476 00dc 0346     		mov	r3, r0
 1477              		.loc 1 1656 8
 1478 00de 002B     		cmp	r3, #0
 1479 00e0 09D1     		bne	.L84
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1480              		.loc 1 1661 7
 1481 00e2 0122     		movs	r2, #1
 1482 00e4 3B69     		ldr	r3, [r7, #16]
 1483 00e6 02FA03F3 		lsl	r3, r2, r3
 1484 00ea DA43     		mvns	r2, r3
 1485 00ec 184B     		ldr	r3, .L85+8
 1486 00ee 1B68     		ldr	r3, [r3]
 1487 00f0 1340     		ands	r3, r3, r2
 1488 00f2 174A     		ldr	r2, .L85+8
 1489 00f4 1360     		str	r3, [r2]
 1490              	.L84:
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccHYJnM0.s 			page 60


1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1491              		.loc 1 1667 6
 1492 00f6 BB69     		ldr	r3, [r7, #24]
 1493 00f8 DB6A     		ldr	r3, [r3, #44]
 1494 00fa 0122     		movs	r2, #1
 1495 00fc 9A40     		lsls	r2, r2, r3
 1496 00fe 144B     		ldr	r3, .L85+8
 1497 0100 1B68     		ldr	r3, [r3]
 1498 0102 1343     		orrs	r3, r3, r2
 1499 0104 124A     		ldr	r2, .L85+8
 1500 0106 1360     		str	r3, [r2]
 1501 0108 BB69     		ldr	r3, [r7, #24]
 1502 010a DA6A     		ldr	r2, [r3, #44]
 1503 010c 1346     		mov	r3, r2
 1504 010e 9B00     		lsls	r3, r3, #2
 1505 0110 1344     		add	r3, r3, r2
 1506 0112 9B00     		lsls	r3, r3, #2
 1507 0114 0D4A     		ldr	r2, .L85+4
 1508 0116 1A44     		add	r2, r2, r3
 1509 0118 BB69     		ldr	r3, [r7, #24]
 1510 011a 0433     		adds	r3, r3, #4
 1511 011c 1946     		mov	r1, r3
 1512 011e 1046     		mov	r0, r2
 1513 0120 FFF7FEFF 		bl	vListInsertEnd
 1514              	.L83:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1515              		.loc 1 1674 7
 1516 0124 FB69     		ldr	r3, [r7, #28]
 1517 0126 002B     		cmp	r3, #0
 1518 0128 07D0     		beq	.L78
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1519              		.loc 1 1676 6
 1520 012a 0A4B     		ldr	r3, .L85+12
 1521 012c 4FF08052 		mov	r2, #268435456
 1522 0130 1A60     		str	r2, [r3]
 1523              		.syntax unified
 1524              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1525 0132 BFF34F8F 		dsb
 1526              	@ 0 "" 2
 1527              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1528 0136 BFF36F8F 		isb
 1529              	@ 0 "" 2
 1530              		.thumb
 1531              		.syntax unified
 1532              	.L78:
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccHYJnM0.s 			page 61


1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1533              		.loc 1 1688 3
 1534 013a FFF7FEFF 		bl	vPortExitCritical
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1535              		.loc 1 1689 2
 1536 013e 00BF     		nop
 1537 0140 2037     		adds	r7, r7, #32
 1538              	.LCFI43:
 1539              		.cfi_def_cfa_offset 8
 1540 0142 BD46     		mov	sp, r7
 1541              	.LCFI44:
 1542              		.cfi_def_cfa_register 13
 1543              		@ sp needed
 1544 0144 80BD     		pop	{r7, pc}
 1545              	.L86:
 1546 0146 00BF     		.align	2
 1547              	.L85:
 1548 0148 00000000 		.word	pxCurrentTCB
 1549 014c 00000000 		.word	pxReadyTasksLists
 1550 0150 00000000 		.word	uxTopReadyPriority
 1551 0154 04ED00E0 		.word	-536810236
 1552              		.cfi_endproc
 1553              	.LFE13:
 1555              		.section	.text.vTaskSuspend,"ax",%progbits
 1556              		.align	1
 1557              		.global	vTaskSuspend
 1558              		.syntax unified
 1559              		.thumb
 1560              		.thumb_func
 1561              		.fpu fpv5-d16
 1563              	vTaskSuspend:
 1564              	.LFB14:
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1565              		.loc 1 1697 2
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 16
 1568              		@ frame_needed = 1, uses_anonymous_args = 0
 1569 0000 80B5     		push	{r7, lr}
 1570              	.LCFI45:
 1571              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccHYJnM0.s 			page 62


 1572              		.cfi_offset 7, -8
 1573              		.cfi_offset 14, -4
 1574 0002 84B0     		sub	sp, sp, #16
 1575              	.LCFI46:
 1576              		.cfi_def_cfa_offset 24
 1577 0004 00AF     		add	r7, sp, #0
 1578              	.LCFI47:
 1579              		.cfi_def_cfa_register 7
 1580 0006 7860     		str	r0, [r7, #4]
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1581              		.loc 1 1700 3
 1582 0008 FFF7FEFF 		bl	vPortEnterCritical
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1583              		.loc 1 1704 12
 1584 000c 7B68     		ldr	r3, [r7, #4]
 1585 000e 002B     		cmp	r3, #0
 1586 0010 02D1     		bne	.L88
 1587              		.loc 1 1704 12 is_stmt 0 discriminator 1
 1588 0012 3D4B     		ldr	r3, .L100
 1589 0014 1B68     		ldr	r3, [r3]
 1590 0016 00E0     		b	.L89
 1591              	.L88:
 1592              		.loc 1 1704 12 discriminator 2
 1593 0018 7B68     		ldr	r3, [r7, #4]
 1594              	.L89:
 1595              		.loc 1 1704 10 is_stmt 1 discriminator 4
 1596 001a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1597              		.loc 1 1710 8 discriminator 4
 1598 001c FB68     		ldr	r3, [r7, #12]
 1599 001e 0433     		adds	r3, r3, #4
 1600 0020 1846     		mov	r0, r3
 1601 0022 FFF7FEFF 		bl	uxListRemove
 1602 0026 0346     		mov	r3, r0
 1603              		.loc 1 1710 6 discriminator 4
 1604 0028 002B     		cmp	r3, #0
 1605 002a 15D1     		bne	.L90
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1606              		.loc 1 1712 5
 1607 002c FB68     		ldr	r3, [r7, #12]
 1608 002e DA6A     		ldr	r2, [r3, #44]
 1609 0030 3649     		ldr	r1, .L100+4
 1610 0032 1346     		mov	r3, r2
 1611 0034 9B00     		lsls	r3, r3, #2
 1612 0036 1344     		add	r3, r3, r2
 1613 0038 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccHYJnM0.s 			page 63


 1614 003a 0B44     		add	r3, r3, r1
 1615 003c 1B68     		ldr	r3, [r3]
 1616 003e 002B     		cmp	r3, #0
 1617 0040 0AD1     		bne	.L90
 1618              		.loc 1 1712 5 is_stmt 0 discriminator 1
 1619 0042 FB68     		ldr	r3, [r7, #12]
 1620 0044 DB6A     		ldr	r3, [r3, #44]
 1621 0046 0122     		movs	r2, #1
 1622 0048 02FA03F3 		lsl	r3, r2, r3
 1623 004c DA43     		mvns	r2, r3
 1624 004e 304B     		ldr	r3, .L100+8
 1625 0050 1B68     		ldr	r3, [r3]
 1626 0052 1340     		ands	r3, r3, r2
 1627 0054 2E4A     		ldr	r2, .L100+8
 1628 0056 1360     		str	r3, [r2]
 1629              	.L90:
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1630              		.loc 1 1720 8 is_stmt 1
 1631 0058 FB68     		ldr	r3, [r7, #12]
 1632 005a 9B6A     		ldr	r3, [r3, #40]
 1633              		.loc 1 1720 6
 1634 005c 002B     		cmp	r3, #0
 1635 005e 04D0     		beq	.L91
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1636              		.loc 1 1722 14
 1637 0060 FB68     		ldr	r3, [r7, #12]
 1638 0062 1833     		adds	r3, r3, #24
 1639 0064 1846     		mov	r0, r3
 1640 0066 FFF7FEFF 		bl	uxListRemove
 1641              	.L91:
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1642              		.loc 1 1729 4
 1643 006a FB68     		ldr	r3, [r7, #12]
 1644 006c 0433     		adds	r3, r3, #4
 1645 006e 1946     		mov	r1, r3
 1646 0070 2848     		ldr	r0, .L100+12
 1647 0072 FFF7FEFF 		bl	vListInsertEnd
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1648              		.loc 1 1733 14
 1649 0076 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccHYJnM0.s 			page 64


 1650 0078 93F85030 		ldrb	r3, [r3, #80]
 1651 007c DBB2     		uxtb	r3, r3
 1652              		.loc 1 1733 7
 1653 007e 012B     		cmp	r3, #1
 1654 0080 03D1     		bne	.L92
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1655              		.loc 1 1737 27
 1656 0082 FB68     		ldr	r3, [r7, #12]
 1657 0084 0022     		movs	r2, #0
 1658 0086 83F85020 		strb	r2, [r3, #80]
 1659              	.L92:
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1660              		.loc 1 1742 3
 1661 008a FFF7FEFF 		bl	vPortExitCritical
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1662              		.loc 1 1744 25
 1663 008e 224B     		ldr	r3, .L100+16
 1664 0090 1B68     		ldr	r3, [r3]
 1665              		.loc 1 1744 5
 1666 0092 002B     		cmp	r3, #0
 1667 0094 05D0     		beq	.L93
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1668              		.loc 1 1748 4
 1669 0096 FFF7FEFF 		bl	vPortEnterCritical
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1670              		.loc 1 1750 5
 1671 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1672              		.loc 1 1752 4
 1673 009e FFF7FEFF 		bl	vPortExitCritical
 1674              	.L93:
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1675              		.loc 1 1759 13
 1676 00a2 194B     		ldr	r3, .L100
 1677 00a4 1B68     		ldr	r3, [r3]
 1678              		.loc 1 1759 5
 1679 00a6 FA68     		ldr	r2, [r7, #12]
 1680 00a8 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccHYJnM0.s 			page 65


 1681 00aa 29D1     		bne	.L99
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1682              		.loc 1 1761 26
 1683 00ac 1A4B     		ldr	r3, .L100+16
 1684 00ae 1B68     		ldr	r3, [r3]
 1685              		.loc 1 1761 6
 1686 00b0 002B     		cmp	r3, #0
 1687 00b2 19D0     		beq	.L95
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1688              		.loc 1 1764 5
 1689 00b4 194B     		ldr	r3, .L100+20
 1690 00b6 1B68     		ldr	r3, [r3]
 1691 00b8 002B     		cmp	r3, #0
 1692 00ba 0CD0     		beq	.L96
 1693              	.LBB128:
 1694              	.LBB129:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1695              		.loc 2 195 2
 1696              		.syntax unified
 1697              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1698 00bc 4FF05003 			mov r3, #80												
 1699 00c0 72B6     		cpsid i													
 1700 00c2 83F31188 		msr basepri, r3											
 1701 00c6 BFF36F8F 		isb														
 1702 00ca BFF34F8F 		dsb														
 1703 00ce 62B6     		cpsie i													
 1704              	
 1705              	@ 0 "" 2
 1706              		.thumb
 1707              		.syntax unified
 1708 00d0 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1709              		.loc 2 205 1
 1710 00d2 00BF     		nop
 1711              	.L97:
 1712              	.LBE129:
 1713              	.LBE128:
 1714              		.loc 1 1764 5 discriminator 1
 1715 00d4 FEE7     		b	.L97
 1716              	.L96:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1717              		.loc 1 1765 5
 1718 00d6 124B     		ldr	r3, .L100+24
 1719 00d8 4FF08052 		mov	r2, #268435456
 1720 00dc 1A60     		str	r2, [r3]
 1721              		.syntax unified
 1722              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1723 00de BFF34F8F 		dsb
 1724              	@ 0 "" 2
 1725              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1726 00e2 BFF36F8F 		isb
 1727              	@ 0 "" 2
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccHYJnM0.s 			page 66


1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1728              		.loc 1 1790 2
 1729              		.thumb
 1730              		.syntax unified
 1731 00e6 0BE0     		b	.L99
 1732              	.L95:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1733              		.loc 1 1772 9
 1734 00e8 0A4B     		ldr	r3, .L100+12
 1735 00ea 1A68     		ldr	r2, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1736              		.loc 1 1772 56
 1737 00ec 0D4B     		ldr	r3, .L100+28
 1738 00ee 1B68     		ldr	r3, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1739              		.loc 1 1772 7
 1740 00f0 9A42     		cmp	r2, r3
 1741 00f2 03D1     		bne	.L98
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1742              		.loc 1 1778 19
 1743 00f4 044B     		ldr	r3, .L100
 1744 00f6 0022     		movs	r2, #0
 1745 00f8 1A60     		str	r2, [r3]
 1746              		.loc 1 1790 2
 1747 00fa 01E0     		b	.L99
 1748              	.L98:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1749              		.loc 1 1782 6
 1750 00fc FFF7FEFF 		bl	vTaskSwitchContext
 1751              	.L99:
 1752              		.loc 1 1790 2
 1753 0100 00BF     		nop
 1754 0102 1037     		adds	r7, r7, #16
 1755              	.LCFI48:
 1756              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccHYJnM0.s 			page 67


 1757 0104 BD46     		mov	sp, r7
 1758              	.LCFI49:
 1759              		.cfi_def_cfa_register 13
 1760              		@ sp needed
 1761 0106 80BD     		pop	{r7, pc}
 1762              	.L101:
 1763              		.align	2
 1764              	.L100:
 1765 0108 00000000 		.word	pxCurrentTCB
 1766 010c 00000000 		.word	pxReadyTasksLists
 1767 0110 00000000 		.word	uxTopReadyPriority
 1768 0114 00000000 		.word	xSuspendedTaskList
 1769 0118 00000000 		.word	xSchedulerRunning
 1770 011c 00000000 		.word	uxSchedulerSuspended
 1771 0120 04ED00E0 		.word	-536810236
 1772 0124 00000000 		.word	uxCurrentNumberOfTasks
 1773              		.cfi_endproc
 1774              	.LFE14:
 1776              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1777              		.align	1
 1778              		.syntax unified
 1779              		.thumb
 1780              		.thumb_func
 1781              		.fpu fpv5-d16
 1783              	prvTaskIsTaskSuspended:
 1784              	.LFB15:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1785              		.loc 1 1798 2
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 24
 1788              		@ frame_needed = 1, uses_anonymous_args = 0
 1789              		@ link register save eliminated.
 1790 0000 80B4     		push	{r7}
 1791              	.LCFI50:
 1792              		.cfi_def_cfa_offset 4
 1793              		.cfi_offset 7, -4
 1794 0002 87B0     		sub	sp, sp, #28
 1795              	.LCFI51:
 1796              		.cfi_def_cfa_offset 32
 1797 0004 00AF     		add	r7, sp, #0
 1798              	.LCFI52:
 1799              		.cfi_def_cfa_register 7
 1800 0006 7860     		str	r0, [r7, #4]
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1801              		.loc 1 1799 13
 1802 0008 0023     		movs	r3, #0
 1803 000a 7B61     		str	r3, [r7, #20]
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1804              		.loc 1 1800 22
 1805 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccHYJnM0.s 			page 68


 1806 000e 3B61     		str	r3, [r7, #16]
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1807              		.loc 1 1806 3
 1808 0010 7B68     		ldr	r3, [r7, #4]
 1809 0012 002B     		cmp	r3, #0
 1810 0014 0CD1     		bne	.L103
 1811              	.LBB130:
 1812              	.LBB131:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1813              		.loc 2 195 2
 1814              		.syntax unified
 1815              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1816 0016 4FF05003 			mov r3, #80												
 1817 001a 72B6     		cpsid i													
 1818 001c 83F31188 		msr basepri, r3											
 1819 0020 BFF36F8F 		isb														
 1820 0024 BFF34F8F 		dsb														
 1821 0028 62B6     		cpsie i													
 1822              	
 1823              	@ 0 "" 2
 1824              		.thumb
 1825              		.syntax unified
 1826 002a FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1827              		.loc 2 205 1
 1828 002c 00BF     		nop
 1829              	.L104:
 1830              	.LBE131:
 1831              	.LBE130:
 1832              		.loc 1 1806 3 discriminator 1
 1833 002e FEE7     		b	.L104
 1834              	.L103:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1835              		.loc 1 1809 7
 1836 0030 3B69     		ldr	r3, [r7, #16]
 1837 0032 5B69     		ldr	r3, [r3, #20]
 1838              		.loc 1 1809 5
 1839 0034 0A4A     		ldr	r2, .L107
 1840 0036 9342     		cmp	r3, r2
 1841 0038 0AD1     		bne	.L105
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1842              		.loc 1 1812 8
 1843 003a 3B69     		ldr	r3, [r7, #16]
 1844 003c 9B6A     		ldr	r3, [r3, #40]
 1845              		.loc 1 1812 6
 1846 003e 094A     		ldr	r2, .L107+4
 1847 0040 9342     		cmp	r3, r2
 1848 0042 05D0     		beq	.L105
ARM GAS  /tmp/ccHYJnM0.s 			page 69


1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1849              		.loc 1 1816 9
 1850 0044 3B69     		ldr	r3, [r7, #16]
 1851 0046 9B6A     		ldr	r3, [r3, #40]
 1852              		.loc 1 1816 7
 1853 0048 002B     		cmp	r3, #0
 1854 004a 01D1     		bne	.L105
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1855              		.loc 1 1818 14
 1856 004c 0123     		movs	r3, #1
 1857 004e 7B61     		str	r3, [r7, #20]
 1858              	.L105:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 1859              		.loc 1 1835 10
 1860 0050 7B69     		ldr	r3, [r7, #20]
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1861              		.loc 1 1836 2
 1862 0052 1846     		mov	r0, r3
 1863 0054 1C37     		adds	r7, r7, #28
 1864              	.LCFI53:
 1865              		.cfi_def_cfa_offset 4
 1866 0056 BD46     		mov	sp, r7
 1867              	.LCFI54:
 1868              		.cfi_def_cfa_register 13
 1869              		@ sp needed
 1870 0058 5DF8047B 		ldr	r7, [sp], #4
 1871              	.LCFI55:
 1872              		.cfi_restore 7
 1873              		.cfi_def_cfa_offset 0
 1874 005c 7047     		bx	lr
 1875              	.L108:
 1876 005e 00BF     		.align	2
 1877              	.L107:
 1878 0060 00000000 		.word	xSuspendedTaskList
 1879 0064 00000000 		.word	xPendingReadyList
 1880              		.cfi_endproc
 1881              	.LFE15:
ARM GAS  /tmp/ccHYJnM0.s 			page 70


 1883              		.section	.text.vTaskResume,"ax",%progbits
 1884              		.align	1
 1885              		.global	vTaskResume
 1886              		.syntax unified
 1887              		.thumb
 1888              		.thumb_func
 1889              		.fpu fpv5-d16
 1891              	vTaskResume:
 1892              	.LFB16:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1893              		.loc 1 1844 2
 1894              		.cfi_startproc
 1895              		@ args = 0, pretend = 0, frame = 16
 1896              		@ frame_needed = 1, uses_anonymous_args = 0
 1897 0000 80B5     		push	{r7, lr}
 1898              	.LCFI56:
 1899              		.cfi_def_cfa_offset 8
 1900              		.cfi_offset 7, -8
 1901              		.cfi_offset 14, -4
 1902 0002 84B0     		sub	sp, sp, #16
 1903              	.LCFI57:
 1904              		.cfi_def_cfa_offset 24
 1905 0004 00AF     		add	r7, sp, #0
 1906              	.LCFI58:
 1907              		.cfi_def_cfa_register 7
 1908 0006 7860     		str	r0, [r7, #4]
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1909              		.loc 1 1845 16
 1910 0008 7B68     		ldr	r3, [r7, #4]
 1911 000a FB60     		str	r3, [r7, #12]
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1912              		.loc 1 1848 3
 1913 000c 7B68     		ldr	r3, [r7, #4]
 1914 000e 002B     		cmp	r3, #0
 1915 0010 0CD1     		bne	.L110
 1916              	.LBB132:
 1917              	.LBB133:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1918              		.loc 2 195 2
 1919              		.syntax unified
 1920              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1921 0012 4FF05003 			mov r3, #80												
 1922 0016 72B6     		cpsid i													
 1923 0018 83F31188 		msr basepri, r3											
 1924 001c BFF36F8F 		isb														
 1925 0020 BFF34F8F 		dsb														
 1926 0024 62B6     		cpsie i													
 1927              	
ARM GAS  /tmp/ccHYJnM0.s 			page 71


 1928              	@ 0 "" 2
 1929              		.thumb
 1930              		.syntax unified
 1931 0026 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1932              		.loc 2 205 1
 1933 0028 00BF     		nop
 1934              	.L111:
 1935              	.LBE133:
 1936              	.LBE132:
 1937              		.loc 1 1848 3 discriminator 1
 1938 002a FEE7     		b	.L111
 1939              	.L110:
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1940              		.loc 1 1852 15
 1941 002c 204B     		ldr	r3, .L115
 1942 002e 1B68     		ldr	r3, [r3]
 1943              		.loc 1 1852 5
 1944 0030 FA68     		ldr	r2, [r7, #12]
 1945 0032 9A42     		cmp	r2, r3
 1946 0034 37D0     		beq	.L114
 1947              		.loc 1 1852 33 discriminator 1
 1948 0036 FB68     		ldr	r3, [r7, #12]
 1949 0038 002B     		cmp	r3, #0
 1950 003a 34D0     		beq	.L114
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1951              		.loc 1 1854 4
 1952 003c FFF7FEFF 		bl	vPortEnterCritical
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1953              		.loc 1 1856 9
 1954 0040 F868     		ldr	r0, [r7, #12]
 1955 0042 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1956 0046 0346     		mov	r3, r0
 1957              		.loc 1 1856 7
 1958 0048 002B     		cmp	r3, #0
 1959 004a 2AD0     		beq	.L113
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1960              		.loc 1 1862 15
 1961 004c FB68     		ldr	r3, [r7, #12]
 1962 004e 0433     		adds	r3, r3, #4
 1963 0050 1846     		mov	r0, r3
 1964 0052 FFF7FEFF 		bl	uxListRemove
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1965              		.loc 1 1863 6
 1966 0056 FB68     		ldr	r3, [r7, #12]
 1967 0058 DB6A     		ldr	r3, [r3, #44]
 1968 005a 0122     		movs	r2, #1
ARM GAS  /tmp/ccHYJnM0.s 			page 72


 1969 005c 9A40     		lsls	r2, r2, r3
 1970 005e 154B     		ldr	r3, .L115+4
 1971 0060 1B68     		ldr	r3, [r3]
 1972 0062 1343     		orrs	r3, r3, r2
 1973 0064 134A     		ldr	r2, .L115+4
 1974 0066 1360     		str	r3, [r2]
 1975 0068 FB68     		ldr	r3, [r7, #12]
 1976 006a DA6A     		ldr	r2, [r3, #44]
 1977 006c 1346     		mov	r3, r2
 1978 006e 9B00     		lsls	r3, r3, #2
 1979 0070 1344     		add	r3, r3, r2
 1980 0072 9B00     		lsls	r3, r3, #2
 1981 0074 104A     		ldr	r2, .L115+8
 1982 0076 1A44     		add	r2, r2, r3
 1983 0078 FB68     		ldr	r3, [r7, #12]
 1984 007a 0433     		adds	r3, r3, #4
 1985 007c 1946     		mov	r1, r3
 1986 007e 1046     		mov	r0, r2
 1987 0080 FFF7FEFF 		bl	vListInsertEnd
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1988              		.loc 1 1866 15
 1989 0084 FB68     		ldr	r3, [r7, #12]
 1990 0086 DA6A     		ldr	r2, [r3, #44]
 1991              		.loc 1 1866 43
 1992 0088 094B     		ldr	r3, .L115
 1993 008a 1B68     		ldr	r3, [r3]
 1994 008c DB6A     		ldr	r3, [r3, #44]
 1995              		.loc 1 1866 8
 1996 008e 9A42     		cmp	r2, r3
 1997 0090 07D3     		bcc	.L113
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1998              		.loc 1 1871 7
 1999 0092 0A4B     		ldr	r3, .L115+12
 2000 0094 4FF08052 		mov	r2, #268435456
 2001 0098 1A60     		str	r2, [r3]
 2002              		.syntax unified
 2003              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2004 009a BFF34F8F 		dsb
 2005              	@ 0 "" 2
 2006              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2007 009e BFF36F8F 		isb
 2008              	@ 0 "" 2
 2009              		.thumb
 2010              		.syntax unified
 2011              	.L113:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccHYJnM0.s 			page 73


1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2012              		.loc 1 1883 4
 2013 00a2 FFF7FEFF 		bl	vPortExitCritical
 2014              	.L114:
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2015              		.loc 1 1889 2
 2016 00a6 00BF     		nop
 2017 00a8 1037     		adds	r7, r7, #16
 2018              	.LCFI59:
 2019              		.cfi_def_cfa_offset 8
 2020 00aa BD46     		mov	sp, r7
 2021              	.LCFI60:
 2022              		.cfi_def_cfa_register 13
 2023              		@ sp needed
 2024 00ac 80BD     		pop	{r7, pc}
 2025              	.L116:
 2026 00ae 00BF     		.align	2
 2027              	.L115:
 2028 00b0 00000000 		.word	pxCurrentTCB
 2029 00b4 00000000 		.word	uxTopReadyPriority
 2030 00b8 00000000 		.word	pxReadyTasksLists
 2031 00bc 04ED00E0 		.word	-536810236
 2032              		.cfi_endproc
 2033              	.LFE16:
 2035              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2036              		.align	1
 2037              		.global	xTaskResumeFromISR
 2038              		.syntax unified
 2039              		.thumb
 2040              		.thumb_func
 2041              		.fpu fpv5-d16
 2043              	xTaskResumeFromISR:
 2044              	.LFB17:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2045              		.loc 1 1898 2
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 40
 2048              		@ frame_needed = 1, uses_anonymous_args = 0
 2049 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccHYJnM0.s 			page 74


 2050              	.LCFI61:
 2051              		.cfi_def_cfa_offset 8
 2052              		.cfi_offset 7, -8
 2053              		.cfi_offset 14, -4
 2054 0002 8AB0     		sub	sp, sp, #40
 2055              	.LCFI62:
 2056              		.cfi_def_cfa_offset 48
 2057 0004 00AF     		add	r7, sp, #0
 2058              	.LCFI63:
 2059              		.cfi_def_cfa_register 7
 2060 0006 7860     		str	r0, [r7, #4]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2061              		.loc 1 1899 13
 2062 0008 0023     		movs	r3, #0
 2063 000a 7B62     		str	r3, [r7, #36]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2064              		.loc 1 1900 16
 2065 000c 7B68     		ldr	r3, [r7, #4]
 2066 000e 3B62     		str	r3, [r7, #32]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2067              		.loc 1 1903 3
 2068 0010 7B68     		ldr	r3, [r7, #4]
 2069 0012 002B     		cmp	r3, #0
 2070 0014 0CD1     		bne	.L118
 2071              	.LBB134:
 2072              	.LBB135:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2073              		.loc 2 195 2
 2074              		.syntax unified
 2075              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2076 0016 4FF05003 			mov r3, #80												
 2077 001a 72B6     		cpsid i													
 2078 001c 83F31188 		msr basepri, r3											
 2079 0020 BFF36F8F 		isb														
 2080 0024 BFF34F8F 		dsb														
 2081 0028 62B6     		cpsie i													
 2082              	
 2083              	@ 0 "" 2
 2084              		.thumb
 2085              		.syntax unified
 2086 002a BB61     		str	r3, [r7, #24]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2087              		.loc 2 205 1
 2088 002c 00BF     		nop
 2089              	.L119:
 2090              	.LBE135:
 2091              	.LBE134:
 2092              		.loc 1 1903 3 discriminator 1
 2093 002e FEE7     		b	.L119
 2094              	.L118:
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
ARM GAS  /tmp/ccHYJnM0.s 			page 75


1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2095              		.loc 1 1921 3
 2096 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2097              	.LBB136:
 2098              	.LBB137:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2099              		.loc 2 213 2
 2100              		.syntax unified
 2101              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2102 0034 EFF31182 			mrs r2, basepri											
 2103 0038 4FF05003 		mov r3, #80												
 2104 003c 72B6     		cpsid i													
 2105 003e 83F31188 		msr basepri, r3											
 2106 0042 BFF36F8F 		isb														
 2107 0046 BFF34F8F 		dsb														
 2108 004a 62B6     		cpsie i													
 2109              	
 2110              	@ 0 "" 2
 2111              		.thumb
 2112              		.syntax unified
 2113 004c 7A61     		str	r2, [r7, #20]
 2114 004e 3B61     		str	r3, [r7, #16]
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 2115              		.loc 2 227 9
 2116 0050 7B69     		ldr	r3, [r7, #20]
 2117              	.LBE137:
 2118              	.LBE136:
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2119              		.loc 1 1923 28
 2120 0052 FB61     		str	r3, [r7, #28]
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2121              		.loc 1 1925 8
 2122 0054 386A     		ldr	r0, [r7, #32]
 2123 0056 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2124 005a 0346     		mov	r3, r0
 2125              		.loc 1 1925 6
 2126 005c 002B     		cmp	r3, #0
 2127 005e 2FD0     		beq	.L121
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  /tmp/ccHYJnM0.s 			page 76


 2128              		.loc 1 1930 30
 2129 0060 1D4B     		ldr	r3, .L125
 2130 0062 1B68     		ldr	r3, [r3]
 2131              		.loc 1 1930 7
 2132 0064 002B     		cmp	r3, #0
 2133 0066 25D1     		bne	.L122
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2134              		.loc 1 1934 15
 2135 0068 3B6A     		ldr	r3, [r7, #32]
 2136 006a DA6A     		ldr	r2, [r3, #44]
 2137              		.loc 1 1934 43
 2138 006c 1B4B     		ldr	r3, .L125+4
 2139 006e 1B68     		ldr	r3, [r3]
 2140 0070 DB6A     		ldr	r3, [r3, #44]
 2141              		.loc 1 1934 8
 2142 0072 9A42     		cmp	r2, r3
 2143 0074 01D3     		bcc	.L123
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2144              		.loc 1 1936 22
 2145 0076 0123     		movs	r3, #1
 2146 0078 7B62     		str	r3, [r7, #36]
 2147              	.L123:
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2148              		.loc 1 1943 15
 2149 007a 3B6A     		ldr	r3, [r7, #32]
 2150 007c 0433     		adds	r3, r3, #4
 2151 007e 1846     		mov	r0, r3
 2152 0080 FFF7FEFF 		bl	uxListRemove
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2153              		.loc 1 1944 6
 2154 0084 3B6A     		ldr	r3, [r7, #32]
 2155 0086 DB6A     		ldr	r3, [r3, #44]
 2156 0088 0122     		movs	r2, #1
 2157 008a 9A40     		lsls	r2, r2, r3
 2158 008c 144B     		ldr	r3, .L125+8
 2159 008e 1B68     		ldr	r3, [r3]
 2160 0090 1343     		orrs	r3, r3, r2
 2161 0092 134A     		ldr	r2, .L125+8
 2162 0094 1360     		str	r3, [r2]
 2163 0096 3B6A     		ldr	r3, [r7, #32]
 2164 0098 DA6A     		ldr	r2, [r3, #44]
 2165 009a 1346     		mov	r3, r2
 2166 009c 9B00     		lsls	r3, r3, #2
 2167 009e 1344     		add	r3, r3, r2
 2168 00a0 9B00     		lsls	r3, r3, #2
 2169 00a2 104A     		ldr	r2, .L125+12
 2170 00a4 1A44     		add	r2, r2, r3
ARM GAS  /tmp/ccHYJnM0.s 			page 77


 2171 00a6 3B6A     		ldr	r3, [r7, #32]
 2172 00a8 0433     		adds	r3, r3, #4
 2173 00aa 1946     		mov	r1, r3
 2174 00ac 1046     		mov	r0, r2
 2175 00ae FFF7FEFF 		bl	vListInsertEnd
 2176 00b2 05E0     		b	.L121
 2177              	.L122:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2178              		.loc 1 1951 6
 2179 00b4 3B6A     		ldr	r3, [r7, #32]
 2180 00b6 1833     		adds	r3, r3, #24
 2181 00b8 1946     		mov	r1, r3
 2182 00ba 0B48     		ldr	r0, .L125+16
 2183 00bc FFF7FEFF 		bl	vListInsertEnd
 2184              	.L121:
 2185 00c0 FB69     		ldr	r3, [r7, #28]
 2186 00c2 FB60     		str	r3, [r7, #12]
 2187              	.LBB138:
 2188              	.LBB139:
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2189              		.loc 2 233 2
 2190 00c4 FB68     		ldr	r3, [r7, #12]
 2191              		.syntax unified
 2192              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2193 00c6 83F31188 			msr basepri, r3	
 2194              	@ 0 "" 2
 2195              		.loc 2 237 1
 2196              		.thumb
 2197              		.syntax unified
 2198 00ca 00BF     		nop
 2199              	.LBE139:
 2200              	.LBE138:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2201              		.loc 1 1961 10
 2202 00cc 7B6A     		ldr	r3, [r7, #36]
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2203              		.loc 1 1962 2
 2204 00ce 1846     		mov	r0, r3
 2205 00d0 2837     		adds	r7, r7, #40
 2206              	.LCFI64:
 2207              		.cfi_def_cfa_offset 8
 2208 00d2 BD46     		mov	sp, r7
ARM GAS  /tmp/ccHYJnM0.s 			page 78


 2209              	.LCFI65:
 2210              		.cfi_def_cfa_register 13
 2211              		@ sp needed
 2212 00d4 80BD     		pop	{r7, pc}
 2213              	.L126:
 2214 00d6 00BF     		.align	2
 2215              	.L125:
 2216 00d8 00000000 		.word	uxSchedulerSuspended
 2217 00dc 00000000 		.word	pxCurrentTCB
 2218 00e0 00000000 		.word	uxTopReadyPriority
 2219 00e4 00000000 		.word	pxReadyTasksLists
 2220 00e8 00000000 		.word	xPendingReadyList
 2221              		.cfi_endproc
 2222              	.LFE17:
 2224              		.section	.rodata
 2225              		.align	2
 2226              	.LC0:
 2227 0000 49444C45 		.ascii	"IDLE\000"
 2227      00
 2228              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2229              		.align	1
 2230              		.global	vTaskStartScheduler
 2231              		.syntax unified
 2232              		.thumb
 2233              		.thumb_func
 2234              		.fpu fpv5-d16
 2236              	vTaskStartScheduler:
 2237              	.LFB18:
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2238              		.loc 1 1968 1
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 24
 2241              		@ frame_needed = 1, uses_anonymous_args = 0
 2242 0000 80B5     		push	{r7, lr}
 2243              	.LCFI66:
 2244              		.cfi_def_cfa_offset 8
 2245              		.cfi_offset 7, -8
 2246              		.cfi_offset 14, -4
 2247 0002 8AB0     		sub	sp, sp, #40
 2248              	.LCFI67:
 2249              		.cfi_def_cfa_offset 48
 2250 0004 04AF     		add	r7, sp, #16
 2251              	.LCFI68:
 2252              		.cfi_def_cfa 7, 32
 2253              	.LBB140:
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2254              		.loc 1 1974 17
ARM GAS  /tmp/ccHYJnM0.s 			page 79


 2255 0006 0023     		movs	r3, #0
 2256 0008 BB60     		str	r3, [r7, #8]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2257              		.loc 1 1975 16
 2258 000a 0023     		movs	r3, #0
 2259 000c 7B60     		str	r3, [r7, #4]
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2260              		.loc 1 1980 3
 2261 000e 3A46     		mov	r2, r7
 2262 0010 391D     		adds	r1, r7, #4
 2263 0012 07F10803 		add	r3, r7, #8
 2264 0016 1846     		mov	r0, r3
 2265 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2266              		.loc 1 1981 21
 2267 001c 3968     		ldr	r1, [r7]
 2268 001e 7B68     		ldr	r3, [r7, #4]
 2269 0020 BA68     		ldr	r2, [r7, #8]
 2270 0022 0292     		str	r2, [sp, #8]
 2271 0024 0193     		str	r3, [sp, #4]
 2272 0026 0023     		movs	r3, #0
 2273 0028 0093     		str	r3, [sp]
 2274 002a 0023     		movs	r3, #0
 2275 002c 0A46     		mov	r2, r1
 2276 002e 2049     		ldr	r1, .L134
 2277 0030 2048     		ldr	r0, .L134+4
 2278 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2279 0036 0346     		mov	r3, r0
 2280              		.loc 1 1981 19
 2281 0038 1F4A     		ldr	r2, .L134+8
 2282 003a 1360     		str	r3, [r2]
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2283              		.loc 1 1989 23
 2284 003c 1E4B     		ldr	r3, .L134+8
 2285 003e 1B68     		ldr	r3, [r3]
 2286              		.loc 1 1989 5
 2287 0040 002B     		cmp	r3, #0
 2288 0042 02D0     		beq	.L128
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2289              		.loc 1 1991 12
 2290 0044 0123     		movs	r3, #1
 2291 0046 7B61     		str	r3, [r7, #20]
 2292 0048 01E0     		b	.L129
 2293              	.L128:
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccHYJnM0.s 			page 80


1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2294              		.loc 1 1995 12
 2295 004a 0023     		movs	r3, #0
 2296 004c 7B61     		str	r3, [r7, #20]
 2297              	.L129:
 2298              	.LBE140:
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2299              		.loc 1 2023 4
 2300 004e 7B69     		ldr	r3, [r7, #20]
 2301 0050 012B     		cmp	r3, #1
 2302 0052 18D1     		bne	.L130
 2303              	.LBB141:
 2304              	.LBB142:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2305              		.loc 2 195 2
 2306              		.syntax unified
 2307              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2308 0054 4FF05003 			mov r3, #80												
 2309 0058 72B6     		cpsid i													
 2310 005a 83F31188 		msr basepri, r3											
 2311 005e BFF36F8F 		isb														
 2312 0062 BFF34F8F 		dsb														
 2313 0066 62B6     		cpsie i													
 2314              	
 2315              	@ 0 "" 2
 2316              		.thumb
 2317              		.syntax unified
 2318 0068 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/ccHYJnM0.s 			page 81


 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2319              		.loc 2 205 1
 2320 006a 00BF     		nop
 2321              	.LBE142:
 2322              	.LBE141:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2323              		.loc 1 2049 24
 2324 006c 134B     		ldr	r3, .L134+12
 2325 006e 4FF0FF32 		mov	r2, #-1
 2326 0072 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2327              		.loc 1 2050 21
 2328 0074 124B     		ldr	r3, .L134+16
 2329 0076 0122     		movs	r2, #1
 2330 0078 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2331              		.loc 1 2051 14
 2332 007a 124B     		ldr	r3, .L134+20
 2333 007c 0022     		movs	r2, #0
 2334 007e 1A60     		str	r2, [r3]
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
ARM GAS  /tmp/ccHYJnM0.s 			page 82


2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2335              		.loc 1 2065 7
 2336 0080 FFF7FEFF 		bl	xPortStartScheduler
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2337              		.loc 1 2086 1
 2338 0084 10E0     		b	.L133
 2339              	.L130:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2340              		.loc 1 2080 3
 2341 0086 7B69     		ldr	r3, [r7, #20]
 2342 0088 B3F1FF3F 		cmp	r3, #-1
 2343 008c 0CD1     		bne	.L133
 2344              	.LBB143:
 2345              	.LBB144:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2346              		.loc 2 195 2
 2347              		.syntax unified
 2348              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2349 008e 4FF05003 			mov r3, #80												
 2350 0092 72B6     		cpsid i													
 2351 0094 83F31188 		msr basepri, r3											
 2352 0098 BFF36F8F 		isb														
 2353 009c BFF34F8F 		dsb														
 2354 00a0 62B6     		cpsie i													
 2355              	
 2356              	@ 0 "" 2
 2357              		.thumb
 2358              		.syntax unified
 2359 00a2 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2360              		.loc 2 205 1
 2361 00a4 00BF     		nop
 2362              	.L132:
 2363              	.LBE144:
 2364              	.LBE143:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccHYJnM0.s 			page 83


 2365              		.loc 1 2080 3 discriminator 2
 2366 00a6 FEE7     		b	.L132
 2367              	.L133:
 2368              		.loc 1 2086 1
 2369 00a8 00BF     		nop
 2370 00aa 1837     		adds	r7, r7, #24
 2371              	.LCFI69:
 2372              		.cfi_def_cfa_offset 8
 2373 00ac BD46     		mov	sp, r7
 2374              	.LCFI70:
 2375              		.cfi_def_cfa_register 13
 2376              		@ sp needed
 2377 00ae 80BD     		pop	{r7, pc}
 2378              	.L135:
 2379              		.align	2
 2380              	.L134:
 2381 00b0 00000000 		.word	.LC0
 2382 00b4 00000000 		.word	prvIdleTask
 2383 00b8 00000000 		.word	xIdleTaskHandle
 2384 00bc 00000000 		.word	xNextTaskUnblockTime
 2385 00c0 00000000 		.word	xSchedulerRunning
 2386 00c4 00000000 		.word	xTickCount
 2387              		.cfi_endproc
 2388              	.LFE18:
 2390              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2391              		.align	1
 2392              		.global	vTaskEndScheduler
 2393              		.syntax unified
 2394              		.thumb
 2395              		.thumb_func
 2396              		.fpu fpv5-d16
 2398              	vTaskEndScheduler:
 2399              	.LFB19:
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2400              		.loc 1 2090 1
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 8
 2403              		@ frame_needed = 1, uses_anonymous_args = 0
 2404 0000 80B5     		push	{r7, lr}
 2405              	.LCFI71:
 2406              		.cfi_def_cfa_offset 8
 2407              		.cfi_offset 7, -8
 2408              		.cfi_offset 14, -4
 2409 0002 82B0     		sub	sp, sp, #8
 2410              	.LCFI72:
 2411              		.cfi_def_cfa_offset 16
 2412 0004 00AF     		add	r7, sp, #0
 2413              	.LCFI73:
 2414              		.cfi_def_cfa_register 7
 2415              	.LBB145:
 2416              	.LBB146:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2417              		.loc 2 195 2
 2418              		.syntax unified
ARM GAS  /tmp/ccHYJnM0.s 			page 84


 2419              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2420 0006 4FF05003 			mov r3, #80												
 2421 000a 72B6     		cpsid i													
 2422 000c 83F31188 		msr basepri, r3											
 2423 0010 BFF36F8F 		isb														
 2424 0014 BFF34F8F 		dsb														
 2425 0018 62B6     		cpsie i													
 2426              	
 2427              	@ 0 "" 2
 2428              		.thumb
 2429              		.syntax unified
 2430 001a 7B60     		str	r3, [r7, #4]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2431              		.loc 2 205 1
 2432 001c 00BF     		nop
 2433              	.LBE146:
 2434              	.LBE145:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2435              		.loc 1 2095 20
 2436 001e 044B     		ldr	r3, .L137
 2437 0020 0022     		movs	r2, #0
 2438 0022 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2439              		.loc 1 2096 2
 2440 0024 FFF7FEFF 		bl	vPortEndScheduler
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2441              		.loc 1 2097 1
 2442 0028 00BF     		nop
 2443 002a 0837     		adds	r7, r7, #8
 2444              	.LCFI74:
 2445              		.cfi_def_cfa_offset 8
 2446 002c BD46     		mov	sp, r7
 2447              	.LCFI75:
 2448              		.cfi_def_cfa_register 13
 2449              		@ sp needed
 2450 002e 80BD     		pop	{r7, pc}
 2451              	.L138:
 2452              		.align	2
 2453              	.L137:
 2454 0030 00000000 		.word	xSchedulerRunning
 2455              		.cfi_endproc
 2456              	.LFE19:
 2458              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2459              		.align	1
 2460              		.global	vTaskSuspendAll
 2461              		.syntax unified
 2462              		.thumb
 2463              		.thumb_func
 2464              		.fpu fpv5-d16
 2466              	vTaskSuspendAll:
 2467              	.LFB20:
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 85


2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2468              		.loc 1 2101 1
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 0
 2471              		@ frame_needed = 1, uses_anonymous_args = 0
 2472              		@ link register save eliminated.
 2473 0000 80B4     		push	{r7}
 2474              	.LCFI76:
 2475              		.cfi_def_cfa_offset 4
 2476              		.cfi_offset 7, -4
 2477 0002 00AF     		add	r7, sp, #0
 2478              	.LCFI77:
 2479              		.cfi_def_cfa_register 7
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2480              		.loc 1 2106 2
 2481 0004 044B     		ldr	r3, .L140
 2482 0006 1B68     		ldr	r3, [r3]
 2483 0008 0133     		adds	r3, r3, #1
 2484 000a 034A     		ldr	r2, .L140
 2485 000c 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2486              		.loc 1 2107 2
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2487              		.loc 1 2108 1
 2488 000e 00BF     		nop
 2489 0010 BD46     		mov	sp, r7
 2490              	.LCFI78:
 2491              		.cfi_def_cfa_register 13
 2492              		@ sp needed
 2493 0012 5DF8047B 		ldr	r7, [sp], #4
 2494              	.LCFI79:
 2495              		.cfi_restore 7
 2496              		.cfi_def_cfa_offset 0
 2497 0016 7047     		bx	lr
 2498              	.L141:
 2499              		.align	2
 2500              	.L140:
 2501 0018 00000000 		.word	uxSchedulerSuspended
 2502              		.cfi_endproc
 2503              	.LFE20:
 2505              		.section	.text.xTaskResumeAll,"ax",%progbits
 2506              		.align	1
 2507              		.global	xTaskResumeAll
 2508              		.syntax unified
 2509              		.thumb
 2510              		.thumb_func
 2511              		.fpu fpv5-d16
 2513              	xTaskResumeAll:
 2514              	.LFB21:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  /tmp/ccHYJnM0.s 			page 86


2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/ccHYJnM0.s 			page 87


2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2515              		.loc 1 2175 1
 2516              		.cfi_startproc
 2517              		@ args = 0, pretend = 0, frame = 16
 2518              		@ frame_needed = 1, uses_anonymous_args = 0
 2519 0000 80B5     		push	{r7, lr}
 2520              	.LCFI80:
 2521              		.cfi_def_cfa_offset 8
 2522              		.cfi_offset 7, -8
 2523              		.cfi_offset 14, -4
 2524 0002 84B0     		sub	sp, sp, #16
 2525              	.LCFI81:
 2526              		.cfi_def_cfa_offset 24
 2527 0004 00AF     		add	r7, sp, #0
 2528              	.LCFI82:
 2529              		.cfi_def_cfa_register 7
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2530              		.loc 1 2176 8
 2531 0006 0023     		movs	r3, #0
 2532 0008 FB60     		str	r3, [r7, #12]
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2533              		.loc 1 2177 12
 2534 000a 0023     		movs	r3, #0
 2535 000c BB60     		str	r3, [r7, #8]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2536              		.loc 1 2181 2
 2537 000e 424B     		ldr	r3, .L153
 2538 0010 1B68     		ldr	r3, [r3]
 2539 0012 002B     		cmp	r3, #0
 2540 0014 0CD1     		bne	.L143
 2541              	.LBB147:
 2542              	.LBB148:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2543              		.loc 2 195 2
 2544              		.syntax unified
 2545              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2546 0016 4FF05003 			mov r3, #80												
 2547 001a 72B6     		cpsid i													
 2548 001c 83F31188 		msr basepri, r3											
 2549 0020 BFF36F8F 		isb														
 2550 0024 BFF34F8F 		dsb														
 2551 0028 62B6     		cpsie i													
 2552              	
 2553              	@ 0 "" 2
 2554              		.thumb
 2555              		.syntax unified
 2556 002a 3B60     		str	r3, [r7]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 88


 2557              		.loc 2 205 1
 2558 002c 00BF     		nop
 2559              	.L144:
 2560              	.LBE148:
 2561              	.LBE147:
 2562              		.loc 1 2181 2 discriminator 1
 2563 002e FEE7     		b	.L144
 2564              	.L143:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2565              		.loc 1 2188 2
 2566 0030 FFF7FEFF 		bl	vPortEnterCritical
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2567              		.loc 1 2190 3
 2568 0034 384B     		ldr	r3, .L153
 2569 0036 1B68     		ldr	r3, [r3]
 2570 0038 013B     		subs	r3, r3, #1
 2571 003a 374A     		ldr	r2, .L153
 2572 003c 1360     		str	r3, [r2]
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2573              		.loc 1 2192 28
 2574 003e 364B     		ldr	r3, .L153
 2575 0040 1B68     		ldr	r3, [r3]
 2576              		.loc 1 2192 5
 2577 0042 002B     		cmp	r3, #0
 2578 0044 61D1     		bne	.L145
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2579              		.loc 1 2194 31
 2580 0046 354B     		ldr	r3, .L153+4
 2581 0048 1B68     		ldr	r3, [r3]
 2582              		.loc 1 2194 6
 2583 004a 002B     		cmp	r3, #0
 2584 004c 5DD0     		beq	.L145
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2585              		.loc 1 2198 10
 2586 004e 2EE0     		b	.L146
 2587              	.L147:
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2588              		.loc 1 2200 14
 2589 0050 334B     		ldr	r3, .L153+8
 2590 0052 DB68     		ldr	r3, [r3, #12]
 2591              		.loc 1 2200 12
 2592 0054 DB68     		ldr	r3, [r3, #12]
 2593 0056 FB60     		str	r3, [r7, #12]
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
ARM GAS  /tmp/ccHYJnM0.s 			page 89


 2594              		.loc 1 2201 15
 2595 0058 FB68     		ldr	r3, [r7, #12]
 2596 005a 1833     		adds	r3, r3, #24
 2597 005c 1846     		mov	r0, r3
 2598 005e FFF7FEFF 		bl	uxListRemove
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2599              		.loc 1 2202 15
 2600 0062 FB68     		ldr	r3, [r7, #12]
 2601 0064 0433     		adds	r3, r3, #4
 2602 0066 1846     		mov	r0, r3
 2603 0068 FFF7FEFF 		bl	uxListRemove
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2604              		.loc 1 2203 6
 2605 006c FB68     		ldr	r3, [r7, #12]
 2606 006e DB6A     		ldr	r3, [r3, #44]
 2607 0070 0122     		movs	r2, #1
 2608 0072 9A40     		lsls	r2, r2, r3
 2609 0074 2B4B     		ldr	r3, .L153+12
 2610 0076 1B68     		ldr	r3, [r3]
 2611 0078 1343     		orrs	r3, r3, r2
 2612 007a 2A4A     		ldr	r2, .L153+12
 2613 007c 1360     		str	r3, [r2]
 2614 007e FB68     		ldr	r3, [r7, #12]
 2615 0080 DA6A     		ldr	r2, [r3, #44]
 2616 0082 1346     		mov	r3, r2
 2617 0084 9B00     		lsls	r3, r3, #2
 2618 0086 1344     		add	r3, r3, r2
 2619 0088 9B00     		lsls	r3, r3, #2
 2620 008a 274A     		ldr	r2, .L153+16
 2621 008c 1A44     		add	r2, r2, r3
 2622 008e FB68     		ldr	r3, [r7, #12]
 2623 0090 0433     		adds	r3, r3, #4
 2624 0092 1946     		mov	r1, r3
 2625 0094 1046     		mov	r0, r2
 2626 0096 FFF7FEFF 		bl	vListInsertEnd
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2627              		.loc 1 2207 15
 2628 009a FB68     		ldr	r3, [r7, #12]
 2629 009c DA6A     		ldr	r2, [r3, #44]
 2630              		.loc 1 2207 43
 2631 009e 234B     		ldr	r3, .L153+20
 2632 00a0 1B68     		ldr	r3, [r3]
 2633 00a2 DB6A     		ldr	r3, [r3, #44]
 2634              		.loc 1 2207 8
 2635 00a4 9A42     		cmp	r2, r3
 2636 00a6 02D3     		bcc	.L146
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2637              		.loc 1 2209 21
 2638 00a8 214B     		ldr	r3, .L153+24
 2639 00aa 0122     		movs	r2, #1
 2640 00ac 1A60     		str	r2, [r3]
 2641              	.L146:
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccHYJnM0.s 			page 90


 2642              		.loc 1 2198 12
 2643 00ae 1C4B     		ldr	r3, .L153+8
 2644 00b0 1B68     		ldr	r3, [r3]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2645              		.loc 1 2198 10
 2646 00b2 002B     		cmp	r3, #0
 2647 00b4 CCD1     		bne	.L147
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2648              		.loc 1 2217 7
 2649 00b6 FB68     		ldr	r3, [r7, #12]
 2650 00b8 002B     		cmp	r3, #0
 2651 00ba 01D0     		beq	.L148
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2652              		.loc 1 2225 6
 2653 00bc FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2654              	.L148:
 2655              	.LBB149:
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2656              		.loc 1 2233 18
 2657 00c0 1C4B     		ldr	r3, .L153+28
 2658 00c2 1B68     		ldr	r3, [r3]
 2659 00c4 7B60     		str	r3, [r7, #4]
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2660              		.loc 1 2235 8
 2661 00c6 7B68     		ldr	r3, [r7, #4]
 2662 00c8 002B     		cmp	r3, #0
 2663 00ca 10D0     		beq	.L149
 2664              	.L151:
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2665              		.loc 1 2239 12
 2666 00cc FFF7FEFF 		bl	xTaskIncrementTick
 2667 00d0 0346     		mov	r3, r0
ARM GAS  /tmp/ccHYJnM0.s 			page 91


 2668              		.loc 1 2239 10
 2669 00d2 002B     		cmp	r3, #0
 2670 00d4 02D0     		beq	.L150
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2671              		.loc 1 2241 23
 2672 00d6 164B     		ldr	r3, .L153+24
 2673 00d8 0122     		movs	r2, #1
 2674 00da 1A60     		str	r2, [r3]
 2675              	.L150:
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2676              		.loc 1 2247 8
 2677 00dc 7B68     		ldr	r3, [r7, #4]
 2678 00de 013B     		subs	r3, r3, #1
 2679 00e0 7B60     		str	r3, [r7, #4]
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2680              		.loc 1 2248 7
 2681 00e2 7B68     		ldr	r3, [r7, #4]
 2682 00e4 002B     		cmp	r3, #0
 2683 00e6 F1D1     		bne	.L151
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2684              		.loc 1 2250 21
 2685 00e8 124B     		ldr	r3, .L153+28
 2686 00ea 0022     		movs	r2, #0
 2687 00ec 1A60     		str	r2, [r3]
 2688              	.L149:
 2689              	.LBE149:
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2690              		.loc 1 2258 23
 2691 00ee 104B     		ldr	r3, .L153+24
 2692 00f0 1B68     		ldr	r3, [r3]
 2693              		.loc 1 2258 7
 2694 00f2 002B     		cmp	r3, #0
 2695 00f4 09D0     		beq	.L145
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2696              		.loc 1 2262 23
 2697 00f6 0123     		movs	r3, #1
 2698 00f8 BB60     		str	r3, [r7, #8]
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
ARM GAS  /tmp/ccHYJnM0.s 			page 92


 2699              		.loc 1 2265 6
 2700 00fa 0F4B     		ldr	r3, .L153+32
 2701 00fc 4FF08052 		mov	r2, #268435456
 2702 0100 1A60     		str	r2, [r3]
 2703              		.syntax unified
 2704              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2705 0102 BFF34F8F 		dsb
 2706              	@ 0 "" 2
 2707              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2708 0106 BFF36F8F 		isb
 2709              	@ 0 "" 2
 2710              		.thumb
 2711              		.syntax unified
 2712              	.L145:
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2713              		.loc 1 2278 2
 2714 010a FFF7FEFF 		bl	vPortExitCritical
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2715              		.loc 1 2280 9
 2716 010e BB68     		ldr	r3, [r7, #8]
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2717              		.loc 1 2281 1
 2718 0110 1846     		mov	r0, r3
 2719 0112 1037     		adds	r7, r7, #16
 2720              	.LCFI83:
 2721              		.cfi_def_cfa_offset 8
 2722 0114 BD46     		mov	sp, r7
 2723              	.LCFI84:
 2724              		.cfi_def_cfa_register 13
 2725              		@ sp needed
 2726 0116 80BD     		pop	{r7, pc}
 2727              	.L154:
 2728              		.align	2
 2729              	.L153:
 2730 0118 00000000 		.word	uxSchedulerSuspended
 2731 011c 00000000 		.word	uxCurrentNumberOfTasks
 2732 0120 00000000 		.word	xPendingReadyList
 2733 0124 00000000 		.word	uxTopReadyPriority
 2734 0128 00000000 		.word	pxReadyTasksLists
 2735 012c 00000000 		.word	pxCurrentTCB
 2736 0130 00000000 		.word	xYieldPending
 2737 0134 00000000 		.word	uxPendedTicks
 2738 0138 04ED00E0 		.word	-536810236
 2739              		.cfi_endproc
ARM GAS  /tmp/ccHYJnM0.s 			page 93


 2740              	.LFE21:
 2742              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2743              		.align	1
 2744              		.global	xTaskGetTickCount
 2745              		.syntax unified
 2746              		.thumb
 2747              		.thumb_func
 2748              		.fpu fpv5-d16
 2750              	xTaskGetTickCount:
 2751              	.LFB22:
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2752              		.loc 1 2285 1
 2753              		.cfi_startproc
 2754              		@ args = 0, pretend = 0, frame = 8
 2755              		@ frame_needed = 1, uses_anonymous_args = 0
 2756              		@ link register save eliminated.
 2757 0000 80B4     		push	{r7}
 2758              	.LCFI85:
 2759              		.cfi_def_cfa_offset 4
 2760              		.cfi_offset 7, -4
 2761 0002 83B0     		sub	sp, sp, #12
 2762              	.LCFI86:
 2763              		.cfi_def_cfa_offset 16
 2764 0004 00AF     		add	r7, sp, #0
 2765              	.LCFI87:
 2766              		.cfi_def_cfa_register 7
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2767              		.loc 1 2291 10
 2768 0006 054B     		ldr	r3, .L157
 2769 0008 1B68     		ldr	r3, [r3]
 2770 000a 7B60     		str	r3, [r7, #4]
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 2771              		.loc 1 2295 9
 2772 000c 7B68     		ldr	r3, [r7, #4]
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2773              		.loc 1 2296 1
 2774 000e 1846     		mov	r0, r3
 2775 0010 0C37     		adds	r7, r7, #12
 2776              	.LCFI88:
 2777              		.cfi_def_cfa_offset 4
 2778 0012 BD46     		mov	sp, r7
 2779              	.LCFI89:
 2780              		.cfi_def_cfa_register 13
 2781              		@ sp needed
 2782 0014 5DF8047B 		ldr	r7, [sp], #4
 2783              	.LCFI90:
ARM GAS  /tmp/ccHYJnM0.s 			page 94


 2784              		.cfi_restore 7
 2785              		.cfi_def_cfa_offset 0
 2786 0018 7047     		bx	lr
 2787              	.L158:
 2788 001a 00BF     		.align	2
 2789              	.L157:
 2790 001c 00000000 		.word	xTickCount
 2791              		.cfi_endproc
 2792              	.LFE22:
 2794              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2795              		.align	1
 2796              		.global	xTaskGetTickCountFromISR
 2797              		.syntax unified
 2798              		.thumb
 2799              		.thumb_func
 2800              		.fpu fpv5-d16
 2802              	xTaskGetTickCountFromISR:
 2803              	.LFB23:
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2804              		.loc 1 2300 1
 2805              		.cfi_startproc
 2806              		@ args = 0, pretend = 0, frame = 8
 2807              		@ frame_needed = 1, uses_anonymous_args = 0
 2808 0000 80B5     		push	{r7, lr}
 2809              	.LCFI91:
 2810              		.cfi_def_cfa_offset 8
 2811              		.cfi_offset 7, -8
 2812              		.cfi_offset 14, -4
 2813 0002 82B0     		sub	sp, sp, #8
 2814              	.LCFI92:
 2815              		.cfi_def_cfa_offset 16
 2816 0004 00AF     		add	r7, sp, #0
 2817              	.LCFI93:
 2818              		.cfi_def_cfa_register 7
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2819              		.loc 1 2318 2
 2820 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  /tmp/ccHYJnM0.s 			page 95


2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2821              		.loc 1 2320 25
 2822 000a 0023     		movs	r3, #0
 2823 000c 7B60     		str	r3, [r7, #4]
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 2824              		.loc 1 2322 11
 2825 000e 044B     		ldr	r3, .L161
 2826 0010 1B68     		ldr	r3, [r3]
 2827 0012 3B60     		str	r3, [r7]
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 2828              		.loc 1 2326 9
 2829 0014 3B68     		ldr	r3, [r7]
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2830              		.loc 1 2327 1
 2831 0016 1846     		mov	r0, r3
 2832 0018 0837     		adds	r7, r7, #8
 2833              	.LCFI94:
 2834              		.cfi_def_cfa_offset 8
 2835 001a BD46     		mov	sp, r7
 2836              	.LCFI95:
 2837              		.cfi_def_cfa_register 13
 2838              		@ sp needed
 2839 001c 80BD     		pop	{r7, pc}
 2840              	.L162:
 2841 001e 00BF     		.align	2
 2842              	.L161:
 2843 0020 00000000 		.word	xTickCount
 2844              		.cfi_endproc
 2845              	.LFE23:
 2847              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2848              		.align	1
 2849              		.global	uxTaskGetNumberOfTasks
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2853              		.fpu fpv5-d16
 2855              	uxTaskGetNumberOfTasks:
 2856              	.LFB24:
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2857              		.loc 1 2331 1
 2858              		.cfi_startproc
 2859              		@ args = 0, pretend = 0, frame = 0
 2860              		@ frame_needed = 1, uses_anonymous_args = 0
 2861              		@ link register save eliminated.
 2862 0000 80B4     		push	{r7}
 2863              	.LCFI96:
 2864              		.cfi_def_cfa_offset 4
 2865              		.cfi_offset 7, -4
 2866 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccHYJnM0.s 			page 96


 2867              	.LCFI97:
 2868              		.cfi_def_cfa_register 7
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2869              		.loc 1 2334 9
 2870 0004 034B     		ldr	r3, .L165
 2871 0006 1B68     		ldr	r3, [r3]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2872              		.loc 1 2335 1
 2873 0008 1846     		mov	r0, r3
 2874 000a BD46     		mov	sp, r7
 2875              	.LCFI98:
 2876              		.cfi_def_cfa_register 13
 2877              		@ sp needed
 2878 000c 5DF8047B 		ldr	r7, [sp], #4
 2879              	.LCFI99:
 2880              		.cfi_restore 7
 2881              		.cfi_def_cfa_offset 0
 2882 0010 7047     		bx	lr
 2883              	.L166:
 2884 0012 00BF     		.align	2
 2885              	.L165:
 2886 0014 00000000 		.word	uxCurrentNumberOfTasks
 2887              		.cfi_endproc
 2888              	.LFE24:
 2890              		.section	.text.pcTaskGetName,"ax",%progbits
 2891              		.align	1
 2892              		.global	pcTaskGetName
 2893              		.syntax unified
 2894              		.thumb
 2895              		.thumb_func
 2896              		.fpu fpv5-d16
 2898              	pcTaskGetName:
 2899              	.LFB25:
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2900              		.loc 1 2339 1
 2901              		.cfi_startproc
 2902              		@ args = 0, pretend = 0, frame = 16
 2903              		@ frame_needed = 1, uses_anonymous_args = 0
 2904              		@ link register save eliminated.
 2905 0000 80B4     		push	{r7}
 2906              	.LCFI100:
 2907              		.cfi_def_cfa_offset 4
 2908              		.cfi_offset 7, -4
 2909 0002 85B0     		sub	sp, sp, #20
 2910              	.LCFI101:
 2911              		.cfi_def_cfa_offset 24
 2912 0004 00AF     		add	r7, sp, #0
 2913              	.LCFI102:
 2914              		.cfi_def_cfa_register 7
 2915 0006 7860     		str	r0, [r7, #4]
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 97


2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2916              		.loc 1 2344 10
 2917 0008 7B68     		ldr	r3, [r7, #4]
 2918 000a 002B     		cmp	r3, #0
 2919 000c 02D1     		bne	.L168
 2920              		.loc 1 2344 10 is_stmt 0 discriminator 1
 2921 000e 0E4B     		ldr	r3, .L173
 2922 0010 1B68     		ldr	r3, [r3]
 2923 0012 00E0     		b	.L169
 2924              	.L168:
 2925              		.loc 1 2344 10 discriminator 2
 2926 0014 7B68     		ldr	r3, [r7, #4]
 2927              	.L169:
 2928              		.loc 1 2344 8 is_stmt 1 discriminator 4
 2929 0016 FB60     		str	r3, [r7, #12]
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2930              		.loc 1 2345 2 discriminator 4
 2931 0018 FB68     		ldr	r3, [r7, #12]
 2932 001a 002B     		cmp	r3, #0
 2933 001c 0CD1     		bne	.L170
 2934              	.LBB150:
 2935              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2936              		.loc 2 195 2
 2937              		.syntax unified
 2938              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2939 001e 4FF05003 			mov r3, #80												
 2940 0022 72B6     		cpsid i													
 2941 0024 83F31188 		msr basepri, r3											
 2942 0028 BFF36F8F 		isb														
 2943 002c BFF34F8F 		dsb														
 2944 0030 62B6     		cpsie i													
 2945              	
 2946              	@ 0 "" 2
 2947              		.thumb
 2948              		.syntax unified
 2949 0032 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2950              		.loc 2 205 1
 2951 0034 00BF     		nop
 2952              	.L171:
 2953              	.LBE151:
 2954              	.LBE150:
 2955              		.loc 1 2345 2 discriminator 1
 2956 0036 FEE7     		b	.L171
 2957              	.L170:
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2958              		.loc 1 2346 9
 2959 0038 FB68     		ldr	r3, [r7, #12]
 2960 003a 3433     		adds	r3, r3, #52
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2961              		.loc 1 2347 1
 2962 003c 1846     		mov	r0, r3
 2963 003e 1437     		adds	r7, r7, #20
 2964              	.LCFI103:
ARM GAS  /tmp/ccHYJnM0.s 			page 98


 2965              		.cfi_def_cfa_offset 4
 2966 0040 BD46     		mov	sp, r7
 2967              	.LCFI104:
 2968              		.cfi_def_cfa_register 13
 2969              		@ sp needed
 2970 0042 5DF8047B 		ldr	r7, [sp], #4
 2971              	.LCFI105:
 2972              		.cfi_restore 7
 2973              		.cfi_def_cfa_offset 0
 2974 0046 7047     		bx	lr
 2975              	.L174:
 2976              		.align	2
 2977              	.L173:
 2978 0048 00000000 		.word	pxCurrentTCB
 2979              		.cfi_endproc
 2980              	.LFE25:
 2982              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2983              		.align	1
 2984              		.global	xTaskIncrementTick
 2985              		.syntax unified
 2986              		.thumb
 2987              		.thumb_func
 2988              		.fpu fpv5-d16
 2990              	xTaskIncrementTick:
 2991              	.LFB26:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
ARM GAS  /tmp/ccHYJnM0.s 			page 99


2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  /tmp/ccHYJnM0.s 			page 100


2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccHYJnM0.s 			page 101


2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 102


2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
ARM GAS  /tmp/ccHYJnM0.s 			page 103


2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 104


2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2992              		.loc 1 2666 1
 2993              		.cfi_startproc
 2994              		@ args = 0, pretend = 0, frame = 24
 2995              		@ frame_needed = 1, uses_anonymous_args = 0
 2996 0000 80B5     		push	{r7, lr}
 2997              	.LCFI106:
 2998              		.cfi_def_cfa_offset 8
 2999              		.cfi_offset 7, -8
 3000              		.cfi_offset 14, -4
 3001 0002 86B0     		sub	sp, sp, #24
 3002              	.LCFI107:
 3003              		.cfi_def_cfa_offset 32
 3004 0004 00AF     		add	r7, sp, #0
 3005              	.LCFI108:
 3006              		.cfi_def_cfa_register 7
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3007              		.loc 1 2669 12
 3008 0006 0023     		movs	r3, #0
 3009 0008 7B61     		str	r3, [r7, #20]
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3010              		.loc 1 2675 27
 3011 000a 4F4B     		ldr	r3, .L189
 3012 000c 1B68     		ldr	r3, [r3]
 3013              		.loc 1 2675 4
 3014 000e 002B     		cmp	r3, #0
 3015 0010 40F08A80 		bne	.L176
 3016              	.LBB152:
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3017              		.loc 1 2679 49
 3018 0014 4D4B     		ldr	r3, .L189+4
 3019 0016 1B68     		ldr	r3, [r3]
 3020              		.loc 1 2679 20
 3021 0018 0133     		adds	r3, r3, #1
 3022 001a 3B61     		str	r3, [r7, #16]
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3023              		.loc 1 2683 14
 3024 001c 4B4A     		ldr	r2, .L189+4
 3025 001e 3B69     		ldr	r3, [r7, #16]
 3026 0020 1360     		str	r3, [r2]
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3027              		.loc 1 2685 5
ARM GAS  /tmp/ccHYJnM0.s 			page 105


 3028 0022 3B69     		ldr	r3, [r7, #16]
 3029 0024 002B     		cmp	r3, #0
 3030 0026 22D1     		bne	.L177
 3031              	.LBB153:
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3032              		.loc 1 2687 4
 3033 0028 494B     		ldr	r3, .L189+8
 3034 002a 1B68     		ldr	r3, [r3]
 3035 002c 1B68     		ldr	r3, [r3]
 3036 002e 002B     		cmp	r3, #0
 3037 0030 0CD0     		beq	.L178
 3038              	.LBB154:
 3039              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3040              		.loc 2 195 2
 3041              		.syntax unified
 3042              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3043 0032 4FF05003 			mov r3, #80												
 3044 0036 72B6     		cpsid i													
 3045 0038 83F31188 		msr basepri, r3											
 3046 003c BFF36F8F 		isb														
 3047 0040 BFF34F8F 		dsb														
 3048 0044 62B6     		cpsie i													
 3049              	
 3050              	@ 0 "" 2
 3051              		.thumb
 3052              		.syntax unified
 3053 0046 3B60     		str	r3, [r7]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3054              		.loc 2 205 1
 3055 0048 00BF     		nop
 3056              	.L179:
 3057              	.LBE155:
 3058              	.LBE154:
 3059              		.loc 1 2687 4 discriminator 1
 3060 004a FEE7     		b	.L179
 3061              	.L178:
 3062              		.loc 1 2687 4 is_stmt 0 discriminator 2
 3063 004c 404B     		ldr	r3, .L189+8
 3064 004e 1B68     		ldr	r3, [r3]
 3065 0050 FB60     		str	r3, [r7, #12]
 3066 0052 404B     		ldr	r3, .L189+12
 3067 0054 1B68     		ldr	r3, [r3]
 3068 0056 3E4A     		ldr	r2, .L189+8
 3069 0058 1360     		str	r3, [r2]
 3070 005a 3E4A     		ldr	r2, .L189+12
 3071 005c FB68     		ldr	r3, [r7, #12]
 3072 005e 1360     		str	r3, [r2]
 3073 0060 3D4B     		ldr	r3, .L189+16
 3074 0062 1B68     		ldr	r3, [r3]
 3075 0064 0133     		adds	r3, r3, #1
 3076 0066 3C4A     		ldr	r2, .L189+16
 3077 0068 1360     		str	r3, [r2]
 3078 006a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3079              	.L177:
 3080              	.LBE153:
ARM GAS  /tmp/ccHYJnM0.s 			page 106


2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3081              		.loc 1 2698 23 is_stmt 1
 3082 006e 3B4B     		ldr	r3, .L189+20
 3083 0070 1B68     		ldr	r3, [r3]
 3084              		.loc 1 2698 5
 3085 0072 3A69     		ldr	r2, [r7, #16]
 3086 0074 9A42     		cmp	r2, r3
 3087 0076 48D3     		bcc	.L180
 3088              	.L185:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3089              		.loc 1 2702 9
 3090 0078 354B     		ldr	r3, .L189+8
 3091 007a 1B68     		ldr	r3, [r3]
 3092 007c 1B68     		ldr	r3, [r3]
 3093              		.loc 1 2702 7
 3094 007e 002B     		cmp	r3, #0
 3095 0080 04D1     		bne	.L181
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3096              		.loc 1 2709 27
 3097 0082 364B     		ldr	r3, .L189+20
 3098 0084 4FF0FF32 		mov	r2, #-1
 3099 0088 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3100              		.loc 1 2710 6
 3101 008a 3EE0     		b	.L180
 3102              	.L181:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3103              		.loc 1 2718 14
 3104 008c 304B     		ldr	r3, .L189+8
 3105 008e 1B68     		ldr	r3, [r3]
 3106 0090 DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/ccHYJnM0.s 			page 107


 3107              		.loc 1 2718 12
 3108 0092 DB68     		ldr	r3, [r3, #12]
 3109 0094 BB60     		str	r3, [r7, #8]
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3110              		.loc 1 2719 17
 3111 0096 BB68     		ldr	r3, [r7, #8]
 3112 0098 5B68     		ldr	r3, [r3, #4]
 3113 009a 7B60     		str	r3, [r7, #4]
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3114              		.loc 1 2721 8
 3115 009c 3A69     		ldr	r2, [r7, #16]
 3116 009e 7B68     		ldr	r3, [r7, #4]
 3117 00a0 9A42     		cmp	r2, r3
 3118 00a2 03D2     		bcs	.L182
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3119              		.loc 1 2728 28
 3120 00a4 2D4A     		ldr	r2, .L189+20
 3121 00a6 7B68     		ldr	r3, [r7, #4]
 3122 00a8 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3123              		.loc 1 2729 7
 3124 00aa 2EE0     		b	.L180
 3125              	.L182:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3126              		.loc 1 2737 15
 3127 00ac BB68     		ldr	r3, [r7, #8]
 3128 00ae 0433     		adds	r3, r3, #4
 3129 00b0 1846     		mov	r0, r3
 3130 00b2 FFF7FEFF 		bl	uxListRemove
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3131              		.loc 1 2741 10
 3132 00b6 BB68     		ldr	r3, [r7, #8]
 3133 00b8 9B6A     		ldr	r3, [r3, #40]
 3134              		.loc 1 2741 8
 3135 00ba 002B     		cmp	r3, #0
 3136 00bc 04D0     		beq	.L183
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3137              		.loc 1 2743 16
 3138 00be BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccHYJnM0.s 			page 108


 3139 00c0 1833     		adds	r3, r3, #24
 3140 00c2 1846     		mov	r0, r3
 3141 00c4 FFF7FEFF 		bl	uxListRemove
 3142              	.L183:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3143              		.loc 1 2752 6
 3144 00c8 BB68     		ldr	r3, [r7, #8]
 3145 00ca DB6A     		ldr	r3, [r3, #44]
 3146 00cc 0122     		movs	r2, #1
 3147 00ce 9A40     		lsls	r2, r2, r3
 3148 00d0 234B     		ldr	r3, .L189+24
 3149 00d2 1B68     		ldr	r3, [r3]
 3150 00d4 1343     		orrs	r3, r3, r2
 3151 00d6 224A     		ldr	r2, .L189+24
 3152 00d8 1360     		str	r3, [r2]
 3153 00da BB68     		ldr	r3, [r7, #8]
 3154 00dc DA6A     		ldr	r2, [r3, #44]
 3155 00de 1346     		mov	r3, r2
 3156 00e0 9B00     		lsls	r3, r3, #2
 3157 00e2 1344     		add	r3, r3, r2
 3158 00e4 9B00     		lsls	r3, r3, #2
 3159 00e6 1F4A     		ldr	r2, .L189+28
 3160 00e8 1A44     		add	r2, r2, r3
 3161 00ea BB68     		ldr	r3, [r7, #8]
 3162 00ec 0433     		adds	r3, r3, #4
 3163 00ee 1946     		mov	r1, r3
 3164 00f0 1046     		mov	r0, r2
 3165 00f2 FFF7FEFF 		bl	vListInsertEnd
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3166              		.loc 1 2762 16
 3167 00f6 BB68     		ldr	r3, [r7, #8]
 3168 00f8 DA6A     		ldr	r2, [r3, #44]
 3169              		.loc 1 2762 44
 3170 00fa 1B4B     		ldr	r3, .L189+32
 3171 00fc 1B68     		ldr	r3, [r3]
 3172 00fe DB6A     		ldr	r3, [r3, #44]
 3173              		.loc 1 2762 9
 3174 0100 9A42     		cmp	r2, r3
 3175 0102 B9D3     		bcc	.L185
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/ccHYJnM0.s 			page 109


2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3176              		.loc 1 2764 24
 3177 0104 0123     		movs	r3, #1
 3178 0106 7B61     		str	r3, [r7, #20]
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3179              		.loc 1 2702 7
 3180 0108 B6E7     		b	.L185
 3181              	.L180:
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3182              		.loc 1 2781 8
 3183 010a 174B     		ldr	r3, .L189+32
 3184 010c 1B68     		ldr	r3, [r3]
 3185 010e DA6A     		ldr	r2, [r3, #44]
 3186 0110 1449     		ldr	r1, .L189+28
 3187 0112 1346     		mov	r3, r2
 3188 0114 9B00     		lsls	r3, r3, #2
 3189 0116 1344     		add	r3, r3, r2
 3190 0118 9B00     		lsls	r3, r3, #2
 3191 011a 0B44     		add	r3, r3, r1
 3192 011c 1B68     		ldr	r3, [r3]
 3193              		.loc 1 2781 6
 3194 011e 012B     		cmp	r3, #1
 3195 0120 07D9     		bls	.L186
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3196              		.loc 1 2783 21
 3197 0122 0123     		movs	r3, #1
 3198 0124 7B61     		str	r3, [r7, #20]
 3199 0126 04E0     		b	.L186
 3200              	.L176:
 3201              	.LBE152:
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccHYJnM0.s 			page 110


2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 3202              		.loc 1 2809 3
 3203 0128 104B     		ldr	r3, .L189+36
 3204 012a 1B68     		ldr	r3, [r3]
 3205 012c 0133     		adds	r3, r3, #1
 3206 012e 0F4A     		ldr	r2, .L189+36
 3207 0130 1360     		str	r3, [r2]
 3208              	.L186:
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 3209              		.loc 1 2822 21
 3210 0132 0F4B     		ldr	r3, .L189+40
 3211 0134 1B68     		ldr	r3, [r3]
 3212              		.loc 1 2822 5
 3213 0136 002B     		cmp	r3, #0
 3214 0138 01D0     		beq	.L187
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 3215              		.loc 1 2824 20
 3216 013a 0123     		movs	r3, #1
 3217 013c 7B61     		str	r3, [r7, #20]
 3218              	.L187:
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
ARM GAS  /tmp/ccHYJnM0.s 			page 111


 3219              		.loc 1 2833 9
 3220 013e 7B69     		ldr	r3, [r7, #20]
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3221              		.loc 1 2834 1
 3222 0140 1846     		mov	r0, r3
 3223 0142 1837     		adds	r7, r7, #24
 3224              	.LCFI109:
 3225              		.cfi_def_cfa_offset 8
 3226 0144 BD46     		mov	sp, r7
 3227              	.LCFI110:
 3228              		.cfi_def_cfa_register 13
 3229              		@ sp needed
 3230 0146 80BD     		pop	{r7, pc}
 3231              	.L190:
 3232              		.align	2
 3233              	.L189:
 3234 0148 00000000 		.word	uxSchedulerSuspended
 3235 014c 00000000 		.word	xTickCount
 3236 0150 00000000 		.word	pxDelayedTaskList
 3237 0154 00000000 		.word	pxOverflowDelayedTaskList
 3238 0158 00000000 		.word	xNumOfOverflows
 3239 015c 00000000 		.word	xNextTaskUnblockTime
 3240 0160 00000000 		.word	uxTopReadyPriority
 3241 0164 00000000 		.word	pxReadyTasksLists
 3242 0168 00000000 		.word	pxCurrentTCB
 3243 016c 00000000 		.word	uxPendedTicks
 3244 0170 00000000 		.word	xYieldPending
 3245              		.cfi_endproc
 3246              	.LFE26:
 3248              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3249              		.align	1
 3250              		.global	vTaskSwitchContext
 3251              		.syntax unified
 3252              		.thumb
 3253              		.thumb_func
 3254              		.fpu fpv5-d16
 3256              	vTaskSwitchContext:
 3257              	.LFB27:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 112


2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccHYJnM0.s 			page 113


2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3258              		.loc 1 2948 1
 3259              		.cfi_startproc
 3260              		@ args = 0, pretend = 0, frame = 24
 3261              		@ frame_needed = 1, uses_anonymous_args = 0
 3262              		@ link register save eliminated.
 3263 0000 80B4     		push	{r7}
 3264              	.LCFI111:
 3265              		.cfi_def_cfa_offset 4
 3266              		.cfi_offset 7, -4
 3267 0002 87B0     		sub	sp, sp, #28
 3268              	.LCFI112:
 3269              		.cfi_def_cfa_offset 32
 3270 0004 00AF     		add	r7, sp, #0
 3271              	.LCFI113:
 3272              		.cfi_def_cfa_register 7
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3273              		.loc 1 2949 27
 3274 0006 284B     		ldr	r3, .L199
 3275 0008 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccHYJnM0.s 			page 114


 3276              		.loc 1 2949 4
 3277 000a 002B     		cmp	r3, #0
 3278 000c 03D0     		beq	.L192
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3279              		.loc 1 2953 17
 3280 000e 274B     		ldr	r3, .L199+4
 3281 0010 0122     		movs	r2, #1
 3282 0012 1A60     		str	r2, [r3]
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
ARM GAS  /tmp/ccHYJnM0.s 			page 115


3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3283              		.loc 1 3017 1
 3284 0014 41E0     		b	.L198
 3285              	.L192:
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3286              		.loc 1 2957 17
 3287 0016 254B     		ldr	r3, .L199+4
 3288 0018 0022     		movs	r2, #0
 3289 001a 1A60     		str	r2, [r3]
 3290              	.LBB156:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3291              		.loc 1 2999 3
 3292 001c 244B     		ldr	r3, .L199+8
 3293 001e 1B68     		ldr	r3, [r3]
 3294 0020 FB60     		str	r3, [r7, #12]
 3295              	.LBB157:
 3296              	.LBB158:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 3297              		.loc 2 134 3
 3298 0022 FB68     		ldr	r3, [r7, #12]
 3299              		.syntax unified
 3300              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3301 0024 B3FA83F3 		clz r3, r3
 3302              	@ 0 "" 2
 3303              		.thumb
 3304              		.syntax unified
 3305 0028 FB72     		strb	r3, [r7, #11]
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 3306              		.loc 2 135 10
 3307 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3308              	.LBE158:
 3309              	.LBE157:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3310              		.loc 1 2999 3
 3311 002c C3F11F03 		rsb	r3, r3, #31
 3312 0030 7B61     		str	r3, [r7, #20]
 3313 0032 2049     		ldr	r1, .L199+12
 3314 0034 7A69     		ldr	r2, [r7, #20]
 3315 0036 1346     		mov	r3, r2
 3316 0038 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccHYJnM0.s 			page 116


 3317 003a 1344     		add	r3, r3, r2
 3318 003c 9B00     		lsls	r3, r3, #2
 3319 003e 0B44     		add	r3, r3, r1
 3320 0040 1B68     		ldr	r3, [r3]
 3321 0042 002B     		cmp	r3, #0
 3322 0044 0CD1     		bne	.L195
 3323              	.LBB159:
 3324              	.LBB160:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3325              		.loc 2 195 2
 3326              		.syntax unified
 3327              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3328 0046 4FF05003 			mov r3, #80												
 3329 004a 72B6     		cpsid i													
 3330 004c 83F31188 		msr basepri, r3											
 3331 0050 BFF36F8F 		isb														
 3332 0054 BFF34F8F 		dsb														
 3333 0058 62B6     		cpsie i													
 3334              	
 3335              	@ 0 "" 2
 3336              		.thumb
 3337              		.syntax unified
 3338 005a 7B60     		str	r3, [r7, #4]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3339              		.loc 2 205 1
 3340 005c 00BF     		nop
 3341              	.L196:
 3342              	.LBE160:
 3343              	.LBE159:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3344              		.loc 1 2999 3 discriminator 1
 3345 005e FEE7     		b	.L196
 3346              	.L195:
 3347              	.LBB161:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3348              		.loc 1 2999 3 is_stmt 0 discriminator 2
 3349 0060 7A69     		ldr	r2, [r7, #20]
 3350 0062 1346     		mov	r3, r2
 3351 0064 9B00     		lsls	r3, r3, #2
 3352 0066 1344     		add	r3, r3, r2
 3353 0068 9B00     		lsls	r3, r3, #2
 3354 006a 124A     		ldr	r2, .L199+12
 3355 006c 1344     		add	r3, r3, r2
 3356 006e 3B61     		str	r3, [r7, #16]
 3357 0070 3B69     		ldr	r3, [r7, #16]
 3358 0072 5B68     		ldr	r3, [r3, #4]
 3359 0074 5A68     		ldr	r2, [r3, #4]
 3360 0076 3B69     		ldr	r3, [r7, #16]
 3361 0078 5A60     		str	r2, [r3, #4]
 3362 007a 3B69     		ldr	r3, [r7, #16]
 3363 007c 5A68     		ldr	r2, [r3, #4]
 3364 007e 3B69     		ldr	r3, [r7, #16]
 3365 0080 0833     		adds	r3, r3, #8
 3366 0082 9A42     		cmp	r2, r3
 3367 0084 04D1     		bne	.L197
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3368              		.loc 1 2999 3 discriminator 3
ARM GAS  /tmp/ccHYJnM0.s 			page 117


 3369 0086 3B69     		ldr	r3, [r7, #16]
 3370 0088 5B68     		ldr	r3, [r3, #4]
 3371 008a 5A68     		ldr	r2, [r3, #4]
 3372 008c 3B69     		ldr	r3, [r7, #16]
 3373 008e 5A60     		str	r2, [r3, #4]
 3374              	.L197:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3375              		.loc 1 2999 3 discriminator 5
 3376 0090 3B69     		ldr	r3, [r7, #16]
 3377 0092 5B68     		ldr	r3, [r3, #4]
 3378 0094 DB68     		ldr	r3, [r3, #12]
 3379 0096 084A     		ldr	r2, .L199+16
 3380 0098 1360     		str	r3, [r2]
 3381              	.L198:
 3382              	.LBE161:
 3383              	.LBE156:
 3384              		.loc 1 3017 1 is_stmt 1
 3385 009a 00BF     		nop
 3386 009c 1C37     		adds	r7, r7, #28
 3387              	.LCFI114:
 3388              		.cfi_def_cfa_offset 4
 3389 009e BD46     		mov	sp, r7
 3390              	.LCFI115:
 3391              		.cfi_def_cfa_register 13
 3392              		@ sp needed
 3393 00a0 5DF8047B 		ldr	r7, [sp], #4
 3394              	.LCFI116:
 3395              		.cfi_restore 7
 3396              		.cfi_def_cfa_offset 0
 3397 00a4 7047     		bx	lr
 3398              	.L200:
 3399 00a6 00BF     		.align	2
 3400              	.L199:
 3401 00a8 00000000 		.word	uxSchedulerSuspended
 3402 00ac 00000000 		.word	xYieldPending
 3403 00b0 00000000 		.word	uxTopReadyPriority
 3404 00b4 00000000 		.word	pxReadyTasksLists
 3405 00b8 00000000 		.word	pxCurrentTCB
 3406              		.cfi_endproc
 3407              	.LFE27:
 3409              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3410              		.align	1
 3411              		.global	vTaskPlaceOnEventList
 3412              		.syntax unified
 3413              		.thumb
 3414              		.thumb_func
 3415              		.fpu fpv5-d16
 3417              	vTaskPlaceOnEventList:
 3418              	.LFB28:
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3419              		.loc 1 3021 1
 3420              		.cfi_startproc
 3421              		@ args = 0, pretend = 0, frame = 16
 3422              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccHYJnM0.s 			page 118


 3423 0000 80B5     		push	{r7, lr}
 3424              	.LCFI117:
 3425              		.cfi_def_cfa_offset 8
 3426              		.cfi_offset 7, -8
 3427              		.cfi_offset 14, -4
 3428 0002 84B0     		sub	sp, sp, #16
 3429              	.LCFI118:
 3430              		.cfi_def_cfa_offset 24
 3431 0004 00AF     		add	r7, sp, #0
 3432              	.LCFI119:
 3433              		.cfi_def_cfa_register 7
 3434 0006 7860     		str	r0, [r7, #4]
 3435 0008 3960     		str	r1, [r7]
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3436              		.loc 1 3022 2
 3437 000a 7B68     		ldr	r3, [r7, #4]
 3438 000c 002B     		cmp	r3, #0
 3439 000e 0CD1     		bne	.L202
 3440              	.LBB162:
 3441              	.LBB163:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3442              		.loc 2 195 2
 3443              		.syntax unified
 3444              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3445 0010 4FF05003 			mov r3, #80												
 3446 0014 72B6     		cpsid i													
 3447 0016 83F31188 		msr basepri, r3											
 3448 001a BFF36F8F 		isb														
 3449 001e BFF34F8F 		dsb														
 3450 0022 62B6     		cpsie i													
 3451              	
 3452              	@ 0 "" 2
 3453              		.thumb
 3454              		.syntax unified
 3455 0024 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3456              		.loc 2 205 1
 3457 0026 00BF     		nop
 3458              	.L203:
 3459              	.LBE163:
 3460              	.LBE162:
 3461              		.loc 1 3022 2 discriminator 1
 3462 0028 FEE7     		b	.L203
 3463              	.L202:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3464              		.loc 1 3031 43
 3465 002a 074B     		ldr	r3, .L204
 3466 002c 1B68     		ldr	r3, [r3]
 3467              		.loc 1 3031 2
ARM GAS  /tmp/ccHYJnM0.s 			page 119


 3468 002e 1833     		adds	r3, r3, #24
 3469 0030 1946     		mov	r1, r3
 3470 0032 7868     		ldr	r0, [r7, #4]
 3471 0034 FFF7FEFF 		bl	vListInsert
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3472              		.loc 1 3033 2
 3473 0038 0121     		movs	r1, #1
 3474 003a 3868     		ldr	r0, [r7]
 3475 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3476              		.loc 1 3034 1
 3477 0040 00BF     		nop
 3478 0042 1037     		adds	r7, r7, #16
 3479              	.LCFI120:
 3480              		.cfi_def_cfa_offset 8
 3481 0044 BD46     		mov	sp, r7
 3482              	.LCFI121:
 3483              		.cfi_def_cfa_register 13
 3484              		@ sp needed
 3485 0046 80BD     		pop	{r7, pc}
 3486              	.L205:
 3487              		.align	2
 3488              	.L204:
 3489 0048 00000000 		.word	pxCurrentTCB
 3490              		.cfi_endproc
 3491              	.LFE28:
 3493              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3494              		.align	1
 3495              		.global	vTaskPlaceOnUnorderedEventList
 3496              		.syntax unified
 3497              		.thumb
 3498              		.thumb_func
 3499              		.fpu fpv5-d16
 3501              	vTaskPlaceOnUnorderedEventList:
 3502              	.LFB29:
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3503              		.loc 1 3038 1
 3504              		.cfi_startproc
 3505              		@ args = 0, pretend = 0, frame = 24
 3506              		@ frame_needed = 1, uses_anonymous_args = 0
 3507 0000 80B5     		push	{r7, lr}
 3508              	.LCFI122:
 3509              		.cfi_def_cfa_offset 8
 3510              		.cfi_offset 7, -8
 3511              		.cfi_offset 14, -4
 3512 0002 86B0     		sub	sp, sp, #24
 3513              	.LCFI123:
 3514              		.cfi_def_cfa_offset 32
 3515 0004 00AF     		add	r7, sp, #0
 3516              	.LCFI124:
 3517              		.cfi_def_cfa_register 7
 3518 0006 F860     		str	r0, [r7, #12]
 3519 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccHYJnM0.s 			page 120


 3520 000a 7A60     		str	r2, [r7, #4]
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3521              		.loc 1 3039 2
 3522 000c FB68     		ldr	r3, [r7, #12]
 3523 000e 002B     		cmp	r3, #0
 3524 0010 0CD1     		bne	.L207
 3525              	.LBB164:
 3526              	.LBB165:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3527              		.loc 2 195 2
 3528              		.syntax unified
 3529              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3530 0012 4FF05003 			mov r3, #80												
 3531 0016 72B6     		cpsid i													
 3532 0018 83F31188 		msr basepri, r3											
 3533 001c BFF36F8F 		isb														
 3534 0020 BFF34F8F 		dsb														
 3535 0024 62B6     		cpsie i													
 3536              	
 3537              	@ 0 "" 2
 3538              		.thumb
 3539              		.syntax unified
 3540 0026 7B61     		str	r3, [r7, #20]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3541              		.loc 2 205 1
 3542 0028 00BF     		nop
 3543              	.L208:
 3544              	.LBE165:
 3545              	.LBE164:
 3546              		.loc 1 3039 2 discriminator 1
 3547 002a FEE7     		b	.L208
 3548              	.L207:
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3549              		.loc 1 3043 2
 3550 002c 124B     		ldr	r3, .L211
 3551 002e 1B68     		ldr	r3, [r3]
 3552 0030 002B     		cmp	r3, #0
 3553 0032 0CD1     		bne	.L209
 3554              	.LBB166:
 3555              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3556              		.loc 2 195 2
 3557              		.syntax unified
 3558              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3559 0034 4FF05003 			mov r3, #80												
 3560 0038 72B6     		cpsid i													
 3561 003a 83F31188 		msr basepri, r3											
 3562 003e BFF36F8F 		isb														
 3563 0042 BFF34F8F 		dsb														
 3564 0046 62B6     		cpsie i													
 3565              	
 3566              	@ 0 "" 2
 3567              		.thumb
 3568              		.syntax unified
ARM GAS  /tmp/ccHYJnM0.s 			page 121


 3569 0048 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3570              		.loc 2 205 1
 3571 004a 00BF     		nop
 3572              	.L210:
 3573              	.LBE167:
 3574              	.LBE166:
 3575              		.loc 1 3043 2 discriminator 2
 3576 004c FEE7     		b	.L210
 3577              	.L209:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3578              		.loc 1 3048 2
 3579 004e 0B4B     		ldr	r3, .L211+4
 3580 0050 1B68     		ldr	r3, [r3]
 3581 0052 BA68     		ldr	r2, [r7, #8]
 3582 0054 42F00042 		orr	r2, r2, #-2147483648
 3583 0058 9A61     		str	r2, [r3, #24]
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3584              		.loc 1 3055 46
 3585 005a 084B     		ldr	r3, .L211+4
 3586 005c 1B68     		ldr	r3, [r3]
 3587              		.loc 1 3055 2
 3588 005e 1833     		adds	r3, r3, #24
 3589 0060 1946     		mov	r1, r3
 3590 0062 F868     		ldr	r0, [r7, #12]
 3591 0064 FFF7FEFF 		bl	vListInsertEnd
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3592              		.loc 1 3057 2
 3593 0068 0121     		movs	r1, #1
 3594 006a 7868     		ldr	r0, [r7, #4]
 3595 006c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3596              		.loc 1 3058 1
 3597 0070 00BF     		nop
 3598 0072 1837     		adds	r7, r7, #24
 3599              	.LCFI125:
 3600              		.cfi_def_cfa_offset 8
 3601 0074 BD46     		mov	sp, r7
 3602              	.LCFI126:
 3603              		.cfi_def_cfa_register 13
 3604              		@ sp needed
 3605 0076 80BD     		pop	{r7, pc}
 3606              	.L212:
 3607              		.align	2
 3608              	.L211:
 3609 0078 00000000 		.word	uxSchedulerSuspended
ARM GAS  /tmp/ccHYJnM0.s 			page 122


 3610 007c 00000000 		.word	pxCurrentTCB
 3611              		.cfi_endproc
 3612              	.LFE29:
 3614              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3615              		.align	1
 3616              		.global	xTaskRemoveFromEventList
 3617              		.syntax unified
 3618              		.thumb
 3619              		.thumb_func
 3620              		.fpu fpv5-d16
 3622              	xTaskRemoveFromEventList:
 3623              	.LFB30:
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3624              		.loc 1 3095 1
 3625              		.cfi_startproc
 3626              		@ args = 0, pretend = 0, frame = 24
 3627              		@ frame_needed = 1, uses_anonymous_args = 0
 3628 0000 80B5     		push	{r7, lr}
 3629              	.LCFI127:
 3630              		.cfi_def_cfa_offset 8
 3631              		.cfi_offset 7, -8
ARM GAS  /tmp/ccHYJnM0.s 			page 123


 3632              		.cfi_offset 14, -4
 3633 0002 86B0     		sub	sp, sp, #24
 3634              	.LCFI128:
 3635              		.cfi_def_cfa_offset 32
 3636 0004 00AF     		add	r7, sp, #0
 3637              	.LCFI129:
 3638              		.cfi_def_cfa_register 7
 3639 0006 7860     		str	r0, [r7, #4]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 3640              		.loc 1 3112 19
 3641 0008 7B68     		ldr	r3, [r7, #4]
 3642 000a DB68     		ldr	r3, [r3, #12]
 3643              		.loc 1 3112 17
 3644 000c DB68     		ldr	r3, [r3, #12]
 3645 000e 3B61     		str	r3, [r7, #16]
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3646              		.loc 1 3113 2
 3647 0010 3B69     		ldr	r3, [r7, #16]
 3648 0012 002B     		cmp	r3, #0
 3649 0014 0CD1     		bne	.L214
 3650              	.LBB168:
 3651              	.LBB169:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3652              		.loc 2 195 2
 3653              		.syntax unified
 3654              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3655 0016 4FF05003 			mov r3, #80												
 3656 001a 72B6     		cpsid i													
 3657 001c 83F31188 		msr basepri, r3											
 3658 0020 BFF36F8F 		isb														
 3659 0024 BFF34F8F 		dsb														
 3660 0028 62B6     		cpsie i													
 3661              	
 3662              	@ 0 "" 2
 3663              		.thumb
 3664              		.syntax unified
 3665 002a FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3666              		.loc 2 205 1
 3667 002c 00BF     		nop
 3668              	.L215:
ARM GAS  /tmp/ccHYJnM0.s 			page 124


 3669              	.LBE169:
 3670              	.LBE168:
 3671              		.loc 1 3113 2 discriminator 1
 3672 002e FEE7     		b	.L215
 3673              	.L214:
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3674              		.loc 1 3114 11
 3675 0030 3B69     		ldr	r3, [r7, #16]
 3676 0032 1833     		adds	r3, r3, #24
 3677 0034 1846     		mov	r0, r3
 3678 0036 FFF7FEFF 		bl	uxListRemove
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3679              		.loc 1 3116 27
 3680 003a 1D4B     		ldr	r3, .L221
 3681 003c 1B68     		ldr	r3, [r3]
 3682              		.loc 1 3116 4
 3683 003e 002B     		cmp	r3, #0
 3684 0040 1CD1     		bne	.L216
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3685              		.loc 1 3118 12
 3686 0042 3B69     		ldr	r3, [r7, #16]
 3687 0044 0433     		adds	r3, r3, #4
 3688 0046 1846     		mov	r0, r3
 3689 0048 FFF7FEFF 		bl	uxListRemove
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3690              		.loc 1 3119 3
 3691 004c 3B69     		ldr	r3, [r7, #16]
 3692 004e DB6A     		ldr	r3, [r3, #44]
 3693 0050 0122     		movs	r2, #1
 3694 0052 9A40     		lsls	r2, r2, r3
 3695 0054 174B     		ldr	r3, .L221+4
 3696 0056 1B68     		ldr	r3, [r3]
 3697 0058 1343     		orrs	r3, r3, r2
 3698 005a 164A     		ldr	r2, .L221+4
 3699 005c 1360     		str	r3, [r2]
 3700 005e 3B69     		ldr	r3, [r7, #16]
 3701 0060 DA6A     		ldr	r2, [r3, #44]
 3702 0062 1346     		mov	r3, r2
 3703 0064 9B00     		lsls	r3, r3, #2
 3704 0066 1344     		add	r3, r3, r2
 3705 0068 9B00     		lsls	r3, r3, #2
 3706 006a 134A     		ldr	r2, .L221+8
 3707 006c 1A44     		add	r2, r2, r3
 3708 006e 3B69     		ldr	r3, [r7, #16]
 3709 0070 0433     		adds	r3, r3, #4
 3710 0072 1946     		mov	r1, r3
 3711 0074 1046     		mov	r0, r2
 3712 0076 FFF7FEFF 		bl	vListInsertEnd
 3713 007a 05E0     		b	.L217
 3714              	.L216:
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
ARM GAS  /tmp/ccHYJnM0.s 			page 125


3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3715              		.loc 1 3139 3
 3716 007c 3B69     		ldr	r3, [r7, #16]
 3717 007e 1833     		adds	r3, r3, #24
 3718 0080 1946     		mov	r1, r3
 3719 0082 0E48     		ldr	r0, .L221+12
 3720 0084 FFF7FEFF 		bl	vListInsertEnd
 3721              	.L217:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3722              		.loc 1 3142 20
 3723 0088 3B69     		ldr	r3, [r7, #16]
 3724 008a DA6A     		ldr	r2, [r3, #44]
 3725              		.loc 1 3142 47
 3726 008c 0C4B     		ldr	r3, .L221+16
 3727 008e 1B68     		ldr	r3, [r3]
 3728 0090 DB6A     		ldr	r3, [r3, #44]
 3729              		.loc 1 3142 4
 3730 0092 9A42     		cmp	r2, r3
 3731 0094 05D9     		bls	.L218
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3732              		.loc 1 3147 11
 3733 0096 0123     		movs	r3, #1
 3734 0098 7B61     		str	r3, [r7, #20]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3735              		.loc 1 3151 17
 3736 009a 0A4B     		ldr	r3, .L221+20
 3737 009c 0122     		movs	r2, #1
 3738 009e 1A60     		str	r2, [r3]
 3739 00a0 01E0     		b	.L219
 3740              	.L218:
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
ARM GAS  /tmp/ccHYJnM0.s 			page 126


 3741              		.loc 1 3155 11
 3742 00a2 0023     		movs	r3, #0
 3743 00a4 7B61     		str	r3, [r7, #20]
 3744              	.L219:
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3745              		.loc 1 3158 9
 3746 00a6 7B69     		ldr	r3, [r7, #20]
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3747              		.loc 1 3159 1
 3748 00a8 1846     		mov	r0, r3
 3749 00aa 1837     		adds	r7, r7, #24
 3750              	.LCFI130:
 3751              		.cfi_def_cfa_offset 8
 3752 00ac BD46     		mov	sp, r7
 3753              	.LCFI131:
 3754              		.cfi_def_cfa_register 13
 3755              		@ sp needed
 3756 00ae 80BD     		pop	{r7, pc}
 3757              	.L222:
 3758              		.align	2
 3759              	.L221:
 3760 00b0 00000000 		.word	uxSchedulerSuspended
 3761 00b4 00000000 		.word	uxTopReadyPriority
 3762 00b8 00000000 		.word	pxReadyTasksLists
 3763 00bc 00000000 		.word	xPendingReadyList
 3764 00c0 00000000 		.word	pxCurrentTCB
 3765 00c4 00000000 		.word	xYieldPending
 3766              		.cfi_endproc
 3767              	.LFE30:
 3769              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3770              		.align	1
 3771              		.global	vTaskRemoveFromUnorderedEventList
 3772              		.syntax unified
 3773              		.thumb
 3774              		.thumb_func
 3775              		.fpu fpv5-d16
 3777              	vTaskRemoveFromUnorderedEventList:
 3778              	.LFB31:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3779              		.loc 1 3163 1
 3780              		.cfi_startproc
 3781              		@ args = 0, pretend = 0, frame = 24
 3782              		@ frame_needed = 1, uses_anonymous_args = 0
 3783 0000 80B5     		push	{r7, lr}
 3784              	.LCFI132:
 3785              		.cfi_def_cfa_offset 8
 3786              		.cfi_offset 7, -8
 3787              		.cfi_offset 14, -4
 3788 0002 86B0     		sub	sp, sp, #24
 3789              	.LCFI133:
 3790              		.cfi_def_cfa_offset 32
 3791 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccHYJnM0.s 			page 127


 3792              	.LCFI134:
 3793              		.cfi_def_cfa_register 7
 3794 0006 7860     		str	r0, [r7, #4]
 3795 0008 3960     		str	r1, [r7]
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3796              		.loc 1 3168 2
 3797 000a 2B4B     		ldr	r3, .L230
 3798 000c 1B68     		ldr	r3, [r3]
 3799 000e 002B     		cmp	r3, #0
 3800 0010 0CD1     		bne	.L224
 3801              	.LBB170:
 3802              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3803              		.loc 2 195 2
 3804              		.syntax unified
 3805              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3806 0012 4FF05003 			mov r3, #80												
 3807 0016 72B6     		cpsid i													
 3808 0018 83F31188 		msr basepri, r3											
 3809 001c BFF36F8F 		isb														
 3810 0020 BFF34F8F 		dsb														
 3811 0024 62B6     		cpsie i													
 3812              	
 3813              	@ 0 "" 2
 3814              		.thumb
 3815              		.syntax unified
 3816 0026 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3817              		.loc 2 205 1
 3818 0028 00BF     		nop
 3819              	.L225:
 3820              	.LBE171:
 3821              	.LBE170:
 3822              		.loc 1 3168 2 discriminator 1
 3823 002a FEE7     		b	.L225
 3824              	.L224:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3825              		.loc 1 3171 2
 3826 002c 3B68     		ldr	r3, [r7]
 3827 002e 43F00042 		orr	r2, r3, #-2147483648
 3828 0032 7B68     		ldr	r3, [r7, #4]
 3829 0034 1A60     		str	r2, [r3]
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 3830              		.loc 1 3175 17
 3831 0036 7B68     		ldr	r3, [r7, #4]
 3832 0038 DB68     		ldr	r3, [r3, #12]
 3833 003a 7B61     		str	r3, [r7, #20]
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  /tmp/ccHYJnM0.s 			page 128


 3834              		.loc 1 3176 2
 3835 003c 7B69     		ldr	r3, [r7, #20]
 3836 003e 002B     		cmp	r3, #0
 3837 0040 0CD1     		bne	.L226
 3838              	.LBB172:
 3839              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3840              		.loc 2 195 2
 3841              		.syntax unified
 3842              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3843 0042 4FF05003 			mov r3, #80												
 3844 0046 72B6     		cpsid i													
 3845 0048 83F31188 		msr basepri, r3											
 3846 004c BFF36F8F 		isb														
 3847 0050 BFF34F8F 		dsb														
 3848 0054 62B6     		cpsie i													
 3849              	
 3850              	@ 0 "" 2
 3851              		.thumb
 3852              		.syntax unified
 3853 0056 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3854              		.loc 2 205 1
 3855 0058 00BF     		nop
 3856              	.L227:
 3857              	.LBE173:
 3858              	.LBE172:
 3859              		.loc 1 3176 2 discriminator 2
 3860 005a FEE7     		b	.L227
 3861              	.L226:
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3862              		.loc 1 3177 11
 3863 005c 7868     		ldr	r0, [r7, #4]
 3864 005e FFF7FEFF 		bl	uxListRemove
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3865              		.loc 1 3182 11
 3866 0062 7B69     		ldr	r3, [r7, #20]
 3867 0064 0433     		adds	r3, r3, #4
 3868 0066 1846     		mov	r0, r3
 3869 0068 FFF7FEFF 		bl	uxListRemove
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3870              		.loc 1 3183 2
 3871 006c 7B69     		ldr	r3, [r7, #20]
 3872 006e DB6A     		ldr	r3, [r3, #44]
 3873 0070 0122     		movs	r2, #1
 3874 0072 9A40     		lsls	r2, r2, r3
 3875 0074 114B     		ldr	r3, .L230+4
 3876 0076 1B68     		ldr	r3, [r3]
 3877 0078 1343     		orrs	r3, r3, r2
 3878 007a 104A     		ldr	r2, .L230+4
 3879 007c 1360     		str	r3, [r2]
 3880 007e 7B69     		ldr	r3, [r7, #20]
 3881 0080 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccHYJnM0.s 			page 129


 3882 0082 1346     		mov	r3, r2
 3883 0084 9B00     		lsls	r3, r3, #2
 3884 0086 1344     		add	r3, r3, r2
 3885 0088 9B00     		lsls	r3, r3, #2
 3886 008a 0D4A     		ldr	r2, .L230+8
 3887 008c 1A44     		add	r2, r2, r3
 3888 008e 7B69     		ldr	r3, [r7, #20]
 3889 0090 0433     		adds	r3, r3, #4
 3890 0092 1946     		mov	r1, r3
 3891 0094 1046     		mov	r0, r2
 3892 0096 FFF7FEFF 		bl	vListInsertEnd
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3893              		.loc 1 3185 20
 3894 009a 7B69     		ldr	r3, [r7, #20]
 3895 009c DA6A     		ldr	r2, [r3, #44]
 3896              		.loc 1 3185 47
 3897 009e 094B     		ldr	r3, .L230+12
 3898 00a0 1B68     		ldr	r3, [r3]
 3899 00a2 DB6A     		ldr	r3, [r3, #44]
 3900              		.loc 1 3185 4
 3901 00a4 9A42     		cmp	r2, r3
 3902 00a6 02D9     		bls	.L229
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3903              		.loc 1 3191 17
 3904 00a8 074B     		ldr	r3, .L230+16
 3905 00aa 0122     		movs	r2, #1
 3906 00ac 1A60     		str	r2, [r3]
 3907              	.L229:
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3908              		.loc 1 3193 1
 3909 00ae 00BF     		nop
 3910 00b0 1837     		adds	r7, r7, #24
 3911              	.LCFI135:
 3912              		.cfi_def_cfa_offset 8
 3913 00b2 BD46     		mov	sp, r7
 3914              	.LCFI136:
 3915              		.cfi_def_cfa_register 13
 3916              		@ sp needed
 3917 00b4 80BD     		pop	{r7, pc}
 3918              	.L231:
 3919 00b6 00BF     		.align	2
 3920              	.L230:
 3921 00b8 00000000 		.word	uxSchedulerSuspended
 3922 00bc 00000000 		.word	uxTopReadyPriority
 3923 00c0 00000000 		.word	pxReadyTasksLists
 3924 00c4 00000000 		.word	pxCurrentTCB
 3925 00c8 00000000 		.word	xYieldPending
 3926              		.cfi_endproc
 3927              	.LFE31:
 3929              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
ARM GAS  /tmp/ccHYJnM0.s 			page 130


 3930              		.align	1
 3931              		.global	vTaskSetTimeOutState
 3932              		.syntax unified
 3933              		.thumb
 3934              		.thumb_func
 3935              		.fpu fpv5-d16
 3937              	vTaskSetTimeOutState:
 3938              	.LFB32:
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3939              		.loc 1 3197 1
 3940              		.cfi_startproc
 3941              		@ args = 0, pretend = 0, frame = 16
 3942              		@ frame_needed = 1, uses_anonymous_args = 0
 3943 0000 80B5     		push	{r7, lr}
 3944              	.LCFI137:
 3945              		.cfi_def_cfa_offset 8
 3946              		.cfi_offset 7, -8
 3947              		.cfi_offset 14, -4
 3948 0002 84B0     		sub	sp, sp, #16
 3949              	.LCFI138:
 3950              		.cfi_def_cfa_offset 24
 3951 0004 00AF     		add	r7, sp, #0
 3952              	.LCFI139:
 3953              		.cfi_def_cfa_register 7
 3954 0006 7860     		str	r0, [r7, #4]
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3955              		.loc 1 3198 2
 3956 0008 7B68     		ldr	r3, [r7, #4]
 3957 000a 002B     		cmp	r3, #0
 3958 000c 0CD1     		bne	.L233
 3959              	.LBB174:
 3960              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3961              		.loc 2 195 2
 3962              		.syntax unified
 3963              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3964 000e 4FF05003 			mov r3, #80												
 3965 0012 72B6     		cpsid i													
 3966 0014 83F31188 		msr basepri, r3											
 3967 0018 BFF36F8F 		isb														
 3968 001c BFF34F8F 		dsb														
 3969 0020 62B6     		cpsie i													
 3970              	
 3971              	@ 0 "" 2
 3972              		.thumb
 3973              		.syntax unified
 3974 0022 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3975              		.loc 2 205 1
 3976 0024 00BF     		nop
 3977              	.L234:
 3978              	.LBE175:
 3979              	.LBE174:
 3980              		.loc 1 3198 2 discriminator 1
ARM GAS  /tmp/ccHYJnM0.s 			page 131


 3981 0026 FEE7     		b	.L234
 3982              	.L233:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3983              		.loc 1 3199 2
 3984 0028 FFF7FEFF 		bl	vPortEnterCritical
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 3985              		.loc 1 3201 29
 3986 002c 064B     		ldr	r3, .L235
 3987 002e 1A68     		ldr	r2, [r3]
 3988 0030 7B68     		ldr	r3, [r7, #4]
 3989 0032 1A60     		str	r2, [r3]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3990              		.loc 1 3202 30
 3991 0034 054B     		ldr	r3, .L235+4
 3992 0036 1A68     		ldr	r2, [r3]
 3993 0038 7B68     		ldr	r3, [r7, #4]
 3994 003a 5A60     		str	r2, [r3, #4]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3995              		.loc 1 3204 2
 3996 003c FFF7FEFF 		bl	vPortExitCritical
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3997              		.loc 1 3205 1
 3998 0040 00BF     		nop
 3999 0042 1037     		adds	r7, r7, #16
 4000              	.LCFI140:
 4001              		.cfi_def_cfa_offset 8
 4002 0044 BD46     		mov	sp, r7
 4003              	.LCFI141:
 4004              		.cfi_def_cfa_register 13
 4005              		@ sp needed
 4006 0046 80BD     		pop	{r7, pc}
 4007              	.L236:
 4008              		.align	2
 4009              	.L235:
 4010 0048 00000000 		.word	xNumOfOverflows
 4011 004c 00000000 		.word	xTickCount
 4012              		.cfi_endproc
 4013              	.LFE32:
 4015              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4016              		.align	1
 4017              		.global	vTaskInternalSetTimeOutState
 4018              		.syntax unified
 4019              		.thumb
 4020              		.thumb_func
 4021              		.fpu fpv5-d16
 4023              	vTaskInternalSetTimeOutState:
 4024              	.LFB33:
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4025              		.loc 1 3209 1
 4026              		.cfi_startproc
 4027              		@ args = 0, pretend = 0, frame = 8
 4028              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccHYJnM0.s 			page 132


 4029              		@ link register save eliminated.
 4030 0000 80B4     		push	{r7}
 4031              	.LCFI142:
 4032              		.cfi_def_cfa_offset 4
 4033              		.cfi_offset 7, -4
 4034 0002 83B0     		sub	sp, sp, #12
 4035              	.LCFI143:
 4036              		.cfi_def_cfa_offset 16
 4037 0004 00AF     		add	r7, sp, #0
 4038              	.LCFI144:
 4039              		.cfi_def_cfa_register 7
 4040 0006 7860     		str	r0, [r7, #4]
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4041              		.loc 1 3211 28
 4042 0008 064B     		ldr	r3, .L238
 4043 000a 1A68     		ldr	r2, [r3]
 4044 000c 7B68     		ldr	r3, [r7, #4]
 4045 000e 1A60     		str	r2, [r3]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4046              		.loc 1 3212 29
 4047 0010 054B     		ldr	r3, .L238+4
 4048 0012 1A68     		ldr	r2, [r3]
 4049 0014 7B68     		ldr	r3, [r7, #4]
 4050 0016 5A60     		str	r2, [r3, #4]
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4051              		.loc 1 3213 1
 4052 0018 00BF     		nop
 4053 001a 0C37     		adds	r7, r7, #12
 4054              	.LCFI145:
 4055              		.cfi_def_cfa_offset 4
 4056 001c BD46     		mov	sp, r7
 4057              	.LCFI146:
 4058              		.cfi_def_cfa_register 13
 4059              		@ sp needed
 4060 001e 5DF8047B 		ldr	r7, [sp], #4
 4061              	.LCFI147:
 4062              		.cfi_restore 7
 4063              		.cfi_def_cfa_offset 0
 4064 0022 7047     		bx	lr
 4065              	.L239:
 4066              		.align	2
 4067              	.L238:
 4068 0024 00000000 		.word	xNumOfOverflows
 4069 0028 00000000 		.word	xTickCount
 4070              		.cfi_endproc
 4071              	.LFE33:
 4073              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4074              		.align	1
 4075              		.global	xTaskCheckForTimeOut
 4076              		.syntax unified
 4077              		.thumb
 4078              		.thumb_func
 4079              		.fpu fpv5-d16
 4081              	xTaskCheckForTimeOut:
 4082              	.LFB34:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccHYJnM0.s 			page 133


3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4083              		.loc 1 3217 1
 4084              		.cfi_startproc
 4085              		@ args = 0, pretend = 0, frame = 32
 4086              		@ frame_needed = 1, uses_anonymous_args = 0
 4087 0000 80B5     		push	{r7, lr}
 4088              	.LCFI148:
 4089              		.cfi_def_cfa_offset 8
 4090              		.cfi_offset 7, -8
 4091              		.cfi_offset 14, -4
 4092 0002 88B0     		sub	sp, sp, #32
 4093              	.LCFI149:
 4094              		.cfi_def_cfa_offset 40
 4095 0004 00AF     		add	r7, sp, #0
 4096              	.LCFI150:
 4097              		.cfi_def_cfa_register 7
 4098 0006 7860     		str	r0, [r7, #4]
 4099 0008 3960     		str	r1, [r7]
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4100              		.loc 1 3220 2
 4101 000a 7B68     		ldr	r3, [r7, #4]
 4102 000c 002B     		cmp	r3, #0
 4103 000e 0CD1     		bne	.L241
 4104              	.LBB176:
 4105              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4106              		.loc 2 195 2
 4107              		.syntax unified
 4108              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4109 0010 4FF05003 			mov r3, #80												
 4110 0014 72B6     		cpsid i													
 4111 0016 83F31188 		msr basepri, r3											
 4112 001a BFF36F8F 		isb														
 4113 001e BFF34F8F 		dsb														
 4114 0022 62B6     		cpsie i													
 4115              	
 4116              	@ 0 "" 2
 4117              		.thumb
 4118              		.syntax unified
 4119 0024 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4120              		.loc 2 205 1
 4121 0026 00BF     		nop
 4122              	.L242:
 4123              	.LBE177:
 4124              	.LBE176:
 4125              		.loc 1 3220 2 discriminator 1
 4126 0028 FEE7     		b	.L242
 4127              	.L241:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4128              		.loc 1 3221 2
 4129 002a 3B68     		ldr	r3, [r7]
 4130 002c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccHYJnM0.s 			page 134


 4131 002e 0CD1     		bne	.L243
 4132              	.LBB178:
 4133              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4134              		.loc 2 195 2
 4135              		.syntax unified
 4136              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4137 0030 4FF05003 			mov r3, #80												
 4138 0034 72B6     		cpsid i													
 4139 0036 83F31188 		msr basepri, r3											
 4140 003a BFF36F8F 		isb														
 4141 003e BFF34F8F 		dsb														
 4142 0042 62B6     		cpsie i													
 4143              	
 4144              	@ 0 "" 2
 4145              		.thumb
 4146              		.syntax unified
 4147 0044 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4148              		.loc 2 205 1
 4149 0046 00BF     		nop
 4150              	.L244:
 4151              	.LBE179:
 4152              	.LBE178:
 4153              		.loc 1 3221 2 discriminator 2
 4154 0048 FEE7     		b	.L244
 4155              	.L243:
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4156              		.loc 1 3223 2
 4157 004a FFF7FEFF 		bl	vPortEnterCritical
 4158              	.LBB180:
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4159              		.loc 1 3226 20
 4160 004e 1D4B     		ldr	r3, .L250
 4161 0050 1B68     		ldr	r3, [r3]
 4162 0052 BB61     		str	r3, [r7, #24]
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4163              		.loc 1 3227 62
 4164 0054 7B68     		ldr	r3, [r7, #4]
 4165 0056 5B68     		ldr	r3, [r3, #4]
 4166              		.loc 1 3227 20
 4167 0058 BA69     		ldr	r2, [r7, #24]
 4168 005a D31A     		subs	r3, r2, r3
 4169 005c 7B61     		str	r3, [r7, #20]
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccHYJnM0.s 			page 135


3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4170              		.loc 1 3241 8
 4171 005e 3B68     		ldr	r3, [r7]
 4172 0060 1B68     		ldr	r3, [r3]
 4173              		.loc 1 3241 6
 4174 0062 B3F1FF3F 		cmp	r3, #-1
 4175 0066 02D1     		bne	.L245
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4176              		.loc 1 3246 13
 4177 0068 0023     		movs	r3, #0
 4178 006a FB61     		str	r3, [r7, #28]
 4179 006c 23E0     		b	.L246
 4180              	.L245:
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4181              		.loc 1 3251 37
 4182 006e 7B68     		ldr	r3, [r7, #4]
 4183 0070 1A68     		ldr	r2, [r3]
 4184              		.loc 1 3251 25
 4185 0072 154B     		ldr	r3, .L250+4
 4186 0074 1B68     		ldr	r3, [r3]
 4187              		.loc 1 3251 5
 4188 0076 9A42     		cmp	r2, r3
 4189 0078 07D0     		beq	.L247
 4190              		.loc 1 3251 89 discriminator 1
 4191 007a 7B68     		ldr	r3, [r7, #4]
 4192 007c 5B68     		ldr	r3, [r3, #4]
 4193              		.loc 1 3251 56 discriminator 1
 4194 007e BA69     		ldr	r2, [r7, #24]
 4195 0080 9A42     		cmp	r2, r3
 4196 0082 02D3     		bcc	.L247
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4197              		.loc 1 3258 12
 4198 0084 0123     		movs	r3, #1
 4199 0086 FB61     		str	r3, [r7, #28]
 4200 0088 15E0     		b	.L246
 4201              	.L247:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4202              		.loc 1 3260 27
 4203 008a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccHYJnM0.s 			page 136


 4204 008c 1B68     		ldr	r3, [r3]
 4205              		.loc 1 3260 10
 4206 008e 7A69     		ldr	r2, [r7, #20]
 4207 0090 9A42     		cmp	r2, r3
 4208 0092 0BD2     		bcs	.L248
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4209              		.loc 1 3263 19
 4210 0094 3B68     		ldr	r3, [r7]
 4211 0096 1A68     		ldr	r2, [r3]
 4212 0098 7B69     		ldr	r3, [r7, #20]
 4213 009a D21A     		subs	r2, r2, r3
 4214 009c 3B68     		ldr	r3, [r7]
 4215 009e 1A60     		str	r2, [r3]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4216              		.loc 1 3264 4
 4217 00a0 7868     		ldr	r0, [r7, #4]
 4218 00a2 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4219              		.loc 1 3265 12
 4220 00a6 0023     		movs	r3, #0
 4221 00a8 FB61     		str	r3, [r7, #28]
 4222 00aa 04E0     		b	.L246
 4223              	.L248:
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4224              		.loc 1 3269 19
 4225 00ac 3B68     		ldr	r3, [r7]
 4226 00ae 0022     		movs	r2, #0
 4227 00b0 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4228              		.loc 1 3270 12
 4229 00b2 0123     		movs	r3, #1
 4230 00b4 FB61     		str	r3, [r7, #28]
 4231              	.L246:
 4232              	.LBE180:
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4233              		.loc 1 3273 2
 4234 00b6 FFF7FEFF 		bl	vPortExitCritical
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4235              		.loc 1 3275 9
 4236 00ba FB69     		ldr	r3, [r7, #28]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4237              		.loc 1 3276 1
 4238 00bc 1846     		mov	r0, r3
 4239 00be 2037     		adds	r7, r7, #32
 4240              	.LCFI151:
 4241              		.cfi_def_cfa_offset 8
 4242 00c0 BD46     		mov	sp, r7
 4243              	.LCFI152:
 4244              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccHYJnM0.s 			page 137


 4245              		@ sp needed
 4246 00c2 80BD     		pop	{r7, pc}
 4247              	.L251:
 4248              		.align	2
 4249              	.L250:
 4250 00c4 00000000 		.word	xTickCount
 4251 00c8 00000000 		.word	xNumOfOverflows
 4252              		.cfi_endproc
 4253              	.LFE34:
 4255              		.section	.text.vTaskMissedYield,"ax",%progbits
 4256              		.align	1
 4257              		.global	vTaskMissedYield
 4258              		.syntax unified
 4259              		.thumb
 4260              		.thumb_func
 4261              		.fpu fpv5-d16
 4263              	vTaskMissedYield:
 4264              	.LFB35:
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4265              		.loc 1 3280 1
 4266              		.cfi_startproc
 4267              		@ args = 0, pretend = 0, frame = 0
 4268              		@ frame_needed = 1, uses_anonymous_args = 0
 4269              		@ link register save eliminated.
 4270 0000 80B4     		push	{r7}
 4271              	.LCFI153:
 4272              		.cfi_def_cfa_offset 4
 4273              		.cfi_offset 7, -4
 4274 0002 00AF     		add	r7, sp, #0
 4275              	.LCFI154:
 4276              		.cfi_def_cfa_register 7
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4277              		.loc 1 3281 16
 4278 0004 034B     		ldr	r3, .L253
 4279 0006 0122     		movs	r2, #1
 4280 0008 1A60     		str	r2, [r3]
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4281              		.loc 1 3282 1
 4282 000a 00BF     		nop
 4283 000c BD46     		mov	sp, r7
 4284              	.LCFI155:
 4285              		.cfi_def_cfa_register 13
 4286              		@ sp needed
 4287 000e 5DF8047B 		ldr	r7, [sp], #4
 4288              	.LCFI156:
 4289              		.cfi_restore 7
 4290              		.cfi_def_cfa_offset 0
 4291 0012 7047     		bx	lr
 4292              	.L254:
 4293              		.align	2
 4294              	.L253:
 4295 0014 00000000 		.word	xYieldPending
 4296              		.cfi_endproc
 4297              	.LFE35:
ARM GAS  /tmp/ccHYJnM0.s 			page 138


 4299              		.section	.text.prvIdleTask,"ax",%progbits
 4300              		.align	1
 4301              		.syntax unified
 4302              		.thumb
 4303              		.thumb_func
 4304              		.fpu fpv5-d16
 4306              	prvIdleTask:
 4307              	.LFB36:
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
ARM GAS  /tmp/ccHYJnM0.s 			page 139


3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4308              		.loc 1 3335 1
 4309              		.cfi_startproc
 4310              		@ args = 0, pretend = 0, frame = 8
 4311              		@ frame_needed = 1, uses_anonymous_args = 0
 4312 0000 80B5     		push	{r7, lr}
 4313              	.LCFI157:
 4314              		.cfi_def_cfa_offset 8
 4315              		.cfi_offset 7, -8
 4316              		.cfi_offset 14, -4
 4317 0002 82B0     		sub	sp, sp, #8
 4318              	.LCFI158:
 4319              		.cfi_def_cfa_offset 16
 4320 0004 00AF     		add	r7, sp, #0
 4321              	.LCFI159:
 4322              		.cfi_def_cfa_register 7
 4323 0006 7860     		str	r0, [r7, #4]
 4324              	.L257:
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4325              		.loc 1 3351 3
 4326 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 140


3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4327              		.loc 1 3374 8
 4328 000c 064B     		ldr	r3, .L258
 4329 000e 1B68     		ldr	r3, [r3]
 4330              		.loc 1 3374 6
 4331 0010 012B     		cmp	r3, #1
 4332 0012 F9D9     		bls	.L257
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 4333              		.loc 1 3376 5
 4334 0014 054B     		ldr	r3, .L258+4
 4335 0016 4FF08052 		mov	r2, #268435456
 4336 001a 1A60     		str	r2, [r3]
 4337              		.syntax unified
 4338              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4339 001c BFF34F8F 		dsb
 4340              	@ 0 "" 2
 4341              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4342 0020 BFF36F8F 		isb
 4343              	@ 0 "" 2
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4344              		.loc 1 3351 3
 4345              		.thumb
 4346              		.syntax unified
 4347 0024 F0E7     		b	.L257
 4348              	.L259:
 4349 0026 00BF     		.align	2
 4350              	.L258:
 4351 0028 00000000 		.word	pxReadyTasksLists
 4352 002c 04ED00E0 		.word	-536810236
 4353              		.cfi_endproc
 4354              	.LFE36:
 4356              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4357              		.align	1
 4358              		.syntax unified
 4359              		.thumb
 4360              		.thumb_func
 4361              		.fpu fpv5-d16
 4363              	prvInitialiseTaskLists:
 4364              	.LFB37:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
ARM GAS  /tmp/ccHYJnM0.s 			page 141


3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
ARM GAS  /tmp/ccHYJnM0.s 			page 142


3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 143


3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4365              		.loc 1 3547 1
 4366              		.cfi_startproc
 4367              		@ args = 0, pretend = 0, frame = 8
 4368              		@ frame_needed = 1, uses_anonymous_args = 0
 4369 0000 80B5     		push	{r7, lr}
 4370              	.LCFI160:
 4371              		.cfi_def_cfa_offset 8
 4372              		.cfi_offset 7, -8
 4373              		.cfi_offset 14, -4
 4374 0002 82B0     		sub	sp, sp, #8
 4375              	.LCFI161:
 4376              		.cfi_def_cfa_offset 16
 4377 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccHYJnM0.s 			page 144


 4378              	.LCFI162:
 4379              		.cfi_def_cfa_register 7
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4380              		.loc 1 3550 18
 4381 0006 0023     		movs	r3, #0
 4382 0008 7B60     		str	r3, [r7, #4]
 4383              		.loc 1 3550 2
 4384 000a 0CE0     		b	.L261
 4385              	.L262:
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4386              		.loc 1 3552 3 discriminator 3
 4387 000c 7A68     		ldr	r2, [r7, #4]
 4388 000e 1346     		mov	r3, r2
 4389 0010 9B00     		lsls	r3, r3, #2
 4390 0012 1344     		add	r3, r3, r2
 4391 0014 9B00     		lsls	r3, r3, #2
 4392 0016 124A     		ldr	r2, .L263
 4393 0018 1344     		add	r3, r3, r2
 4394 001a 1846     		mov	r0, r3
 4395 001c FFF7FEFF 		bl	vListInitialise
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4396              		.loc 1 3550 101 discriminator 3
 4397 0020 7B68     		ldr	r3, [r7, #4]
 4398 0022 0133     		adds	r3, r3, #1
 4399 0024 7B60     		str	r3, [r7, #4]
 4400              	.L261:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4401              		.loc 1 3550 2 discriminator 1
 4402 0026 7B68     		ldr	r3, [r7, #4]
 4403 0028 062B     		cmp	r3, #6
 4404 002a EFD9     		bls	.L262
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4405              		.loc 1 3555 2
 4406 002c 0D48     		ldr	r0, .L263+4
 4407 002e FFF7FEFF 		bl	vListInitialise
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4408              		.loc 1 3556 2
 4409 0032 0D48     		ldr	r0, .L263+8
 4410 0034 FFF7FEFF 		bl	vListInitialise
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4411              		.loc 1 3557 2
 4412 0038 0C48     		ldr	r0, .L263+12
 4413 003a FFF7FEFF 		bl	vListInitialise
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4414              		.loc 1 3561 3
 4415 003e 0C48     		ldr	r0, .L263+16
 4416 0040 FFF7FEFF 		bl	vListInitialise
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
ARM GAS  /tmp/ccHYJnM0.s 			page 145


3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4417              		.loc 1 3567 3
 4418 0044 0B48     		ldr	r0, .L263+20
 4419 0046 FFF7FEFF 		bl	vListInitialise
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4420              		.loc 1 3573 20
 4421 004a 0B4B     		ldr	r3, .L263+24
 4422 004c 054A     		ldr	r2, .L263+4
 4423 004e 1A60     		str	r2, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4424              		.loc 1 3574 28
 4425 0050 0A4B     		ldr	r3, .L263+28
 4426 0052 054A     		ldr	r2, .L263+8
 4427 0054 1A60     		str	r2, [r3]
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4428              		.loc 1 3575 1
 4429 0056 00BF     		nop
 4430 0058 0837     		adds	r7, r7, #8
 4431              	.LCFI163:
 4432              		.cfi_def_cfa_offset 8
 4433 005a BD46     		mov	sp, r7
 4434              	.LCFI164:
 4435              		.cfi_def_cfa_register 13
 4436              		@ sp needed
 4437 005c 80BD     		pop	{r7, pc}
 4438              	.L264:
 4439 005e 00BF     		.align	2
 4440              	.L263:
 4441 0060 00000000 		.word	pxReadyTasksLists
 4442 0064 00000000 		.word	xDelayedTaskList1
 4443 0068 00000000 		.word	xDelayedTaskList2
 4444 006c 00000000 		.word	xPendingReadyList
 4445 0070 00000000 		.word	xTasksWaitingTermination
 4446 0074 00000000 		.word	xSuspendedTaskList
 4447 0078 00000000 		.word	pxDelayedTaskList
 4448 007c 00000000 		.word	pxOverflowDelayedTaskList
 4449              		.cfi_endproc
 4450              	.LFE37:
 4452              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4453              		.align	1
 4454              		.syntax unified
 4455              		.thumb
 4456              		.thumb_func
 4457              		.fpu fpv5-d16
 4459              	prvCheckTasksWaitingTermination:
 4460              	.LFB38:
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
ARM GAS  /tmp/ccHYJnM0.s 			page 146


3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4461              		.loc 1 3579 1
 4462              		.cfi_startproc
 4463              		@ args = 0, pretend = 0, frame = 8
 4464              		@ frame_needed = 1, uses_anonymous_args = 0
 4465 0000 80B5     		push	{r7, lr}
 4466              	.LCFI165:
 4467              		.cfi_def_cfa_offset 8
 4468              		.cfi_offset 7, -8
 4469              		.cfi_offset 14, -4
 4470 0002 82B0     		sub	sp, sp, #8
 4471              	.LCFI166:
 4472              		.cfi_def_cfa_offset 16
 4473 0004 00AF     		add	r7, sp, #0
 4474              	.LCFI167:
 4475              		.cfi_def_cfa_register 7
 4476              	.LBB181:
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4477              		.loc 1 3589 8
 4478 0006 19E0     		b	.L266
 4479              	.L267:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 4480              		.loc 1 3591 4
 4481 0008 FFF7FEFF 		bl	vPortEnterCritical
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 4482              		.loc 1 3593 13
 4483 000c 104B     		ldr	r3, .L268
 4484 000e DB68     		ldr	r3, [r3, #12]
 4485              		.loc 1 3593 11
 4486 0010 DB68     		ldr	r3, [r3, #12]
 4487 0012 7B60     		str	r3, [r7, #4]
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4488              		.loc 1 3594 14
 4489 0014 7B68     		ldr	r3, [r7, #4]
 4490 0016 0433     		adds	r3, r3, #4
 4491 0018 1846     		mov	r0, r3
 4492 001a FFF7FEFF 		bl	uxListRemove
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 4493              		.loc 1 3595 5
 4494 001e 0D4B     		ldr	r3, .L268+4
 4495 0020 1B68     		ldr	r3, [r3]
 4496 0022 013B     		subs	r3, r3, #1
 4497 0024 0B4A     		ldr	r2, .L268+4
 4498 0026 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 4499              		.loc 1 3596 5
ARM GAS  /tmp/ccHYJnM0.s 			page 147


 4500 0028 0B4B     		ldr	r3, .L268+8
 4501 002a 1B68     		ldr	r3, [r3]
 4502 002c 013B     		subs	r3, r3, #1
 4503 002e 0A4A     		ldr	r2, .L268+8
 4504 0030 1360     		str	r3, [r2]
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 4505              		.loc 1 3598 4
 4506 0032 FFF7FEFF 		bl	vPortExitCritical
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 4507              		.loc 1 3600 4
 4508 0036 7868     		ldr	r0, [r7, #4]
 4509 0038 FFF7FEFF 		bl	prvDeleteTCB
 4510              	.L266:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4511              		.loc 1 3589 39
 4512 003c 064B     		ldr	r3, .L268+8
 4513 003e 1B68     		ldr	r3, [r3]
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4514              		.loc 1 3589 8
 4515 0040 002B     		cmp	r3, #0
 4516 0042 E1D1     		bne	.L267
 4517              	.LBE181:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4518              		.loc 1 3604 1
 4519 0044 00BF     		nop
 4520 0046 00BF     		nop
 4521 0048 0837     		adds	r7, r7, #8
 4522              	.LCFI168:
 4523              		.cfi_def_cfa_offset 8
 4524 004a BD46     		mov	sp, r7
 4525              	.LCFI169:
 4526              		.cfi_def_cfa_register 13
 4527              		@ sp needed
 4528 004c 80BD     		pop	{r7, pc}
 4529              	.L269:
 4530 004e 00BF     		.align	2
 4531              	.L268:
 4532 0050 00000000 		.word	xTasksWaitingTermination
 4533 0054 00000000 		.word	uxCurrentNumberOfTasks
 4534 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4535              		.cfi_endproc
 4536              	.LFE38:
 4538              		.section	.text.prvDeleteTCB,"ax",%progbits
 4539              		.align	1
 4540              		.syntax unified
 4541              		.thumb
 4542              		.thumb_func
 4543              		.fpu fpv5-d16
 4545              	prvDeleteTCB:
 4546              	.LFB39:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 148


3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/ccHYJnM0.s 			page 149


3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
ARM GAS  /tmp/ccHYJnM0.s 			page 150


3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 151


3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4547              		.loc 1 3827 2
 4548              		.cfi_startproc
 4549              		@ args = 0, pretend = 0, frame = 16
 4550              		@ frame_needed = 1, uses_anonymous_args = 0
 4551 0000 80B5     		push	{r7, lr}
 4552              	.LCFI170:
 4553              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccHYJnM0.s 			page 152


 4554              		.cfi_offset 7, -8
 4555              		.cfi_offset 14, -4
 4556 0002 84B0     		sub	sp, sp, #16
 4557              	.LCFI171:
 4558              		.cfi_def_cfa_offset 24
 4559 0004 00AF     		add	r7, sp, #0
 4560              	.LCFI172:
 4561              		.cfi_def_cfa_register 7
 4562 0006 7860     		str	r0, [r7, #4]
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 4563              		.loc 1 3853 13
 4564 0008 7B68     		ldr	r3, [r7, #4]
 4565 000a 93F85130 		ldrb	r3, [r3, #81]	@ zero_extendqisi2
 4566              		.loc 1 3853 6
 4567 000e 002B     		cmp	r3, #0
 4568 0010 08D1     		bne	.L271
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 4569              		.loc 1 3857 21
 4570 0012 7B68     		ldr	r3, [r7, #4]
 4571 0014 1B6B     		ldr	r3, [r3, #48]
 4572              		.loc 1 3857 5
 4573 0016 1846     		mov	r0, r3
 4574 0018 FFF7FEFF 		bl	vPortFree
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 4575              		.loc 1 3858 5
 4576 001c 7868     		ldr	r0, [r7, #4]
 4577 001e FFF7FEFF 		bl	vPortFree
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
ARM GAS  /tmp/ccHYJnM0.s 			page 153


3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4578              		.loc 1 3875 2
 4579 0022 1AE0     		b	.L275
 4580              	.L271:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4581              		.loc 1 3860 18
 4582 0024 7B68     		ldr	r3, [r7, #4]
 4583 0026 93F85130 		ldrb	r3, [r3, #81]	@ zero_extendqisi2
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4584              		.loc 1 3860 11
 4585 002a 012B     		cmp	r3, #1
 4586 002c 03D1     		bne	.L273
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4587              		.loc 1 3864 5
 4588 002e 7868     		ldr	r0, [r7, #4]
 4589 0030 FFF7FEFF 		bl	vPortFree
 4590              		.loc 1 3875 2
 4591 0034 11E0     		b	.L275
 4592              	.L273:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 4593              		.loc 1 3870 5
 4594 0036 7B68     		ldr	r3, [r7, #4]
 4595 0038 93F85130 		ldrb	r3, [r3, #81]	@ zero_extendqisi2
 4596 003c 022B     		cmp	r3, #2
 4597 003e 0CD0     		beq	.L275
 4598              	.LBB182:
 4599              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4600              		.loc 2 195 2
 4601              		.syntax unified
 4602              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4603 0040 4FF05003 			mov r3, #80												
 4604 0044 72B6     		cpsid i													
 4605 0046 83F31188 		msr basepri, r3											
 4606 004a BFF36F8F 		isb														
 4607 004e BFF34F8F 		dsb														
 4608 0052 62B6     		cpsie i													
 4609              	
 4610              	@ 0 "" 2
 4611              		.thumb
 4612              		.syntax unified
 4613 0054 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 154


 4614              		.loc 2 205 1
 4615 0056 00BF     		nop
 4616              	.L274:
 4617              	.LBE183:
 4618              	.LBE182:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 4619              		.loc 1 3870 5 discriminator 1
 4620 0058 FEE7     		b	.L274
 4621              	.L275:
 4622              		.loc 1 3875 2
 4623 005a 00BF     		nop
 4624 005c 1037     		adds	r7, r7, #16
 4625              	.LCFI173:
 4626              		.cfi_def_cfa_offset 8
 4627 005e BD46     		mov	sp, r7
 4628              	.LCFI174:
 4629              		.cfi_def_cfa_register 13
 4630              		@ sp needed
 4631 0060 80BD     		pop	{r7, pc}
 4632              		.cfi_endproc
 4633              	.LFE39:
 4635              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4636              		.align	1
 4637              		.syntax unified
 4638              		.thumb
 4639              		.thumb_func
 4640              		.fpu fpv5-d16
 4642              	prvResetNextTaskUnblockTime:
 4643              	.LFB40:
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4644              		.loc 1 3881 1
 4645              		.cfi_startproc
 4646              		@ args = 0, pretend = 0, frame = 8
 4647              		@ frame_needed = 1, uses_anonymous_args = 0
 4648              		@ link register save eliminated.
 4649 0000 80B4     		push	{r7}
 4650              	.LCFI175:
 4651              		.cfi_def_cfa_offset 4
 4652              		.cfi_offset 7, -4
 4653 0002 83B0     		sub	sp, sp, #12
 4654              	.LCFI176:
 4655              		.cfi_def_cfa_offset 16
 4656 0004 00AF     		add	r7, sp, #0
 4657              	.LCFI177:
 4658              		.cfi_def_cfa_register 7
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4659              		.loc 1 3884 6
 4660 0006 0C4B     		ldr	r3, .L280
 4661 0008 1B68     		ldr	r3, [r3]
 4662 000a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccHYJnM0.s 			page 155


 4663              		.loc 1 3884 4
 4664 000c 002B     		cmp	r3, #0
 4665 000e 04D1     		bne	.L277
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4666              		.loc 1 3890 24
 4667 0010 0A4B     		ldr	r3, .L280+4
 4668 0012 4FF0FF32 		mov	r2, #-1
 4669 0016 1A60     		str	r2, [r3]
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4670              		.loc 1 3901 1
 4671 0018 08E0     		b	.L279
 4672              	.L277:
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4673              		.loc 1 3898 15
 4674 001a 074B     		ldr	r3, .L280
 4675 001c 1B68     		ldr	r3, [r3]
 4676 001e DB68     		ldr	r3, [r3, #12]
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4677              		.loc 1 3898 13
 4678 0020 DB68     		ldr	r3, [r3, #12]
 4679 0022 7B60     		str	r3, [r7, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4680              		.loc 1 3899 26
 4681 0024 7B68     		ldr	r3, [r7, #4]
 4682 0026 5B68     		ldr	r3, [r3, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4683              		.loc 1 3899 24
 4684 0028 044A     		ldr	r2, .L280+4
 4685 002a 1360     		str	r3, [r2]
 4686              	.L279:
 4687              		.loc 1 3901 1
 4688 002c 00BF     		nop
 4689 002e 0C37     		adds	r7, r7, #12
 4690              	.LCFI178:
 4691              		.cfi_def_cfa_offset 4
 4692 0030 BD46     		mov	sp, r7
 4693              	.LCFI179:
 4694              		.cfi_def_cfa_register 13
 4695              		@ sp needed
 4696 0032 5DF8047B 		ldr	r7, [sp], #4
 4697              	.LCFI180:
 4698              		.cfi_restore 7
ARM GAS  /tmp/ccHYJnM0.s 			page 156


 4699              		.cfi_def_cfa_offset 0
 4700 0036 7047     		bx	lr
 4701              	.L281:
 4702              		.align	2
 4703              	.L280:
 4704 0038 00000000 		.word	pxDelayedTaskList
 4705 003c 00000000 		.word	xNextTaskUnblockTime
 4706              		.cfi_endproc
 4707              	.LFE40:
 4709              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4710              		.align	1
 4711              		.global	xTaskGetCurrentTaskHandle
 4712              		.syntax unified
 4713              		.thumb
 4714              		.thumb_func
 4715              		.fpu fpv5-d16
 4717              	xTaskGetCurrentTaskHandle:
 4718              	.LFB41:
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4719              		.loc 1 3907 2
 4720              		.cfi_startproc
 4721              		@ args = 0, pretend = 0, frame = 8
 4722              		@ frame_needed = 1, uses_anonymous_args = 0
 4723              		@ link register save eliminated.
 4724 0000 80B4     		push	{r7}
 4725              	.LCFI181:
 4726              		.cfi_def_cfa_offset 4
 4727              		.cfi_offset 7, -4
 4728 0002 83B0     		sub	sp, sp, #12
 4729              	.LCFI182:
 4730              		.cfi_def_cfa_offset 16
 4731 0004 00AF     		add	r7, sp, #0
 4732              	.LCFI183:
 4733              		.cfi_def_cfa_register 7
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4734              		.loc 1 3913 11
 4735 0006 054B     		ldr	r3, .L284
 4736 0008 1B68     		ldr	r3, [r3]
 4737 000a 7B60     		str	r3, [r7, #4]
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4738              		.loc 1 3915 10
 4739 000c 7B68     		ldr	r3, [r7, #4]
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4740              		.loc 1 3916 2
 4741 000e 1846     		mov	r0, r3
 4742 0010 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccHYJnM0.s 			page 157


 4743              	.LCFI184:
 4744              		.cfi_def_cfa_offset 4
 4745 0012 BD46     		mov	sp, r7
 4746              	.LCFI185:
 4747              		.cfi_def_cfa_register 13
 4748              		@ sp needed
 4749 0014 5DF8047B 		ldr	r7, [sp], #4
 4750              	.LCFI186:
 4751              		.cfi_restore 7
 4752              		.cfi_def_cfa_offset 0
 4753 0018 7047     		bx	lr
 4754              	.L285:
 4755 001a 00BF     		.align	2
 4756              	.L284:
 4757 001c 00000000 		.word	pxCurrentTCB
 4758              		.cfi_endproc
 4759              	.LFE41:
 4761              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4762              		.align	1
 4763              		.global	xTaskGetSchedulerState
 4764              		.syntax unified
 4765              		.thumb
 4766              		.thumb_func
 4767              		.fpu fpv5-d16
 4769              	xTaskGetSchedulerState:
 4770              	.LFB42:
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4771              		.loc 1 3924 2
 4772              		.cfi_startproc
 4773              		@ args = 0, pretend = 0, frame = 8
 4774              		@ frame_needed = 1, uses_anonymous_args = 0
 4775              		@ link register save eliminated.
 4776 0000 80B4     		push	{r7}
 4777              	.LCFI187:
 4778              		.cfi_def_cfa_offset 4
 4779              		.cfi_offset 7, -4
 4780 0002 83B0     		sub	sp, sp, #12
 4781              	.LCFI188:
 4782              		.cfi_def_cfa_offset 16
 4783 0004 00AF     		add	r7, sp, #0
 4784              	.LCFI189:
 4785              		.cfi_def_cfa_register 7
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4786              		.loc 1 3927 25
 4787 0006 0B4B     		ldr	r3, .L291
 4788 0008 1B68     		ldr	r3, [r3]
 4789              		.loc 1 3927 5
 4790 000a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccHYJnM0.s 			page 158


 4791 000c 02D1     		bne	.L287
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4792              		.loc 1 3929 12
 4793 000e 0123     		movs	r3, #1
 4794 0010 7B60     		str	r3, [r7, #4]
 4795 0012 08E0     		b	.L288
 4796              	.L287:
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4797              		.loc 1 3933 29
 4798 0014 084B     		ldr	r3, .L291+4
 4799 0016 1B68     		ldr	r3, [r3]
 4800              		.loc 1 3933 6
 4801 0018 002B     		cmp	r3, #0
 4802 001a 02D1     		bne	.L289
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4803              		.loc 1 3935 13
 4804 001c 0223     		movs	r3, #2
 4805 001e 7B60     		str	r3, [r7, #4]
 4806 0020 01E0     		b	.L288
 4807              	.L289:
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4808              		.loc 1 3939 13
 4809 0022 0023     		movs	r3, #0
 4810 0024 7B60     		str	r3, [r7, #4]
 4811              	.L288:
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4812              		.loc 1 3943 10
 4813 0026 7B68     		ldr	r3, [r7, #4]
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4814              		.loc 1 3944 2
 4815 0028 1846     		mov	r0, r3
 4816 002a 0C37     		adds	r7, r7, #12
 4817              	.LCFI190:
 4818              		.cfi_def_cfa_offset 4
 4819 002c BD46     		mov	sp, r7
 4820              	.LCFI191:
 4821              		.cfi_def_cfa_register 13
 4822              		@ sp needed
 4823 002e 5DF8047B 		ldr	r7, [sp], #4
 4824              	.LCFI192:
 4825              		.cfi_restore 7
 4826              		.cfi_def_cfa_offset 0
 4827 0032 7047     		bx	lr
 4828              	.L292:
 4829              		.align	2
 4830              	.L291:
ARM GAS  /tmp/ccHYJnM0.s 			page 159


 4831 0034 00000000 		.word	xSchedulerRunning
 4832 0038 00000000 		.word	uxSchedulerSuspended
 4833              		.cfi_endproc
 4834              	.LFE42:
 4836              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4837              		.align	1
 4838              		.global	xTaskPriorityInherit
 4839              		.syntax unified
 4840              		.thumb
 4841              		.thumb_func
 4842              		.fpu fpv5-d16
 4844              	xTaskPriorityInherit:
 4845              	.LFB43:
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4846              		.loc 1 3952 2
 4847              		.cfi_startproc
 4848              		@ args = 0, pretend = 0, frame = 16
 4849              		@ frame_needed = 1, uses_anonymous_args = 0
 4850 0000 80B5     		push	{r7, lr}
 4851              	.LCFI193:
 4852              		.cfi_def_cfa_offset 8
 4853              		.cfi_offset 7, -8
 4854              		.cfi_offset 14, -4
 4855 0002 84B0     		sub	sp, sp, #16
 4856              	.LCFI194:
 4857              		.cfi_def_cfa_offset 24
 4858 0004 00AF     		add	r7, sp, #0
 4859              	.LCFI195:
 4860              		.cfi_def_cfa_register 7
 4861 0006 7860     		str	r0, [r7, #4]
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4862              		.loc 1 3953 16
 4863 0008 7B68     		ldr	r3, [r7, #4]
 4864 000a BB60     		str	r3, [r7, #8]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4865              		.loc 1 3954 13
 4866 000c 0023     		movs	r3, #0
 4867 000e FB60     		str	r3, [r7, #12]
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4868              		.loc 1 3959 5
 4869 0010 7B68     		ldr	r3, [r7, #4]
 4870 0012 002B     		cmp	r3, #0
 4871 0014 69D0     		beq	.L294
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
ARM GAS  /tmp/ccHYJnM0.s 			page 160


3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 4872              		.loc 1 3964 24
 4873 0016 BB68     		ldr	r3, [r7, #8]
 4874 0018 DA6A     		ldr	r2, [r3, #44]
 4875              		.loc 1 3964 51
 4876 001a 364B     		ldr	r3, .L301
 4877 001c 1B68     		ldr	r3, [r3]
 4878 001e DB6A     		ldr	r3, [r3, #44]
 4879              		.loc 1 3964 6
 4880 0020 9A42     		cmp	r2, r3
 4881 0022 59D2     		bcs	.L295
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 4882              		.loc 1 3969 11
 4883 0024 BB68     		ldr	r3, [r7, #8]
 4884 0026 9B69     		ldr	r3, [r3, #24]
 4885              		.loc 1 3969 7
 4886 0028 002B     		cmp	r3, #0
 4887 002a 06DB     		blt	.L296
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 4888              		.loc 1 3971 6
 4889 002c 314B     		ldr	r3, .L301
 4890 002e 1B68     		ldr	r3, [r3]
 4891 0030 DB6A     		ldr	r3, [r3, #44]
 4892 0032 C3F10702 		rsb	r2, r3, #7
 4893 0036 BB68     		ldr	r3, [r7, #8]
 4894 0038 9A61     		str	r2, [r3, #24]
 4895              	.L296:
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 4896              		.loc 1 3980 9
 4897 003a BB68     		ldr	r3, [r7, #8]
 4898 003c 5969     		ldr	r1, [r3, #20]
 4899 003e BB68     		ldr	r3, [r7, #8]
 4900 0040 DA6A     		ldr	r2, [r3, #44]
 4901 0042 1346     		mov	r3, r2
 4902 0044 9B00     		lsls	r3, r3, #2
 4903 0046 1344     		add	r3, r3, r2
 4904 0048 9B00     		lsls	r3, r3, #2
 4905 004a 2B4A     		ldr	r2, .L301+4
 4906 004c 1344     		add	r3, r3, r2
 4907              		.loc 1 3980 7
 4908 004e 9942     		cmp	r1, r3
 4909 0050 3AD1     		bne	.L297
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccHYJnM0.s 			page 161


3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4910              		.loc 1 3982 10
 4911 0052 BB68     		ldr	r3, [r7, #8]
 4912 0054 0433     		adds	r3, r3, #4
 4913 0056 1846     		mov	r0, r3
 4914 0058 FFF7FEFF 		bl	uxListRemove
 4915 005c 0346     		mov	r3, r0
 4916              		.loc 1 3982 8
 4917 005e 002B     		cmp	r3, #0
 4918 0060 15D1     		bne	.L298
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 4919              		.loc 1 3984 7
 4920 0062 BB68     		ldr	r3, [r7, #8]
 4921 0064 DA6A     		ldr	r2, [r3, #44]
 4922 0066 2449     		ldr	r1, .L301+4
 4923 0068 1346     		mov	r3, r2
 4924 006a 9B00     		lsls	r3, r3, #2
 4925 006c 1344     		add	r3, r3, r2
 4926 006e 9B00     		lsls	r3, r3, #2
 4927 0070 0B44     		add	r3, r3, r1
 4928 0072 1B68     		ldr	r3, [r3]
 4929 0074 002B     		cmp	r3, #0
 4930 0076 0AD1     		bne	.L298
 4931              		.loc 1 3984 7 is_stmt 0 discriminator 1
 4932 0078 BB68     		ldr	r3, [r7, #8]
 4933 007a DB6A     		ldr	r3, [r3, #44]
 4934 007c 0122     		movs	r2, #1
 4935 007e 02FA03F3 		lsl	r3, r2, r3
 4936 0082 DA43     		mvns	r2, r3
 4937 0084 1D4B     		ldr	r3, .L301+8
 4938 0086 1B68     		ldr	r3, [r3]
 4939 0088 1340     		ands	r3, r3, r2
 4940 008a 1C4A     		ldr	r2, .L301+8
 4941 008c 1360     		str	r3, [r2]
 4942              	.L298:
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 4943              		.loc 1 3992 49 is_stmt 1
 4944 008e 194B     		ldr	r3, .L301
 4945 0090 1B68     		ldr	r3, [r3]
 4946 0092 DA6A     		ldr	r2, [r3, #44]
 4947              		.loc 1 3992 35
 4948 0094 BB68     		ldr	r3, [r7, #8]
 4949 0096 DA62     		str	r2, [r3, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4950              		.loc 1 3993 6
 4951 0098 BB68     		ldr	r3, [r7, #8]
 4952 009a DB6A     		ldr	r3, [r3, #44]
 4953 009c 0122     		movs	r2, #1
 4954 009e 9A40     		lsls	r2, r2, r3
ARM GAS  /tmp/ccHYJnM0.s 			page 162


 4955 00a0 164B     		ldr	r3, .L301+8
 4956 00a2 1B68     		ldr	r3, [r3]
 4957 00a4 1343     		orrs	r3, r3, r2
 4958 00a6 154A     		ldr	r2, .L301+8
 4959 00a8 1360     		str	r3, [r2]
 4960 00aa BB68     		ldr	r3, [r7, #8]
 4961 00ac DA6A     		ldr	r2, [r3, #44]
 4962 00ae 1346     		mov	r3, r2
 4963 00b0 9B00     		lsls	r3, r3, #2
 4964 00b2 1344     		add	r3, r3, r2
 4965 00b4 9B00     		lsls	r3, r3, #2
 4966 00b6 104A     		ldr	r2, .L301+4
 4967 00b8 1A44     		add	r2, r2, r3
 4968 00ba BB68     		ldr	r3, [r7, #8]
 4969 00bc 0433     		adds	r3, r3, #4
 4970 00be 1946     		mov	r1, r3
 4971 00c0 1046     		mov	r0, r2
 4972 00c2 FFF7FEFF 		bl	vListInsertEnd
 4973 00c6 04E0     		b	.L299
 4974              	.L297:
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 4975              		.loc 1 3998 49
 4976 00c8 0A4B     		ldr	r3, .L301
 4977 00ca 1B68     		ldr	r3, [r3]
 4978 00cc DA6A     		ldr	r2, [r3, #44]
 4979              		.loc 1 3998 35
 4980 00ce BB68     		ldr	r3, [r7, #8]
 4981 00d0 DA62     		str	r2, [r3, #44]
 4982              	.L299:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4983              		.loc 1 4004 13
 4984 00d2 0123     		movs	r3, #1
 4985 00d4 FB60     		str	r3, [r7, #12]
 4986 00d6 08E0     		b	.L294
 4987              	.L295:
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 4988              		.loc 1 4008 25
 4989 00d8 BB68     		ldr	r3, [r7, #8]
 4990 00da 5A6C     		ldr	r2, [r3, #68]
 4991              		.loc 1 4008 56
 4992 00dc 054B     		ldr	r3, .L301
 4993 00de 1B68     		ldr	r3, [r3]
 4994 00e0 DB6A     		ldr	r3, [r3, #44]
 4995              		.loc 1 4008 7
 4996 00e2 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccHYJnM0.s 			page 163


 4997 00e4 01D2     		bcs	.L294
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 4998              		.loc 1 4017 14
 4999 00e6 0123     		movs	r3, #1
 5000 00e8 FB60     		str	r3, [r7, #12]
 5001              	.L294:
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5002              		.loc 1 4030 10
 5003 00ea FB68     		ldr	r3, [r7, #12]
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5004              		.loc 1 4031 2
 5005 00ec 1846     		mov	r0, r3
 5006 00ee 1037     		adds	r7, r7, #16
 5007              	.LCFI196:
 5008              		.cfi_def_cfa_offset 8
 5009 00f0 BD46     		mov	sp, r7
 5010              	.LCFI197:
 5011              		.cfi_def_cfa_register 13
 5012              		@ sp needed
 5013 00f2 80BD     		pop	{r7, pc}
 5014              	.L302:
 5015              		.align	2
 5016              	.L301:
 5017 00f4 00000000 		.word	pxCurrentTCB
 5018 00f8 00000000 		.word	pxReadyTasksLists
 5019 00fc 00000000 		.word	uxTopReadyPriority
 5020              		.cfi_endproc
 5021              	.LFE43:
 5023              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5024              		.align	1
 5025              		.global	xTaskPriorityDisinherit
 5026              		.syntax unified
 5027              		.thumb
 5028              		.thumb_func
 5029              		.fpu fpv5-d16
 5031              	xTaskPriorityDisinherit:
 5032              	.LFB44:
ARM GAS  /tmp/ccHYJnM0.s 			page 164


4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5033              		.loc 1 4039 2
 5034              		.cfi_startproc
 5035              		@ args = 0, pretend = 0, frame = 24
 5036              		@ frame_needed = 1, uses_anonymous_args = 0
 5037 0000 80B5     		push	{r7, lr}
 5038              	.LCFI198:
 5039              		.cfi_def_cfa_offset 8
 5040              		.cfi_offset 7, -8
 5041              		.cfi_offset 14, -4
 5042 0002 86B0     		sub	sp, sp, #24
 5043              	.LCFI199:
 5044              		.cfi_def_cfa_offset 32
 5045 0004 00AF     		add	r7, sp, #0
 5046              	.LCFI200:
 5047              		.cfi_def_cfa_register 7
 5048 0006 7860     		str	r0, [r7, #4]
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5049              		.loc 1 4040 16
 5050 0008 7B68     		ldr	r3, [r7, #4]
 5051 000a 3B61     		str	r3, [r7, #16]
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5052              		.loc 1 4041 13
 5053 000c 0023     		movs	r3, #0
 5054 000e 7B61     		str	r3, [r7, #20]
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5055              		.loc 1 4043 5
 5056 0010 7B68     		ldr	r3, [r7, #4]
 5057 0012 002B     		cmp	r3, #0
 5058 0014 72D0     		beq	.L304
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 5059              		.loc 1 4049 4
 5060 0016 3C4B     		ldr	r3, .L311
 5061 0018 1B68     		ldr	r3, [r3]
 5062 001a 3A69     		ldr	r2, [r7, #16]
 5063 001c 9A42     		cmp	r2, r3
 5064 001e 0CD0     		beq	.L305
 5065              	.LBB184:
 5066              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5067              		.loc 2 195 2
 5068              		.syntax unified
 5069              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5070 0020 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccHYJnM0.s 			page 165


 5071 0024 72B6     		cpsid i													
 5072 0026 83F31188 		msr basepri, r3											
 5073 002a BFF36F8F 		isb														
 5074 002e BFF34F8F 		dsb														
 5075 0032 62B6     		cpsie i													
 5076              	
 5077              	@ 0 "" 2
 5078              		.thumb
 5079              		.syntax unified
 5080 0034 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5081              		.loc 2 205 1
 5082 0036 00BF     		nop
 5083              	.L306:
 5084              	.LBE185:
 5085              	.LBE184:
 5086              		.loc 1 4049 4 discriminator 1
 5087 0038 FEE7     		b	.L306
 5088              	.L305:
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5089              		.loc 1 4050 4
 5090 003a 3B69     		ldr	r3, [r7, #16]
 5091 003c 9B6C     		ldr	r3, [r3, #72]
 5092 003e 002B     		cmp	r3, #0
 5093 0040 0CD1     		bne	.L307
 5094              	.LBB186:
 5095              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5096              		.loc 2 195 2
 5097              		.syntax unified
 5098              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5099 0042 4FF05003 			mov r3, #80												
 5100 0046 72B6     		cpsid i													
 5101 0048 83F31188 		msr basepri, r3											
 5102 004c BFF36F8F 		isb														
 5103 0050 BFF34F8F 		dsb														
 5104 0054 62B6     		cpsie i													
 5105              	
 5106              	@ 0 "" 2
 5107              		.thumb
 5108              		.syntax unified
 5109 0056 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5110              		.loc 2 205 1
 5111 0058 00BF     		nop
 5112              	.L308:
 5113              	.LBE187:
 5114              	.LBE186:
 5115              		.loc 1 4050 4 discriminator 2
 5116 005a FEE7     		b	.L308
 5117              	.L307:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5118              		.loc 1 4051 11
 5119 005c 3B69     		ldr	r3, [r7, #16]
 5120 005e 9B6C     		ldr	r3, [r3, #72]
 5121              		.loc 1 4051 28
 5122 0060 5A1E     		subs	r2, r3, #1
ARM GAS  /tmp/ccHYJnM0.s 			page 166


 5123 0062 3B69     		ldr	r3, [r7, #16]
 5124 0064 9A64     		str	r2, [r3, #72]
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5125              		.loc 1 4055 13
 5126 0066 3B69     		ldr	r3, [r7, #16]
 5127 0068 DA6A     		ldr	r2, [r3, #44]
 5128              		.loc 1 4055 34
 5129 006a 3B69     		ldr	r3, [r7, #16]
 5130 006c 5B6C     		ldr	r3, [r3, #68]
 5131              		.loc 1 4055 6
 5132 006e 9A42     		cmp	r2, r3
 5133 0070 44D0     		beq	.L304
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5134              		.loc 1 4058 14
 5135 0072 3B69     		ldr	r3, [r7, #16]
 5136 0074 9B6C     		ldr	r3, [r3, #72]
 5137              		.loc 1 4058 7
 5138 0076 002B     		cmp	r3, #0
 5139 0078 40D1     		bne	.L304
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5140              		.loc 1 4065 10
 5141 007a 3B69     		ldr	r3, [r7, #16]
 5142 007c 0433     		adds	r3, r3, #4
 5143 007e 1846     		mov	r0, r3
 5144 0080 FFF7FEFF 		bl	uxListRemove
 5145 0084 0346     		mov	r3, r0
 5146              		.loc 1 4065 8
 5147 0086 002B     		cmp	r3, #0
 5148 0088 15D1     		bne	.L309
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5149              		.loc 1 4067 7
 5150 008a 3B69     		ldr	r3, [r7, #16]
 5151 008c DA6A     		ldr	r2, [r3, #44]
 5152 008e 1F49     		ldr	r1, .L311+4
 5153 0090 1346     		mov	r3, r2
 5154 0092 9B00     		lsls	r3, r3, #2
 5155 0094 1344     		add	r3, r3, r2
 5156 0096 9B00     		lsls	r3, r3, #2
 5157 0098 0B44     		add	r3, r3, r1
 5158 009a 1B68     		ldr	r3, [r3]
 5159 009c 002B     		cmp	r3, #0
 5160 009e 0AD1     		bne	.L309
 5161              		.loc 1 4067 7 is_stmt 0 discriminator 1
 5162 00a0 3B69     		ldr	r3, [r7, #16]
 5163 00a2 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccHYJnM0.s 			page 167


 5164 00a4 0122     		movs	r2, #1
 5165 00a6 02FA03F3 		lsl	r3, r2, r3
 5166 00aa DA43     		mvns	r2, r3
 5167 00ac 184B     		ldr	r3, .L311+8
 5168 00ae 1B68     		ldr	r3, [r3]
 5169 00b0 1340     		ands	r3, r3, r2
 5170 00b2 174A     		ldr	r2, .L311+8
 5171 00b4 1360     		str	r3, [r2]
 5172              	.L309:
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5173              		.loc 1 4077 31 is_stmt 1
 5174 00b6 3B69     		ldr	r3, [r7, #16]
 5175 00b8 5A6C     		ldr	r2, [r3, #68]
 5176              		.loc 1 4077 24
 5177 00ba 3B69     		ldr	r3, [r7, #16]
 5178 00bc DA62     		str	r2, [r3, #44]
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5179              		.loc 1 4082 6
 5180 00be 3B69     		ldr	r3, [r7, #16]
 5181 00c0 DB6A     		ldr	r3, [r3, #44]
 5182 00c2 C3F10702 		rsb	r2, r3, #7
 5183 00c6 3B69     		ldr	r3, [r7, #16]
 5184 00c8 9A61     		str	r2, [r3, #24]
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5185              		.loc 1 4083 6
 5186 00ca 3B69     		ldr	r3, [r7, #16]
 5187 00cc DB6A     		ldr	r3, [r3, #44]
 5188 00ce 0122     		movs	r2, #1
 5189 00d0 9A40     		lsls	r2, r2, r3
 5190 00d2 0F4B     		ldr	r3, .L311+8
 5191 00d4 1B68     		ldr	r3, [r3]
 5192 00d6 1343     		orrs	r3, r3, r2
 5193 00d8 0D4A     		ldr	r2, .L311+8
 5194 00da 1360     		str	r3, [r2]
 5195 00dc 3B69     		ldr	r3, [r7, #16]
 5196 00de DA6A     		ldr	r2, [r3, #44]
 5197 00e0 1346     		mov	r3, r2
 5198 00e2 9B00     		lsls	r3, r3, #2
 5199 00e4 1344     		add	r3, r3, r2
 5200 00e6 9B00     		lsls	r3, r3, #2
 5201 00e8 084A     		ldr	r2, .L311+4
 5202 00ea 1A44     		add	r2, r2, r3
 5203 00ec 3B69     		ldr	r3, [r7, #16]
 5204 00ee 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccHYJnM0.s 			page 168


 5205 00f0 1946     		mov	r1, r3
 5206 00f2 1046     		mov	r0, r2
 5207 00f4 FFF7FEFF 		bl	vListInsertEnd
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 5208              		.loc 1 4093 14
 5209 00f8 0123     		movs	r3, #1
 5210 00fa 7B61     		str	r3, [r7, #20]
 5211              	.L304:
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5212              		.loc 1 4110 10
 5213 00fc 7B69     		ldr	r3, [r7, #20]
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5214              		.loc 1 4111 2
 5215 00fe 1846     		mov	r0, r3
 5216 0100 1837     		adds	r7, r7, #24
 5217              	.LCFI201:
 5218              		.cfi_def_cfa_offset 8
 5219 0102 BD46     		mov	sp, r7
 5220              	.LCFI202:
 5221              		.cfi_def_cfa_register 13
 5222              		@ sp needed
 5223 0104 80BD     		pop	{r7, pc}
 5224              	.L312:
 5225 0106 00BF     		.align	2
 5226              	.L311:
 5227 0108 00000000 		.word	pxCurrentTCB
 5228 010c 00000000 		.word	pxReadyTasksLists
 5229 0110 00000000 		.word	uxTopReadyPriority
 5230              		.cfi_endproc
 5231              	.LFE44:
 5233              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5234              		.align	1
ARM GAS  /tmp/ccHYJnM0.s 			page 169


 5235              		.global	vTaskPriorityDisinheritAfterTimeout
 5236              		.syntax unified
 5237              		.thumb
 5238              		.thumb_func
 5239              		.fpu fpv5-d16
 5241              	vTaskPriorityDisinheritAfterTimeout:
 5242              	.LFB45:
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5243              		.loc 1 4119 2
 5244              		.cfi_startproc
 5245              		@ args = 0, pretend = 0, frame = 32
 5246              		@ frame_needed = 1, uses_anonymous_args = 0
 5247 0000 80B5     		push	{r7, lr}
 5248              	.LCFI203:
 5249              		.cfi_def_cfa_offset 8
 5250              		.cfi_offset 7, -8
 5251              		.cfi_offset 14, -4
 5252 0002 88B0     		sub	sp, sp, #32
 5253              	.LCFI204:
 5254              		.cfi_def_cfa_offset 40
 5255 0004 00AF     		add	r7, sp, #0
 5256              	.LCFI205:
 5257              		.cfi_def_cfa_register 7
 5258 0006 7860     		str	r0, [r7, #4]
 5259 0008 3960     		str	r1, [r7]
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5260              		.loc 1 4120 16
 5261 000a 7B68     		ldr	r3, [r7, #4]
 5262 000c BB61     		str	r3, [r7, #24]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5263              		.loc 1 4122 20
 5264 000e 0123     		movs	r3, #1
 5265 0010 7B61     		str	r3, [r7, #20]
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5266              		.loc 1 4124 5
 5267 0012 7B68     		ldr	r3, [r7, #4]
 5268 0014 002B     		cmp	r3, #0
 5269 0016 00F08780 		beq	.L323
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5270              		.loc 1 4128 4
 5271 001a BB69     		ldr	r3, [r7, #24]
 5272 001c 9B6C     		ldr	r3, [r3, #72]
 5273 001e 002B     		cmp	r3, #0
 5274 0020 0CD1     		bne	.L315
 5275              	.LBB188:
ARM GAS  /tmp/ccHYJnM0.s 			page 170


 5276              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5277              		.loc 2 195 2
 5278              		.syntax unified
 5279              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5280 0022 4FF05003 			mov r3, #80												
 5281 0026 72B6     		cpsid i													
 5282 0028 83F31188 		msr basepri, r3											
 5283 002c BFF36F8F 		isb														
 5284 0030 BFF34F8F 		dsb														
 5285 0034 62B6     		cpsie i													
 5286              	
 5287              	@ 0 "" 2
 5288              		.thumb
 5289              		.syntax unified
 5290 0036 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5291              		.loc 2 205 1
 5292 0038 00BF     		nop
 5293              	.L316:
 5294              	.LBE189:
 5295              	.LBE188:
 5296              		.loc 1 4128 4 discriminator 1
 5297 003a FEE7     		b	.L316
 5298              	.L315:
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 5299              		.loc 1 4134 13
 5300 003c BB69     		ldr	r3, [r7, #24]
 5301 003e 5B6C     		ldr	r3, [r3, #68]
 5302              		.loc 1 4134 6
 5303 0040 3A68     		ldr	r2, [r7]
 5304 0042 9A42     		cmp	r2, r3
 5305 0044 02D9     		bls	.L317
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 5306              		.loc 1 4136 21
 5307 0046 3B68     		ldr	r3, [r7]
 5308 0048 FB61     		str	r3, [r7, #28]
 5309 004a 02E0     		b	.L318
 5310              	.L317:
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 5311              		.loc 1 4140 21
 5312 004c BB69     		ldr	r3, [r7, #24]
 5313 004e 5B6C     		ldr	r3, [r3, #68]
 5314 0050 FB61     		str	r3, [r7, #28]
 5315              	.L318:
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
ARM GAS  /tmp/ccHYJnM0.s 			page 171


4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 5316              		.loc 1 4144 13
 5317 0052 BB69     		ldr	r3, [r7, #24]
 5318 0054 DB6A     		ldr	r3, [r3, #44]
 5319              		.loc 1 4144 6
 5320 0056 FA69     		ldr	r2, [r7, #28]
 5321 0058 9A42     		cmp	r2, r3
 5322 005a 65D0     		beq	.L323
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 5323              		.loc 1 4150 14
 5324 005c BB69     		ldr	r3, [r7, #24]
 5325 005e 9B6C     		ldr	r3, [r3, #72]
 5326              		.loc 1 4150 7
 5327 0060 7A69     		ldr	r2, [r7, #20]
 5328 0062 9A42     		cmp	r2, r3
 5329 0064 60D1     		bne	.L323
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 5330              		.loc 1 4155 6
 5331 0066 324B     		ldr	r3, .L324
 5332 0068 1B68     		ldr	r3, [r3]
 5333 006a BA69     		ldr	r2, [r7, #24]
 5334 006c 9A42     		cmp	r2, r3
 5335 006e 0CD1     		bne	.L319
 5336              	.LBB190:
 5337              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5338              		.loc 2 195 2
 5339              		.syntax unified
 5340              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5341 0070 4FF05003 			mov r3, #80												
 5342 0074 72B6     		cpsid i													
 5343 0076 83F31188 		msr basepri, r3											
 5344 007a BFF36F8F 		isb														
 5345 007e BFF34F8F 		dsb														
 5346 0082 62B6     		cpsie i													
 5347              	
 5348              	@ 0 "" 2
 5349              		.thumb
 5350              		.syntax unified
 5351 0084 BB60     		str	r3, [r7, #8]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5352              		.loc 2 205 1
 5353 0086 00BF     		nop
 5354              	.L320:
 5355              	.LBE191:
 5356              	.LBE190:
 5357              		.loc 1 4155 6 discriminator 2
 5358 0088 FEE7     		b	.L320
ARM GAS  /tmp/ccHYJnM0.s 			page 172


 5359              	.L319:
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5360              		.loc 1 4161 28
 5361 008a BB69     		ldr	r3, [r7, #24]
 5362 008c DB6A     		ldr	r3, [r3, #44]
 5363 008e 3B61     		str	r3, [r7, #16]
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 5364              		.loc 1 4162 24
 5365 0090 BB69     		ldr	r3, [r7, #24]
 5366 0092 FA69     		ldr	r2, [r7, #28]
 5367 0094 DA62     		str	r2, [r3, #44]
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 5368              		.loc 1 4166 12
 5369 0096 BB69     		ldr	r3, [r7, #24]
 5370 0098 9B69     		ldr	r3, [r3, #24]
 5371              		.loc 1 4166 8
 5372 009a 002B     		cmp	r3, #0
 5373 009c 04DB     		blt	.L321
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 5374              		.loc 1 4168 7
 5375 009e FB69     		ldr	r3, [r7, #28]
 5376 00a0 C3F10702 		rsb	r2, r3, #7
 5377 00a4 BB69     		ldr	r3, [r7, #24]
 5378 00a6 9A61     		str	r2, [r3, #24]
 5379              	.L321:
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 5380              		.loc 1 4181 10
 5381 00a8 BB69     		ldr	r3, [r7, #24]
 5382 00aa 5969     		ldr	r1, [r3, #20]
 5383 00ac 3A69     		ldr	r2, [r7, #16]
 5384 00ae 1346     		mov	r3, r2
 5385 00b0 9B00     		lsls	r3, r3, #2
 5386 00b2 1344     		add	r3, r3, r2
 5387 00b4 9B00     		lsls	r3, r3, #2
 5388 00b6 1F4A     		ldr	r2, .L324+4
 5389 00b8 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccHYJnM0.s 			page 173


 5390              		.loc 1 4181 8
 5391 00ba 9942     		cmp	r1, r3
 5392 00bc 34D1     		bne	.L323
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5393              		.loc 1 4183 11
 5394 00be BB69     		ldr	r3, [r7, #24]
 5395 00c0 0433     		adds	r3, r3, #4
 5396 00c2 1846     		mov	r0, r3
 5397 00c4 FFF7FEFF 		bl	uxListRemove
 5398 00c8 0346     		mov	r3, r0
 5399              		.loc 1 4183 9
 5400 00ca 002B     		cmp	r3, #0
 5401 00cc 15D1     		bne	.L322
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5402              		.loc 1 4185 8
 5403 00ce BB69     		ldr	r3, [r7, #24]
 5404 00d0 DA6A     		ldr	r2, [r3, #44]
 5405 00d2 1849     		ldr	r1, .L324+4
 5406 00d4 1346     		mov	r3, r2
 5407 00d6 9B00     		lsls	r3, r3, #2
 5408 00d8 1344     		add	r3, r3, r2
 5409 00da 9B00     		lsls	r3, r3, #2
 5410 00dc 0B44     		add	r3, r3, r1
 5411 00de 1B68     		ldr	r3, [r3]
 5412 00e0 002B     		cmp	r3, #0
 5413 00e2 0AD1     		bne	.L322
 5414              		.loc 1 4185 8 is_stmt 0 discriminator 1
 5415 00e4 BB69     		ldr	r3, [r7, #24]
 5416 00e6 DB6A     		ldr	r3, [r3, #44]
 5417 00e8 0122     		movs	r2, #1
 5418 00ea 02FA03F3 		lsl	r3, r2, r3
 5419 00ee DA43     		mvns	r2, r3
 5420 00f0 114B     		ldr	r3, .L324+8
 5421 00f2 1B68     		ldr	r3, [r3]
 5422 00f4 1340     		ands	r3, r3, r2
 5423 00f6 104A     		ldr	r2, .L324+8
 5424 00f8 1360     		str	r3, [r2]
 5425              	.L322:
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 5426              		.loc 1 4192 7 is_stmt 1
 5427 00fa BB69     		ldr	r3, [r7, #24]
 5428 00fc DB6A     		ldr	r3, [r3, #44]
 5429 00fe 0122     		movs	r2, #1
 5430 0100 9A40     		lsls	r2, r2, r3
 5431 0102 0D4B     		ldr	r3, .L324+8
 5432 0104 1B68     		ldr	r3, [r3]
 5433 0106 1343     		orrs	r3, r3, r2
 5434 0108 0B4A     		ldr	r2, .L324+8
 5435 010a 1360     		str	r3, [r2]
ARM GAS  /tmp/ccHYJnM0.s 			page 174


 5436 010c BB69     		ldr	r3, [r7, #24]
 5437 010e DA6A     		ldr	r2, [r3, #44]
 5438 0110 1346     		mov	r3, r2
 5439 0112 9B00     		lsls	r3, r3, #2
 5440 0114 1344     		add	r3, r3, r2
 5441 0116 9B00     		lsls	r3, r3, #2
 5442 0118 064A     		ldr	r2, .L324+4
 5443 011a 1A44     		add	r2, r2, r3
 5444 011c BB69     		ldr	r3, [r7, #24]
 5445 011e 0433     		adds	r3, r3, #4
 5446 0120 1946     		mov	r1, r3
 5447 0122 1046     		mov	r0, r2
 5448 0124 FFF7FEFF 		bl	vListInsertEnd
 5449              	.L323:
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5450              		.loc 1 4213 2
 5451 0128 00BF     		nop
 5452 012a 2037     		adds	r7, r7, #32
 5453              	.LCFI206:
 5454              		.cfi_def_cfa_offset 8
 5455 012c BD46     		mov	sp, r7
 5456              	.LCFI207:
 5457              		.cfi_def_cfa_register 13
 5458              		@ sp needed
 5459 012e 80BD     		pop	{r7, pc}
 5460              	.L325:
 5461              		.align	2
 5462              	.L324:
 5463 0130 00000000 		.word	pxCurrentTCB
 5464 0134 00000000 		.word	pxReadyTasksLists
 5465 0138 00000000 		.word	uxTopReadyPriority
 5466              		.cfi_endproc
 5467              	.LFE45:
 5469              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5470              		.align	1
 5471              		.global	uxTaskResetEventItemValue
 5472              		.syntax unified
ARM GAS  /tmp/ccHYJnM0.s 			page 175


 5473              		.thumb
 5474              		.thumb_func
 5475              		.fpu fpv5-d16
 5477              	uxTaskResetEventItemValue:
 5478              	.LFB46:
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccHYJnM0.s 			page 176


4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
ARM GAS  /tmp/ccHYJnM0.s 			page 177


4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
ARM GAS  /tmp/ccHYJnM0.s 			page 178


4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
ARM GAS  /tmp/ccHYJnM0.s 			page 179


4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
ARM GAS  /tmp/ccHYJnM0.s 			page 180


4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5479              		.loc 1 4534 1
 5480              		.cfi_startproc
 5481              		@ args = 0, pretend = 0, frame = 8
 5482              		@ frame_needed = 1, uses_anonymous_args = 0
 5483              		@ link register save eliminated.
 5484 0000 80B4     		push	{r7}
 5485              	.LCFI208:
 5486              		.cfi_def_cfa_offset 4
 5487              		.cfi_offset 7, -4
 5488 0002 83B0     		sub	sp, sp, #12
 5489              	.LCFI209:
 5490              		.cfi_def_cfa_offset 16
 5491 0004 00AF     		add	r7, sp, #0
 5492              	.LCFI210:
 5493              		.cfi_def_cfa_register 7
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
ARM GAS  /tmp/ccHYJnM0.s 			page 181


4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5494              		.loc 1 4537 13
 5495 0006 094B     		ldr	r3, .L328
 5496 0008 1B68     		ldr	r3, [r3]
 5497              		.loc 1 4537 11
 5498 000a 9B69     		ldr	r3, [r3, #24]
 5499 000c 7B60     		str	r3, [r7, #4]
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 5500              		.loc 1 4541 2
 5501 000e 074B     		ldr	r3, .L328
 5502 0010 1B68     		ldr	r3, [r3]
 5503 0012 DA6A     		ldr	r2, [r3, #44]
 5504 0014 054B     		ldr	r3, .L328
 5505 0016 1B68     		ldr	r3, [r3]
 5506 0018 C2F10702 		rsb	r2, r2, #7
 5507 001c 9A61     		str	r2, [r3, #24]
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 5508              		.loc 1 4543 9
 5509 001e 7B68     		ldr	r3, [r7, #4]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5510              		.loc 1 4544 1
 5511 0020 1846     		mov	r0, r3
 5512 0022 0C37     		adds	r7, r7, #12
 5513              	.LCFI211:
 5514              		.cfi_def_cfa_offset 4
 5515 0024 BD46     		mov	sp, r7
 5516              	.LCFI212:
 5517              		.cfi_def_cfa_register 13
 5518              		@ sp needed
 5519 0026 5DF8047B 		ldr	r7, [sp], #4
 5520              	.LCFI213:
 5521              		.cfi_restore 7
 5522              		.cfi_def_cfa_offset 0
 5523 002a 7047     		bx	lr
 5524              	.L329:
 5525              		.align	2
 5526              	.L328:
 5527 002c 00000000 		.word	pxCurrentTCB
 5528              		.cfi_endproc
 5529              	.LFE46:
 5531              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5532              		.align	1
 5533              		.global	pvTaskIncrementMutexHeldCount
 5534              		.syntax unified
 5535              		.thumb
 5536              		.thumb_func
 5537              		.fpu fpv5-d16
 5539              	pvTaskIncrementMutexHeldCount:
 5540              	.LFB47:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
ARM GAS  /tmp/ccHYJnM0.s 			page 182


4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5541              		.loc 1 4550 2
 5542              		.cfi_startproc
 5543              		@ args = 0, pretend = 0, frame = 0
 5544              		@ frame_needed = 1, uses_anonymous_args = 0
 5545              		@ link register save eliminated.
 5546 0000 80B4     		push	{r7}
 5547              	.LCFI214:
 5548              		.cfi_def_cfa_offset 4
 5549              		.cfi_offset 7, -4
 5550 0002 00AF     		add	r7, sp, #0
 5551              	.LCFI215:
 5552              		.cfi_def_cfa_register 7
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 5553              		.loc 1 4553 20
 5554 0004 074B     		ldr	r3, .L333
 5555 0006 1B68     		ldr	r3, [r3]
 5556              		.loc 1 4553 5
 5557 0008 002B     		cmp	r3, #0
 5558 000a 04D0     		beq	.L331
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5559              		.loc 1 4555 18
 5560 000c 054B     		ldr	r3, .L333
 5561 000e 1B68     		ldr	r3, [r3]
 5562 0010 9A6C     		ldr	r2, [r3, #72]
 5563              		.loc 1 4555 35
 5564 0012 0132     		adds	r2, r2, #1
 5565 0014 9A64     		str	r2, [r3, #72]
 5566              	.L331:
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 5567              		.loc 1 4558 10
 5568 0016 034B     		ldr	r3, .L333
 5569 0018 1B68     		ldr	r3, [r3]
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5570              		.loc 1 4559 2
 5571 001a 1846     		mov	r0, r3
 5572 001c BD46     		mov	sp, r7
 5573              	.LCFI216:
 5574              		.cfi_def_cfa_register 13
 5575              		@ sp needed
 5576 001e 5DF8047B 		ldr	r7, [sp], #4
 5577              	.LCFI217:
 5578              		.cfi_restore 7
 5579              		.cfi_def_cfa_offset 0
 5580 0022 7047     		bx	lr
 5581              	.L334:
 5582              		.align	2
 5583              	.L333:
 5584 0024 00000000 		.word	pxCurrentTCB
 5585              		.cfi_endproc
ARM GAS  /tmp/ccHYJnM0.s 			page 183


 5586              	.LFE47:
 5588              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5589              		.align	1
 5590              		.global	ulTaskNotifyTake
 5591              		.syntax unified
 5592              		.thumb
 5593              		.thumb_func
 5594              		.fpu fpv5-d16
 5596              	ulTaskNotifyTake:
 5597              	.LFB48:
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5598              		.loc 1 4567 2
 5599              		.cfi_startproc
 5600              		@ args = 0, pretend = 0, frame = 16
 5601              		@ frame_needed = 1, uses_anonymous_args = 0
 5602 0000 80B5     		push	{r7, lr}
 5603              	.LCFI218:
 5604              		.cfi_def_cfa_offset 8
 5605              		.cfi_offset 7, -8
 5606              		.cfi_offset 14, -4
 5607 0002 84B0     		sub	sp, sp, #16
 5608              	.LCFI219:
 5609              		.cfi_def_cfa_offset 24
 5610 0004 00AF     		add	r7, sp, #0
 5611              	.LCFI220:
 5612              		.cfi_def_cfa_register 7
 5613 0006 7860     		str	r0, [r7, #4]
 5614 0008 3960     		str	r1, [r7]
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5615              		.loc 1 4570 3
 5616 000a FFF7FEFF 		bl	vPortEnterCritical
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5617              		.loc 1 4573 20
 5618 000e 1E4B     		ldr	r3, .L340
 5619 0010 1B68     		ldr	r3, [r3]
 5620 0012 DB6C     		ldr	r3, [r3, #76]
 5621              		.loc 1 4573 6
 5622 0014 002B     		cmp	r3, #0
 5623 0016 13D1     		bne	.L336
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5624              		.loc 1 4576 17
 5625 0018 1B4B     		ldr	r3, .L340
 5626 001a 1B68     		ldr	r3, [r3]
 5627              		.loc 1 4576 33
ARM GAS  /tmp/ccHYJnM0.s 			page 184


 5628 001c 0122     		movs	r2, #1
 5629 001e 83F85020 		strb	r2, [r3, #80]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5630              		.loc 1 4578 7
 5631 0022 3B68     		ldr	r3, [r7]
 5632 0024 002B     		cmp	r3, #0
 5633 0026 0BD0     		beq	.L336
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5634              		.loc 1 4580 6
 5635 0028 0121     		movs	r1, #1
 5636 002a 3868     		ldr	r0, [r7]
 5637 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5638              		.loc 1 4587 6
 5639 0030 164B     		ldr	r3, .L340+4
 5640 0032 4FF08052 		mov	r2, #268435456
 5641 0036 1A60     		str	r2, [r3]
 5642              		.syntax unified
 5643              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5644 0038 BFF34F8F 		dsb
 5645              	@ 0 "" 2
 5646              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5647 003c BFF36F8F 		isb
 5648              	@ 0 "" 2
 5649              		.thumb
 5650              		.syntax unified
 5651              	.L336:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5652              		.loc 1 4599 3
 5653 0040 FFF7FEFF 		bl	vPortExitCritical
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5654              		.loc 1 4601 3
 5655 0044 FFF7FEFF 		bl	vPortEnterCritical
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5656              		.loc 1 4604 27
ARM GAS  /tmp/ccHYJnM0.s 			page 185


 5657 0048 0F4B     		ldr	r3, .L340
 5658 004a 1B68     		ldr	r3, [r3]
 5659              		.loc 1 4604 13
 5660 004c DB6C     		ldr	r3, [r3, #76]
 5661 004e FB60     		str	r3, [r7, #12]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 5662              		.loc 1 4606 6
 5663 0050 FB68     		ldr	r3, [r7, #12]
 5664 0052 002B     		cmp	r3, #0
 5665 0054 0CD0     		beq	.L337
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5666              		.loc 1 4608 7
 5667 0056 7B68     		ldr	r3, [r7, #4]
 5668 0058 002B     		cmp	r3, #0
 5669 005a 04D0     		beq	.L338
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5670              		.loc 1 4610 18
 5671 005c 0A4B     		ldr	r3, .L340
 5672 005e 1B68     		ldr	r3, [r3]
 5673              		.loc 1 4610 36
 5674 0060 0022     		movs	r2, #0
 5675 0062 DA64     		str	r2, [r3, #76]
 5676 0064 04E0     		b	.L337
 5677              	.L338:
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 5678              		.loc 1 4614 18
 5679 0066 084B     		ldr	r3, .L340
 5680 0068 1B68     		ldr	r3, [r3]
 5681              		.loc 1 4614 47
 5682 006a FA68     		ldr	r2, [r7, #12]
 5683 006c 013A     		subs	r2, r2, #1
 5684              		.loc 1 4614 36
 5685 006e DA64     		str	r2, [r3, #76]
 5686              	.L337:
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5687              		.loc 1 4622 16
 5688 0070 054B     		ldr	r3, .L340
 5689 0072 1B68     		ldr	r3, [r3]
 5690              		.loc 1 4622 32
 5691 0074 0022     		movs	r2, #0
 5692 0076 83F85020 		strb	r2, [r3, #80]
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5693              		.loc 1 4624 3
ARM GAS  /tmp/ccHYJnM0.s 			page 186


 5694 007a FFF7FEFF 		bl	vPortExitCritical
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 5695              		.loc 1 4626 10
 5696 007e FB68     		ldr	r3, [r7, #12]
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5697              		.loc 1 4627 2
 5698 0080 1846     		mov	r0, r3
 5699 0082 1037     		adds	r7, r7, #16
 5700              	.LCFI221:
 5701              		.cfi_def_cfa_offset 8
 5702 0084 BD46     		mov	sp, r7
 5703              	.LCFI222:
 5704              		.cfi_def_cfa_register 13
 5705              		@ sp needed
 5706 0086 80BD     		pop	{r7, pc}
 5707              	.L341:
 5708              		.align	2
 5709              	.L340:
 5710 0088 00000000 		.word	pxCurrentTCB
 5711 008c 04ED00E0 		.word	-536810236
 5712              		.cfi_endproc
 5713              	.LFE48:
 5715              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5716              		.align	1
 5717              		.global	xTaskNotifyWait
 5718              		.syntax unified
 5719              		.thumb
 5720              		.thumb_func
 5721              		.fpu fpv5-d16
 5723              	xTaskNotifyWait:
 5724              	.LFB49:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5725              		.loc 1 4635 2
 5726              		.cfi_startproc
 5727              		@ args = 0, pretend = 0, frame = 24
 5728              		@ frame_needed = 1, uses_anonymous_args = 0
 5729 0000 80B5     		push	{r7, lr}
 5730              	.LCFI223:
 5731              		.cfi_def_cfa_offset 8
 5732              		.cfi_offset 7, -8
 5733              		.cfi_offset 14, -4
 5734 0002 86B0     		sub	sp, sp, #24
 5735              	.LCFI224:
 5736              		.cfi_def_cfa_offset 32
 5737 0004 00AF     		add	r7, sp, #0
 5738              	.LCFI225:
 5739              		.cfi_def_cfa_register 7
 5740 0006 F860     		str	r0, [r7, #12]
 5741 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccHYJnM0.s 			page 187


 5742 000a 7A60     		str	r2, [r7, #4]
 5743 000c 3B60     		str	r3, [r7]
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5744              		.loc 1 4638 3
 5745 000e FFF7FEFF 		bl	vPortEnterCritical
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5746              		.loc 1 4641 20
 5747 0012 264B     		ldr	r3, .L348
 5748 0014 1B68     		ldr	r3, [r3]
 5749 0016 93F85030 		ldrb	r3, [r3, #80]
 5750 001a DBB2     		uxtb	r3, r3
 5751              		.loc 1 4641 6
 5752 001c 022B     		cmp	r3, #2
 5753 001e 1AD0     		beq	.L343
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5754              		.loc 1 4646 35
 5755 0020 224B     		ldr	r3, .L348
 5756 0022 1B68     		ldr	r3, [r3]
 5757 0024 D96C     		ldr	r1, [r3, #76]
 5758              		.loc 1 4646 38
 5759 0026 FA68     		ldr	r2, [r7, #12]
 5760 0028 D243     		mvns	r2, r2
 5761              		.loc 1 4646 35
 5762 002a 0A40     		ands	r2, r2, r1
 5763 002c DA64     		str	r2, [r3, #76]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5764              		.loc 1 4649 17
 5765 002e 1F4B     		ldr	r3, .L348
 5766 0030 1B68     		ldr	r3, [r3]
 5767              		.loc 1 4649 33
 5768 0032 0122     		movs	r2, #1
 5769 0034 83F85020 		strb	r2, [r3, #80]
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5770              		.loc 1 4651 7
 5771 0038 3B68     		ldr	r3, [r7]
 5772 003a 002B     		cmp	r3, #0
 5773 003c 0BD0     		beq	.L343
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5774              		.loc 1 4653 6
 5775 003e 0121     		movs	r1, #1
 5776 0040 3868     		ldr	r0, [r7]
 5777 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
ARM GAS  /tmp/ccHYJnM0.s 			page 188


4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5778              		.loc 1 4660 6
 5779 0046 1A4B     		ldr	r3, .L348+4
 5780 0048 4FF08052 		mov	r2, #268435456
 5781 004c 1A60     		str	r2, [r3]
 5782              		.syntax unified
 5783              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5784 004e BFF34F8F 		dsb
 5785              	@ 0 "" 2
 5786              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5787 0052 BFF36F8F 		isb
 5788              	@ 0 "" 2
 5789              		.thumb
 5790              		.syntax unified
 5791              	.L343:
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5792              		.loc 1 4672 3
 5793 0056 FFF7FEFF 		bl	vPortExitCritical
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5794              		.loc 1 4674 3
 5795 005a FFF7FEFF 		bl	vPortEnterCritical
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 5796              		.loc 1 4678 6
 5797 005e 7B68     		ldr	r3, [r7, #4]
 5798 0060 002B     		cmp	r3, #0
 5799 0062 04D0     		beq	.L344
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5800              		.loc 1 4682 41
 5801 0064 114B     		ldr	r3, .L348
 5802 0066 1B68     		ldr	r3, [r3]
 5803 0068 DA6C     		ldr	r2, [r3, #76]
 5804              		.loc 1 4682 27
 5805 006a 7B68     		ldr	r3, [r7, #4]
 5806 006c 1A60     		str	r2, [r3]
 5807              	.L344:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccHYJnM0.s 			page 189


4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5808              		.loc 1 4689 20
 5809 006e 0F4B     		ldr	r3, .L348
 5810 0070 1B68     		ldr	r3, [r3]
 5811 0072 93F85030 		ldrb	r3, [r3, #80]
 5812 0076 DBB2     		uxtb	r3, r3
 5813              		.loc 1 4689 6
 5814 0078 022B     		cmp	r3, #2
 5815 007a 02D0     		beq	.L345
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5816              		.loc 1 4692 13
 5817 007c 0023     		movs	r3, #0
 5818 007e 7B61     		str	r3, [r7, #20]
 5819 0080 08E0     		b	.L346
 5820              	.L345:
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5821              		.loc 1 4698 35
 5822 0082 0A4B     		ldr	r3, .L348
 5823 0084 1B68     		ldr	r3, [r3]
 5824 0086 D96C     		ldr	r1, [r3, #76]
 5825              		.loc 1 4698 38
 5826 0088 BA68     		ldr	r2, [r7, #8]
 5827 008a D243     		mvns	r2, r2
 5828              		.loc 1 4698 35
 5829 008c 0A40     		ands	r2, r2, r1
 5830 008e DA64     		str	r2, [r3, #76]
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5831              		.loc 1 4699 13
 5832 0090 0123     		movs	r3, #1
 5833 0092 7B61     		str	r3, [r7, #20]
 5834              	.L346:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5835              		.loc 1 4702 16
 5836 0094 054B     		ldr	r3, .L348
 5837 0096 1B68     		ldr	r3, [r3]
 5838              		.loc 1 4702 32
 5839 0098 0022     		movs	r2, #0
 5840 009a 83F85020 		strb	r2, [r3, #80]
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5841              		.loc 1 4704 3
 5842 009e FFF7FEFF 		bl	vPortExitCritical
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 190


4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5843              		.loc 1 4706 10
 5844 00a2 7B69     		ldr	r3, [r7, #20]
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5845              		.loc 1 4707 2
 5846 00a4 1846     		mov	r0, r3
 5847 00a6 1837     		adds	r7, r7, #24
 5848              	.LCFI226:
 5849              		.cfi_def_cfa_offset 8
 5850 00a8 BD46     		mov	sp, r7
 5851              	.LCFI227:
 5852              		.cfi_def_cfa_register 13
 5853              		@ sp needed
 5854 00aa 80BD     		pop	{r7, pc}
 5855              	.L349:
 5856              		.align	2
 5857              	.L348:
 5858 00ac 00000000 		.word	pxCurrentTCB
 5859 00b0 04ED00E0 		.word	-536810236
 5860              		.cfi_endproc
 5861              	.LFE49:
 5863              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5864              		.align	1
 5865              		.global	xTaskGenericNotify
 5866              		.syntax unified
 5867              		.thumb
 5868              		.thumb_func
 5869              		.fpu fpv5-d16
 5871              	xTaskGenericNotify:
 5872              	.LFB50:
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5873              		.loc 1 4715 2
 5874              		.cfi_startproc
 5875              		@ args = 0, pretend = 0, frame = 40
 5876              		@ frame_needed = 1, uses_anonymous_args = 0
 5877 0000 80B5     		push	{r7, lr}
 5878              	.LCFI228:
 5879              		.cfi_def_cfa_offset 8
 5880              		.cfi_offset 7, -8
 5881              		.cfi_offset 14, -4
 5882 0002 8AB0     		sub	sp, sp, #40
 5883              	.LCFI229:
 5884              		.cfi_def_cfa_offset 48
 5885 0004 00AF     		add	r7, sp, #0
 5886              	.LCFI230:
 5887              		.cfi_def_cfa_register 7
 5888 0006 F860     		str	r0, [r7, #12]
 5889 0008 B960     		str	r1, [r7, #8]
 5890 000a 3B60     		str	r3, [r7]
 5891 000c 1346     		mov	r3, r2
ARM GAS  /tmp/ccHYJnM0.s 			page 191


 5892 000e FB71     		strb	r3, [r7, #7]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5893              		.loc 1 4717 13
 5894 0010 0123     		movs	r3, #1
 5895 0012 7B62     		str	r3, [r7, #36]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5896              		.loc 1 4720 3
 5897 0014 FB68     		ldr	r3, [r7, #12]
 5898 0016 002B     		cmp	r3, #0
 5899 0018 0CD1     		bne	.L351
 5900              	.LBB192:
 5901              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5902              		.loc 2 195 2
 5903              		.syntax unified
 5904              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5905 001a 4FF05003 			mov r3, #80												
 5906 001e 72B6     		cpsid i													
 5907 0020 83F31188 		msr basepri, r3											
 5908 0024 BFF36F8F 		isb														
 5909 0028 BFF34F8F 		dsb														
 5910 002c 62B6     		cpsie i													
 5911              	
 5912              	@ 0 "" 2
 5913              		.thumb
 5914              		.syntax unified
 5915 002e BB61     		str	r3, [r7, #24]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5916              		.loc 2 205 1
 5917 0030 00BF     		nop
 5918              	.L352:
 5919              	.LBE193:
 5920              	.LBE192:
 5921              		.loc 1 4720 3 discriminator 1
 5922 0032 FEE7     		b	.L352
 5923              	.L351:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5924              		.loc 1 4721 9
 5925 0034 FB68     		ldr	r3, [r7, #12]
 5926 0036 3B62     		str	r3, [r7, #32]
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5927              		.loc 1 4723 3
 5928 0038 FFF7FEFF 		bl	vPortEnterCritical
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5929              		.loc 1 4725 6
 5930 003c 3B68     		ldr	r3, [r7]
 5931 003e 002B     		cmp	r3, #0
 5932 0040 03D0     		beq	.L353
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5933              		.loc 1 4727 42
 5934 0042 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccHYJnM0.s 			page 192


 5935 0044 DA6C     		ldr	r2, [r3, #76]
 5936              		.loc 1 4727 35
 5937 0046 3B68     		ldr	r3, [r7]
 5938 0048 1A60     		str	r2, [r3]
 5939              	.L353:
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5940              		.loc 1 4730 26
 5941 004a 3B6A     		ldr	r3, [r7, #32]
 5942 004c 93F85030 		ldrb	r3, [r3, #80]
 5943 0050 FB77     		strb	r3, [r7, #31]
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5944              		.loc 1 4732 25
 5945 0052 3B6A     		ldr	r3, [r7, #32]
 5946 0054 0222     		movs	r2, #2
 5947 0056 83F85020 		strb	r2, [r3, #80]
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5948              		.loc 1 4734 4
 5949 005a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5950 005c 042B     		cmp	r3, #4
 5951 005e 28D8     		bhi	.L354
 5952 0060 01A2     		adr	r2, .L356
 5953 0062 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5954 0066 00BF     		.p2align 2
 5955              	.L356:
 5956 0068 D7000000 		.word	.L370+1
 5957 006c 7D000000 		.word	.L359+1
 5958 0070 8B000000 		.word	.L358+1
 5959 0074 97000000 		.word	.L357+1
 5960 0078 9F000000 		.word	.L355+1
 5961              		.p2align 1
 5962              	.L359:
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5963              		.loc 1 4737 29
 5964 007c 3B6A     		ldr	r3, [r7, #32]
 5965 007e DA6C     		ldr	r2, [r3, #76]
 5966 0080 BB68     		ldr	r3, [r7, #8]
 5967 0082 1A43     		orrs	r2, r2, r3
 5968 0084 3B6A     		ldr	r3, [r7, #32]
 5969 0086 DA64     		str	r2, [r3, #76]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5970              		.loc 1 4738 6
 5971 0088 28E0     		b	.L361
 5972              	.L358:
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5973              		.loc 1 4741 13
 5974 008a 3B6A     		ldr	r3, [r7, #32]
 5975 008c DB6C     		ldr	r3, [r3, #76]
 5976              		.loc 1 4741 32
 5977 008e 5A1C     		adds	r2, r3, #1
ARM GAS  /tmp/ccHYJnM0.s 			page 193


 5978 0090 3B6A     		ldr	r3, [r7, #32]
 5979 0092 DA64     		str	r2, [r3, #76]
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5980              		.loc 1 4742 6
 5981 0094 22E0     		b	.L361
 5982              	.L357:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5983              		.loc 1 4745 29
 5984 0096 3B6A     		ldr	r3, [r7, #32]
 5985 0098 BA68     		ldr	r2, [r7, #8]
 5986 009a DA64     		str	r2, [r3, #76]
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5987              		.loc 1 4746 6
 5988 009c 1EE0     		b	.L361
 5989              	.L355:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5990              		.loc 1 4749 8
 5991 009e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5992 00a0 022B     		cmp	r3, #2
 5993 00a2 03D0     		beq	.L362
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5994              		.loc 1 4751 30
 5995 00a4 3B6A     		ldr	r3, [r7, #32]
 5996 00a6 BA68     		ldr	r2, [r7, #8]
 5997 00a8 DA64     		str	r2, [r3, #76]
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5998              		.loc 1 4758 6
 5999 00aa 17E0     		b	.L361
 6000              	.L362:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6001              		.loc 1 4756 15
 6002 00ac 0023     		movs	r3, #0
 6003 00ae 7B62     		str	r3, [r7, #36]
 6004              		.loc 1 4758 6
 6005 00b0 14E0     		b	.L361
 6006              	.L354:
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
ARM GAS  /tmp/ccHYJnM0.s 			page 194


4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 6007              		.loc 1 4769 6
 6008 00b2 3B6A     		ldr	r3, [r7, #32]
 6009 00b4 DB6C     		ldr	r3, [r3, #76]
 6010 00b6 B3F1FF3F 		cmp	r3, #-1
 6011 00ba 0ED0     		beq	.L371
 6012              	.LBB194:
 6013              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6014              		.loc 2 195 2
 6015              		.syntax unified
 6016              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6017 00bc 4FF05003 			mov r3, #80												
 6018 00c0 72B6     		cpsid i													
 6019 00c2 83F31188 		msr basepri, r3											
 6020 00c6 BFF36F8F 		isb														
 6021 00ca BFF34F8F 		dsb														
 6022 00ce 62B6     		cpsie i													
 6023              	
 6024              	@ 0 "" 2
 6025              		.thumb
 6026              		.syntax unified
 6027 00d0 7B61     		str	r3, [r7, #20]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6028              		.loc 2 205 1
 6029 00d2 00BF     		nop
 6030              	.L365:
 6031              	.LBE195:
 6032              	.LBE194:
 6033              		.loc 1 4769 6 discriminator 2
 6034 00d4 FEE7     		b	.L365
 6035              	.L370:
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6036              		.loc 1 4763 6
 6037 00d6 00BF     		nop
 6038 00d8 00E0     		b	.L361
 6039              	.L371:
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6040              		.loc 1 4771 6
 6041 00da 00BF     		nop
 6042              	.L361:
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6043              		.loc 1 4778 6
 6044 00dc FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6045 00de 012B     		cmp	r3, #1
 6046 00e0 3BD1     		bne	.L366
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6047              		.loc 1 4780 14
 6048 00e2 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccHYJnM0.s 			page 195


 6049 00e4 0433     		adds	r3, r3, #4
 6050 00e6 1846     		mov	r0, r3
 6051 00e8 FFF7FEFF 		bl	uxListRemove
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6052              		.loc 1 4781 5
 6053 00ec 3B6A     		ldr	r3, [r7, #32]
 6054 00ee DB6A     		ldr	r3, [r3, #44]
 6055 00f0 0122     		movs	r2, #1
 6056 00f2 9A40     		lsls	r2, r2, r3
 6057 00f4 1C4B     		ldr	r3, .L372
 6058 00f6 1B68     		ldr	r3, [r3]
 6059 00f8 1343     		orrs	r3, r3, r2
 6060 00fa 1B4A     		ldr	r2, .L372
 6061 00fc 1360     		str	r3, [r2]
 6062 00fe 3B6A     		ldr	r3, [r7, #32]
 6063 0100 DA6A     		ldr	r2, [r3, #44]
 6064 0102 1346     		mov	r3, r2
 6065 0104 9B00     		lsls	r3, r3, #2
 6066 0106 1344     		add	r3, r3, r2
 6067 0108 9B00     		lsls	r3, r3, #2
 6068 010a 184A     		ldr	r2, .L372+4
 6069 010c 1A44     		add	r2, r2, r3
 6070 010e 3B6A     		ldr	r3, [r7, #32]
 6071 0110 0433     		adds	r3, r3, #4
 6072 0112 1946     		mov	r1, r3
 6073 0114 1046     		mov	r0, r2
 6074 0116 FFF7FEFF 		bl	vListInsertEnd
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6075              		.loc 1 4784 5
 6076 011a 3B6A     		ldr	r3, [r7, #32]
 6077 011c 9B6A     		ldr	r3, [r3, #40]
 6078 011e 002B     		cmp	r3, #0
 6079 0120 0CD0     		beq	.L367
 6080              	.LBB196:
 6081              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6082              		.loc 2 195 2
 6083              		.syntax unified
 6084              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6085 0122 4FF05003 			mov r3, #80												
 6086 0126 72B6     		cpsid i													
 6087 0128 83F31188 		msr basepri, r3											
 6088 012c BFF36F8F 		isb														
 6089 0130 BFF34F8F 		dsb														
 6090 0134 62B6     		cpsie i													
 6091              	
 6092              	@ 0 "" 2
 6093              		.thumb
 6094              		.syntax unified
 6095 0136 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6096              		.loc 2 205 1
 6097 0138 00BF     		nop
 6098              	.L368:
 6099              	.LBE197:
ARM GAS  /tmp/ccHYJnM0.s 			page 196


 6100              	.LBE196:
 6101              		.loc 1 4784 5 discriminator 3
 6102 013a FEE7     		b	.L368
 6103              	.L367:
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6104              		.loc 1 4802 14
 6105 013c 3B6A     		ldr	r3, [r7, #32]
 6106 013e DA6A     		ldr	r2, [r3, #44]
 6107              		.loc 1 4802 41
 6108 0140 0B4B     		ldr	r3, .L372+8
 6109 0142 1B68     		ldr	r3, [r3]
 6110 0144 DB6A     		ldr	r3, [r3, #44]
 6111              		.loc 1 4802 7
 6112 0146 9A42     		cmp	r2, r3
 6113 0148 07D9     		bls	.L366
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 6114              		.loc 1 4806 6
 6115 014a 0A4B     		ldr	r3, .L372+12
 6116 014c 4FF08052 		mov	r2, #268435456
 6117 0150 1A60     		str	r2, [r3]
 6118              		.syntax unified
 6119              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6120 0152 BFF34F8F 		dsb
 6121              	@ 0 "" 2
 6122              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6123 0156 BFF36F8F 		isb
 6124              	@ 0 "" 2
 6125              		.thumb
 6126              		.syntax unified
 6127              	.L366:
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccHYJnM0.s 			page 197


4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6128              		.loc 1 4818 3
 6129 015a FFF7FEFF 		bl	vPortExitCritical
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6130              		.loc 1 4820 10
 6131 015e 7B6A     		ldr	r3, [r7, #36]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6132              		.loc 1 4821 2
 6133 0160 1846     		mov	r0, r3
 6134 0162 2837     		adds	r7, r7, #40
 6135              	.LCFI231:
 6136              		.cfi_def_cfa_offset 8
 6137 0164 BD46     		mov	sp, r7
 6138              	.LCFI232:
 6139              		.cfi_def_cfa_register 13
 6140              		@ sp needed
 6141 0166 80BD     		pop	{r7, pc}
 6142              	.L373:
 6143              		.align	2
 6144              	.L372:
 6145 0168 00000000 		.word	uxTopReadyPriority
 6146 016c 00000000 		.word	pxReadyTasksLists
 6147 0170 00000000 		.word	pxCurrentTCB
 6148 0174 04ED00E0 		.word	-536810236
 6149              		.cfi_endproc
 6150              	.LFE50:
 6152              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6153              		.align	1
 6154              		.global	xTaskGenericNotifyFromISR
 6155              		.syntax unified
 6156              		.thumb
 6157              		.thumb_func
 6158              		.fpu fpv5-d16
 6160              	xTaskGenericNotifyFromISR:
 6161              	.LFB51:
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6162              		.loc 1 4829 2
 6163              		.cfi_startproc
 6164              		@ args = 4, pretend = 0, frame = 56
 6165              		@ frame_needed = 1, uses_anonymous_args = 0
 6166 0000 80B5     		push	{r7, lr}
 6167              	.LCFI233:
 6168              		.cfi_def_cfa_offset 8
 6169              		.cfi_offset 7, -8
 6170              		.cfi_offset 14, -4
ARM GAS  /tmp/ccHYJnM0.s 			page 198


 6171 0002 8EB0     		sub	sp, sp, #56
 6172              	.LCFI234:
 6173              		.cfi_def_cfa_offset 64
 6174 0004 00AF     		add	r7, sp, #0
 6175              	.LCFI235:
 6176              		.cfi_def_cfa_register 7
 6177 0006 F860     		str	r0, [r7, #12]
 6178 0008 B960     		str	r1, [r7, #8]
 6179 000a 3B60     		str	r3, [r7]
 6180 000c 1346     		mov	r3, r2
 6181 000e FB71     		strb	r3, [r7, #7]
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6182              		.loc 1 4832 13
 6183 0010 0123     		movs	r3, #1
 6184 0012 7B63     		str	r3, [r7, #52]
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6185              		.loc 1 4835 3
 6186 0014 FB68     		ldr	r3, [r7, #12]
 6187 0016 002B     		cmp	r3, #0
 6188 0018 0CD1     		bne	.L375
 6189              	.LBB198:
 6190              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6191              		.loc 2 195 2
 6192              		.syntax unified
 6193              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6194 001a 4FF05003 			mov r3, #80												
 6195 001e 72B6     		cpsid i													
 6196 0020 83F31188 		msr basepri, r3											
 6197 0024 BFF36F8F 		isb														
 6198 0028 BFF34F8F 		dsb														
 6199 002c 62B6     		cpsie i													
 6200              	
 6201              	@ 0 "" 2
 6202              		.thumb
 6203              		.syntax unified
 6204 002e 7B62     		str	r3, [r7, #36]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6205              		.loc 2 205 1
 6206 0030 00BF     		nop
 6207              	.L376:
 6208              	.LBE199:
 6209              	.LBE198:
 6210              		.loc 1 4835 3 discriminator 1
 6211 0032 FEE7     		b	.L376
 6212              	.L375:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
ARM GAS  /tmp/ccHYJnM0.s 			page 199


4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6213              		.loc 1 4853 3
 6214 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6215              		.loc 1 4855 9
 6216 0038 FB68     		ldr	r3, [r7, #12]
 6217 003a 3B63     		str	r3, [r7, #48]
 6218              	.LBB200:
 6219              	.LBB201:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6220              		.loc 2 213 2
 6221              		.syntax unified
 6222              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6223 003c EFF31182 			mrs r2, basepri											
 6224 0040 4FF05003 		mov r3, #80												
 6225 0044 72B6     		cpsid i													
 6226 0046 83F31188 		msr basepri, r3											
 6227 004a BFF36F8F 		isb														
 6228 004e BFF34F8F 		dsb														
 6229 0052 62B6     		cpsie i													
 6230              	
 6231              	@ 0 "" 2
 6232              		.thumb
 6233              		.syntax unified
 6234 0054 3A62     		str	r2, [r7, #32]
 6235 0056 FB61     		str	r3, [r7, #28]
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 6236              		.loc 2 227 9
 6237 0058 3B6A     		ldr	r3, [r7, #32]
 6238              	.LBE201:
 6239              	.LBE200:
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6240              		.loc 1 4857 28
 6241 005a FB62     		str	r3, [r7, #44]
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6242              		.loc 1 4859 6
 6243 005c 3B68     		ldr	r3, [r7]
 6244 005e 002B     		cmp	r3, #0
 6245 0060 03D0     		beq	.L378
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6246              		.loc 1 4861 42
 6247 0062 3B6B     		ldr	r3, [r7, #48]
 6248 0064 DA6C     		ldr	r2, [r3, #76]
ARM GAS  /tmp/ccHYJnM0.s 			page 200


 6249              		.loc 1 4861 35
 6250 0066 3B68     		ldr	r3, [r7]
 6251 0068 1A60     		str	r2, [r3]
 6252              	.L378:
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6253              		.loc 1 4864 26
 6254 006a 3B6B     		ldr	r3, [r7, #48]
 6255 006c 93F85030 		ldrb	r3, [r3, #80]
 6256 0070 87F82B30 		strb	r3, [r7, #43]
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6257              		.loc 1 4865 25
 6258 0074 3B6B     		ldr	r3, [r7, #48]
 6259 0076 0222     		movs	r2, #2
 6260 0078 83F85020 		strb	r2, [r3, #80]
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 6261              		.loc 1 4867 4
 6262 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6263 007e 042B     		cmp	r3, #4
 6264 0080 28D8     		bhi	.L379
 6265 0082 01A2     		adr	r2, .L381
 6266 0084 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6267              		.p2align 2
 6268              	.L381:
 6269 0088 F9000000 		.word	.L398+1
 6270 008c 9D000000 		.word	.L384+1
 6271 0090 AB000000 		.word	.L383+1
 6272 0094 B7000000 		.word	.L382+1
 6273 0098 BF000000 		.word	.L380+1
 6274              		.p2align 1
 6275              	.L384:
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6276              		.loc 1 4870 29
 6277 009c 3B6B     		ldr	r3, [r7, #48]
 6278 009e DA6C     		ldr	r2, [r3, #76]
 6279 00a0 BB68     		ldr	r3, [r7, #8]
 6280 00a2 1A43     		orrs	r2, r2, r3
 6281 00a4 3B6B     		ldr	r3, [r7, #48]
 6282 00a6 DA64     		str	r2, [r3, #76]
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6283              		.loc 1 4871 6
 6284 00a8 29E0     		b	.L386
 6285              	.L383:
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6286              		.loc 1 4874 13
 6287 00aa 3B6B     		ldr	r3, [r7, #48]
 6288 00ac DB6C     		ldr	r3, [r3, #76]
 6289              		.loc 1 4874 32
 6290 00ae 5A1C     		adds	r2, r3, #1
 6291 00b0 3B6B     		ldr	r3, [r7, #48]
 6292 00b2 DA64     		str	r2, [r3, #76]
ARM GAS  /tmp/ccHYJnM0.s 			page 201


4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6293              		.loc 1 4875 6
 6294 00b4 23E0     		b	.L386
 6295              	.L382:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6296              		.loc 1 4878 29
 6297 00b6 3B6B     		ldr	r3, [r7, #48]
 6298 00b8 BA68     		ldr	r2, [r7, #8]
 6299 00ba DA64     		str	r2, [r3, #76]
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6300              		.loc 1 4879 6
 6301 00bc 1FE0     		b	.L386
 6302              	.L380:
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6303              		.loc 1 4882 8
 6304 00be 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6305 00c2 022B     		cmp	r3, #2
 6306 00c4 03D0     		beq	.L387
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6307              		.loc 1 4884 30
 6308 00c6 3B6B     		ldr	r3, [r7, #48]
 6309 00c8 BA68     		ldr	r2, [r7, #8]
 6310 00ca DA64     		str	r2, [r3, #76]
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6311              		.loc 1 4891 6
 6312 00cc 17E0     		b	.L386
 6313              	.L387:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6314              		.loc 1 4889 15
 6315 00ce 0023     		movs	r3, #0
 6316 00d0 7B63     		str	r3, [r7, #52]
 6317              		.loc 1 4891 6
 6318 00d2 14E0     		b	.L386
 6319              	.L379:
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 6320              		.loc 1 4902 6
ARM GAS  /tmp/ccHYJnM0.s 			page 202


 6321 00d4 3B6B     		ldr	r3, [r7, #48]
 6322 00d6 DB6C     		ldr	r3, [r3, #76]
 6323 00d8 B3F1FF3F 		cmp	r3, #-1
 6324 00dc 0ED0     		beq	.L399
 6325              	.LBB202:
 6326              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6327              		.loc 2 195 2
 6328              		.syntax unified
 6329              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6330 00de 4FF05003 			mov r3, #80												
 6331 00e2 72B6     		cpsid i													
 6332 00e4 83F31188 		msr basepri, r3											
 6333 00e8 BFF36F8F 		isb														
 6334 00ec BFF34F8F 		dsb														
 6335 00f0 62B6     		cpsie i													
 6336              	
 6337              	@ 0 "" 2
 6338              		.thumb
 6339              		.syntax unified
 6340 00f2 BB61     		str	r3, [r7, #24]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6341              		.loc 2 205 1
 6342 00f4 00BF     		nop
 6343              	.L390:
 6344              	.LBE203:
 6345              	.LBE202:
 6346              		.loc 1 4902 6 discriminator 2
 6347 00f6 FEE7     		b	.L390
 6348              	.L398:
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6349              		.loc 1 4896 6
 6350 00f8 00BF     		nop
 6351 00fa 00E0     		b	.L386
 6352              	.L399:
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6353              		.loc 1 4903 6
 6354 00fc 00BF     		nop
 6355              	.L386:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6356              		.loc 1 4910 6
 6357 00fe 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6358 0102 012B     		cmp	r3, #1
 6359 0104 47D1     		bne	.L391
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6360              		.loc 1 4913 5
 6361 0106 3B6B     		ldr	r3, [r7, #48]
 6362 0108 9B6A     		ldr	r3, [r3, #40]
 6363 010a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccHYJnM0.s 			page 203


 6364 010c 0CD0     		beq	.L392
 6365              	.LBB204:
 6366              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6367              		.loc 2 195 2
 6368              		.syntax unified
 6369              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6370 010e 4FF05003 			mov r3, #80												
 6371 0112 72B6     		cpsid i													
 6372 0114 83F31188 		msr basepri, r3											
 6373 0118 BFF36F8F 		isb														
 6374 011c BFF34F8F 		dsb														
 6375 0120 62B6     		cpsie i													
 6376              	
 6377              	@ 0 "" 2
 6378              		.thumb
 6379              		.syntax unified
 6380 0122 7B61     		str	r3, [r7, #20]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6381              		.loc 2 205 1
 6382 0124 00BF     		nop
 6383              	.L393:
 6384              	.LBE205:
 6385              	.LBE204:
 6386              		.loc 1 4913 5 discriminator 3
 6387 0126 FEE7     		b	.L393
 6388              	.L392:
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6389              		.loc 1 4915 30
 6390 0128 204B     		ldr	r3, .L400
 6391 012a 1B68     		ldr	r3, [r3]
 6392              		.loc 1 4915 7
 6393 012c 002B     		cmp	r3, #0
 6394 012e 1CD1     		bne	.L394
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6395              		.loc 1 4917 15
 6396 0130 3B6B     		ldr	r3, [r7, #48]
 6397 0132 0433     		adds	r3, r3, #4
 6398 0134 1846     		mov	r0, r3
 6399 0136 FFF7FEFF 		bl	uxListRemove
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6400              		.loc 1 4918 6
 6401 013a 3B6B     		ldr	r3, [r7, #48]
 6402 013c DB6A     		ldr	r3, [r3, #44]
 6403 013e 0122     		movs	r2, #1
 6404 0140 9A40     		lsls	r2, r2, r3
 6405 0142 1B4B     		ldr	r3, .L400+4
 6406 0144 1B68     		ldr	r3, [r3]
 6407 0146 1343     		orrs	r3, r3, r2
 6408 0148 194A     		ldr	r2, .L400+4
 6409 014a 1360     		str	r3, [r2]
 6410 014c 3B6B     		ldr	r3, [r7, #48]
 6411 014e DA6A     		ldr	r2, [r3, #44]
 6412 0150 1346     		mov	r3, r2
 6413 0152 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccHYJnM0.s 			page 204


 6414 0154 1344     		add	r3, r3, r2
 6415 0156 9B00     		lsls	r3, r3, #2
 6416 0158 164A     		ldr	r2, .L400+8
 6417 015a 1A44     		add	r2, r2, r3
 6418 015c 3B6B     		ldr	r3, [r7, #48]
 6419 015e 0433     		adds	r3, r3, #4
 6420 0160 1946     		mov	r1, r3
 6421 0162 1046     		mov	r0, r2
 6422 0164 FFF7FEFF 		bl	vListInsertEnd
 6423 0168 05E0     		b	.L395
 6424              	.L394:
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6425              		.loc 1 4924 6
 6426 016a 3B6B     		ldr	r3, [r7, #48]
 6427 016c 1833     		adds	r3, r3, #24
 6428 016e 1946     		mov	r1, r3
 6429 0170 1148     		ldr	r0, .L400+12
 6430 0172 FFF7FEFF 		bl	vListInsertEnd
 6431              	.L395:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6432              		.loc 1 4927 14
 6433 0176 3B6B     		ldr	r3, [r7, #48]
 6434 0178 DA6A     		ldr	r2, [r3, #44]
 6435              		.loc 1 4927 41
 6436 017a 104B     		ldr	r3, .L400+16
 6437 017c 1B68     		ldr	r3, [r3]
 6438 017e DB6A     		ldr	r3, [r3, #44]
 6439              		.loc 1 4927 7
 6440 0180 9A42     		cmp	r2, r3
 6441 0182 08D9     		bls	.L391
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6442              		.loc 1 4931 8
 6443 0184 3B6C     		ldr	r3, [r7, #64]
 6444 0186 002B     		cmp	r3, #0
 6445 0188 02D0     		beq	.L396
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6446              		.loc 1 4933 34
 6447 018a 3B6C     		ldr	r3, [r7, #64]
 6448 018c 0122     		movs	r2, #1
 6449 018e 1A60     		str	r2, [r3]
 6450              	.L396:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
ARM GAS  /tmp/ccHYJnM0.s 			page 205


4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 6451              		.loc 1 4939 20
 6452 0190 0B4B     		ldr	r3, .L400+20
 6453 0192 0122     		movs	r2, #1
 6454 0194 1A60     		str	r2, [r3]
 6455              	.L391:
 6456 0196 FB6A     		ldr	r3, [r7, #44]
 6457 0198 3B61     		str	r3, [r7, #16]
 6458              	.LBB206:
 6459              	.LBB207:
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6460              		.loc 2 233 2
 6461 019a 3B69     		ldr	r3, [r7, #16]
 6462              		.syntax unified
 6463              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6464 019c 83F31188 			msr basepri, r3	
 6465              	@ 0 "" 2
 6466              		.loc 2 237 1
 6467              		.thumb
 6468              		.syntax unified
 6469 01a0 00BF     		nop
 6470              	.LBE207:
 6471              	.LBE206:
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6472              		.loc 1 4949 10
 6473 01a2 7B6B     		ldr	r3, [r7, #52]
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6474              		.loc 1 4950 2
 6475 01a4 1846     		mov	r0, r3
 6476 01a6 3837     		adds	r7, r7, #56
 6477              	.LCFI236:
 6478              		.cfi_def_cfa_offset 8
 6479 01a8 BD46     		mov	sp, r7
 6480              	.LCFI237:
 6481              		.cfi_def_cfa_register 13
 6482              		@ sp needed
 6483 01aa 80BD     		pop	{r7, pc}
 6484              	.L401:
 6485              		.align	2
 6486              	.L400:
 6487 01ac 00000000 		.word	uxSchedulerSuspended
 6488 01b0 00000000 		.word	uxTopReadyPriority
 6489 01b4 00000000 		.word	pxReadyTasksLists
 6490 01b8 00000000 		.word	xPendingReadyList
 6491 01bc 00000000 		.word	pxCurrentTCB
 6492 01c0 00000000 		.word	xYieldPending
 6493              		.cfi_endproc
 6494              	.LFE51:
ARM GAS  /tmp/ccHYJnM0.s 			page 206


 6496              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6497              		.align	1
 6498              		.global	vTaskNotifyGiveFromISR
 6499              		.syntax unified
 6500              		.thumb
 6501              		.thumb_func
 6502              		.fpu fpv5-d16
 6504              	vTaskNotifyGiveFromISR:
 6505              	.LFB52:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6506              		.loc 1 4958 2
 6507              		.cfi_startproc
 6508              		@ args = 0, pretend = 0, frame = 40
 6509              		@ frame_needed = 1, uses_anonymous_args = 0
 6510 0000 80B5     		push	{r7, lr}
 6511              	.LCFI238:
 6512              		.cfi_def_cfa_offset 8
 6513              		.cfi_offset 7, -8
 6514              		.cfi_offset 14, -4
 6515 0002 8AB0     		sub	sp, sp, #40
 6516              	.LCFI239:
 6517              		.cfi_def_cfa_offset 48
 6518 0004 00AF     		add	r7, sp, #0
 6519              	.LCFI240:
 6520              		.cfi_def_cfa_register 7
 6521 0006 7860     		str	r0, [r7, #4]
 6522 0008 3960     		str	r1, [r7]
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6523              		.loc 1 4963 3
 6524 000a 7B68     		ldr	r3, [r7, #4]
 6525 000c 002B     		cmp	r3, #0
 6526 000e 0CD1     		bne	.L403
 6527              	.LBB208:
 6528              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6529              		.loc 2 195 2
 6530              		.syntax unified
 6531              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6532 0010 4FF05003 			mov r3, #80												
 6533 0014 72B6     		cpsid i													
 6534 0016 83F31188 		msr basepri, r3											
 6535 001a BFF36F8F 		isb														
 6536 001e BFF34F8F 		dsb														
 6537 0022 62B6     		cpsie i													
 6538              	
 6539              	@ 0 "" 2
ARM GAS  /tmp/ccHYJnM0.s 			page 207


 6540              		.thumb
 6541              		.syntax unified
 6542 0024 BB61     		str	r3, [r7, #24]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6543              		.loc 2 205 1
 6544 0026 00BF     		nop
 6545              	.L404:
 6546              	.LBE209:
 6547              	.LBE208:
 6548              		.loc 1 4963 3 discriminator 1
 6549 0028 FEE7     		b	.L404
 6550              	.L403:
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6551              		.loc 1 4981 3
 6552 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6553              		.loc 1 4983 9
 6554 002e 7B68     		ldr	r3, [r7, #4]
 6555 0030 7B62     		str	r3, [r7, #36]
 6556              	.LBB210:
 6557              	.LBB211:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6558              		.loc 2 213 2
 6559              		.syntax unified
 6560              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6561 0032 EFF31182 			mrs r2, basepri											
 6562 0036 4FF05003 		mov r3, #80												
 6563 003a 72B6     		cpsid i													
 6564 003c 83F31188 		msr basepri, r3											
 6565 0040 BFF36F8F 		isb														
 6566 0044 BFF34F8F 		dsb														
 6567 0048 62B6     		cpsie i													
 6568              	
 6569              	@ 0 "" 2
 6570              		.thumb
 6571              		.syntax unified
 6572 004a 7A61     		str	r2, [r7, #20]
 6573 004c 3B61     		str	r3, [r7, #16]
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
ARM GAS  /tmp/ccHYJnM0.s 			page 208


 6574              		.loc 2 227 9
 6575 004e 7B69     		ldr	r3, [r7, #20]
 6576              	.LBE211:
 6577              	.LBE210:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6578              		.loc 1 4985 28
 6579 0050 3B62     		str	r3, [r7, #32]
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6580              		.loc 1 4987 26
 6581 0052 7B6A     		ldr	r3, [r7, #36]
 6582 0054 93F85030 		ldrb	r3, [r3, #80]
 6583 0058 FB77     		strb	r3, [r7, #31]
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6584              		.loc 1 4988 25
 6585 005a 7B6A     		ldr	r3, [r7, #36]
 6586 005c 0222     		movs	r2, #2
 6587 005e 83F85020 		strb	r2, [r3, #80]
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 6588              		.loc 1 4992 11
 6589 0062 7B6A     		ldr	r3, [r7, #36]
 6590 0064 DB6C     		ldr	r3, [r3, #76]
 6591              		.loc 1 4992 30
 6592 0066 5A1C     		adds	r2, r3, #1
 6593 0068 7B6A     		ldr	r3, [r7, #36]
 6594 006a DA64     		str	r2, [r3, #76]
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6595              		.loc 1 4998 6
 6596 006c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6597 006e 012B     		cmp	r3, #1
 6598 0070 47D1     		bne	.L406
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6599              		.loc 1 5001 5
 6600 0072 7B6A     		ldr	r3, [r7, #36]
 6601 0074 9B6A     		ldr	r3, [r3, #40]
 6602 0076 002B     		cmp	r3, #0
 6603 0078 0CD0     		beq	.L407
 6604              	.LBB212:
 6605              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6606              		.loc 2 195 2
 6607              		.syntax unified
 6608              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6609 007a 4FF05003 			mov r3, #80												
 6610 007e 72B6     		cpsid i													
 6611 0080 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccHYJnM0.s 			page 209


 6612 0084 BFF36F8F 		isb														
 6613 0088 BFF34F8F 		dsb														
 6614 008c 62B6     		cpsie i													
 6615              	
 6616              	@ 0 "" 2
 6617              		.thumb
 6618              		.syntax unified
 6619 008e FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6620              		.loc 2 205 1
 6621 0090 00BF     		nop
 6622              	.L408:
 6623              	.LBE213:
 6624              	.LBE212:
 6625              		.loc 1 5001 5 discriminator 2
 6626 0092 FEE7     		b	.L408
 6627              	.L407:
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6628              		.loc 1 5003 30
 6629 0094 204B     		ldr	r3, .L412
 6630 0096 1B68     		ldr	r3, [r3]
 6631              		.loc 1 5003 7
 6632 0098 002B     		cmp	r3, #0
 6633 009a 1CD1     		bne	.L409
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6634              		.loc 1 5005 15
 6635 009c 7B6A     		ldr	r3, [r7, #36]
 6636 009e 0433     		adds	r3, r3, #4
 6637 00a0 1846     		mov	r0, r3
 6638 00a2 FFF7FEFF 		bl	uxListRemove
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6639              		.loc 1 5006 6
 6640 00a6 7B6A     		ldr	r3, [r7, #36]
 6641 00a8 DB6A     		ldr	r3, [r3, #44]
 6642 00aa 0122     		movs	r2, #1
 6643 00ac 9A40     		lsls	r2, r2, r3
 6644 00ae 1B4B     		ldr	r3, .L412+4
 6645 00b0 1B68     		ldr	r3, [r3]
 6646 00b2 1343     		orrs	r3, r3, r2
 6647 00b4 194A     		ldr	r2, .L412+4
 6648 00b6 1360     		str	r3, [r2]
 6649 00b8 7B6A     		ldr	r3, [r7, #36]
 6650 00ba DA6A     		ldr	r2, [r3, #44]
 6651 00bc 1346     		mov	r3, r2
 6652 00be 9B00     		lsls	r3, r3, #2
 6653 00c0 1344     		add	r3, r3, r2
 6654 00c2 9B00     		lsls	r3, r3, #2
 6655 00c4 164A     		ldr	r2, .L412+8
 6656 00c6 1A44     		add	r2, r2, r3
 6657 00c8 7B6A     		ldr	r3, [r7, #36]
 6658 00ca 0433     		adds	r3, r3, #4
 6659 00cc 1946     		mov	r1, r3
 6660 00ce 1046     		mov	r0, r2
 6661 00d0 FFF7FEFF 		bl	vListInsertEnd
 6662 00d4 05E0     		b	.L410
ARM GAS  /tmp/ccHYJnM0.s 			page 210


 6663              	.L409:
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6664              		.loc 1 5012 6
 6665 00d6 7B6A     		ldr	r3, [r7, #36]
 6666 00d8 1833     		adds	r3, r3, #24
 6667 00da 1946     		mov	r1, r3
 6668 00dc 1148     		ldr	r0, .L412+12
 6669 00de FFF7FEFF 		bl	vListInsertEnd
 6670              	.L410:
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6671              		.loc 1 5015 14
 6672 00e2 7B6A     		ldr	r3, [r7, #36]
 6673 00e4 DA6A     		ldr	r2, [r3, #44]
 6674              		.loc 1 5015 41
 6675 00e6 104B     		ldr	r3, .L412+16
 6676 00e8 1B68     		ldr	r3, [r3]
 6677 00ea DB6A     		ldr	r3, [r3, #44]
 6678              		.loc 1 5015 7
 6679 00ec 9A42     		cmp	r2, r3
 6680 00ee 08D9     		bls	.L406
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6681              		.loc 1 5019 8
 6682 00f0 3B68     		ldr	r3, [r7]
 6683 00f2 002B     		cmp	r3, #0
 6684 00f4 02D0     		beq	.L411
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6685              		.loc 1 5021 34
 6686 00f6 3B68     		ldr	r3, [r7]
 6687 00f8 0122     		movs	r2, #1
 6688 00fa 1A60     		str	r2, [r3]
 6689              	.L411:
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 6690              		.loc 1 5027 20
 6691 00fc 0B4B     		ldr	r3, .L412+20
 6692 00fe 0122     		movs	r2, #1
 6693 0100 1A60     		str	r2, [r3]
 6694              	.L406:
 6695 0102 3B6A     		ldr	r3, [r7, #32]
 6696 0104 BB60     		str	r3, [r7, #8]
 6697              	.LBB214:
 6698              	.LBB215:
ARM GAS  /tmp/ccHYJnM0.s 			page 211


 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 6699              		.loc 2 233 2
 6700 0106 BB68     		ldr	r3, [r7, #8]
 6701              		.syntax unified
 6702              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6703 0108 83F31188 			msr basepri, r3	
 6704              	@ 0 "" 2
 6705              		.loc 2 237 1
 6706              		.thumb
 6707              		.syntax unified
 6708 010c 00BF     		nop
 6709              	.LBE215:
 6710              	.LBE214:
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6711              		.loc 1 5036 2
 6712 010e 00BF     		nop
 6713 0110 2837     		adds	r7, r7, #40
 6714              	.LCFI241:
 6715              		.cfi_def_cfa_offset 8
 6716 0112 BD46     		mov	sp, r7
 6717              	.LCFI242:
 6718              		.cfi_def_cfa_register 13
 6719              		@ sp needed
 6720 0114 80BD     		pop	{r7, pc}
 6721              	.L413:
 6722 0116 00BF     		.align	2
 6723              	.L412:
 6724 0118 00000000 		.word	uxSchedulerSuspended
 6725 011c 00000000 		.word	uxTopReadyPriority
 6726 0120 00000000 		.word	pxReadyTasksLists
 6727 0124 00000000 		.word	xPendingReadyList
 6728 0128 00000000 		.word	pxCurrentTCB
 6729 012c 00000000 		.word	xYieldPending
 6730              		.cfi_endproc
 6731              	.LFE52:
 6733              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6734              		.align	1
 6735              		.global	xTaskNotifyStateClear
 6736              		.syntax unified
 6737              		.thumb
 6738              		.thumb_func
 6739              		.fpu fpv5-d16
 6741              	xTaskNotifyStateClear:
 6742              	.LFB53:
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 212


5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6743              		.loc 1 5045 2
 6744              		.cfi_startproc
 6745              		@ args = 0, pretend = 0, frame = 16
 6746              		@ frame_needed = 1, uses_anonymous_args = 0
 6747 0000 80B5     		push	{r7, lr}
 6748              	.LCFI243:
 6749              		.cfi_def_cfa_offset 8
 6750              		.cfi_offset 7, -8
 6751              		.cfi_offset 14, -4
 6752 0002 84B0     		sub	sp, sp, #16
 6753              	.LCFI244:
 6754              		.cfi_def_cfa_offset 24
 6755 0004 00AF     		add	r7, sp, #0
 6756              	.LCFI245:
 6757              		.cfi_def_cfa_register 7
 6758 0006 7860     		str	r0, [r7, #4]
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6759              		.loc 1 5051 11
 6760 0008 7B68     		ldr	r3, [r7, #4]
 6761 000a 002B     		cmp	r3, #0
 6762 000c 02D1     		bne	.L415
 6763              		.loc 1 5051 11 is_stmt 0 discriminator 1
 6764 000e 0E4B     		ldr	r3, .L420
 6765 0010 1B68     		ldr	r3, [r3]
 6766 0012 00E0     		b	.L416
 6767              	.L415:
 6768              		.loc 1 5051 11 discriminator 2
 6769 0014 7B68     		ldr	r3, [r7, #4]
 6770              	.L416:
 6771              		.loc 1 5051 9 is_stmt 1 discriminator 4
 6772 0016 BB60     		str	r3, [r7, #8]
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6773              		.loc 1 5053 3 discriminator 4
 6774 0018 FFF7FEFF 		bl	vPortEnterCritical
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 6775              		.loc 1 5055 13 discriminator 4
 6776 001c BB68     		ldr	r3, [r7, #8]
 6777 001e 93F85030 		ldrb	r3, [r3, #80]
 6778 0022 DBB2     		uxtb	r3, r3
 6779              		.loc 1 5055 6 discriminator 4
 6780 0024 022B     		cmp	r3, #2
 6781 0026 06D1     		bne	.L417
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6782              		.loc 1 5057 26
 6783 0028 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccHYJnM0.s 			page 213


 6784 002a 0022     		movs	r2, #0
 6785 002c 83F85020 		strb	r2, [r3, #80]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6786              		.loc 1 5058 13
 6787 0030 0123     		movs	r3, #1
 6788 0032 FB60     		str	r3, [r7, #12]
 6789 0034 01E0     		b	.L418
 6790              	.L417:
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 6791              		.loc 1 5062 13
 6792 0036 0023     		movs	r3, #0
 6793 0038 FB60     		str	r3, [r7, #12]
 6794              	.L418:
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6795              		.loc 1 5065 3
 6796 003a FFF7FEFF 		bl	vPortExitCritical
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6797              		.loc 1 5067 10
 6798 003e FB68     		ldr	r3, [r7, #12]
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6799              		.loc 1 5068 2
 6800 0040 1846     		mov	r0, r3
 6801 0042 1037     		adds	r7, r7, #16
 6802              	.LCFI246:
 6803              		.cfi_def_cfa_offset 8
 6804 0044 BD46     		mov	sp, r7
 6805              	.LCFI247:
 6806              		.cfi_def_cfa_register 13
 6807              		@ sp needed
 6808 0046 80BD     		pop	{r7, pc}
 6809              	.L421:
 6810              		.align	2
 6811              	.L420:
 6812 0048 00000000 		.word	pxCurrentTCB
 6813              		.cfi_endproc
 6814              	.LFE53:
 6816              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 6817              		.align	1
 6818              		.syntax unified
 6819              		.thumb
 6820              		.thumb_func
 6821              		.fpu fpv5-d16
 6823              	prvAddCurrentTaskToDelayedList:
 6824              	.LFB54:
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccHYJnM0.s 			page 214


5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6825              		.loc 1 5082 1
 6826              		.cfi_startproc
 6827              		@ args = 0, pretend = 0, frame = 16
 6828              		@ frame_needed = 1, uses_anonymous_args = 0
 6829 0000 80B5     		push	{r7, lr}
 6830              	.LCFI248:
 6831              		.cfi_def_cfa_offset 8
 6832              		.cfi_offset 7, -8
 6833              		.cfi_offset 14, -4
 6834 0002 84B0     		sub	sp, sp, #16
 6835              	.LCFI249:
 6836              		.cfi_def_cfa_offset 24
 6837 0004 00AF     		add	r7, sp, #0
 6838              	.LCFI250:
 6839              		.cfi_def_cfa_register 7
 6840 0006 7860     		str	r0, [r7, #4]
 6841 0008 3960     		str	r1, [r7]
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 6842              		.loc 1 5084 18
 6843 000a 294B     		ldr	r3, .L428
 6844 000c 1B68     		ldr	r3, [r3]
 6845 000e FB60     		str	r3, [r7, #12]
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6846              		.loc 1 5097 35
 6847 0010 284B     		ldr	r3, .L428+4
 6848 0012 1B68     		ldr	r3, [r3]
 6849              		.loc 1 5097 6
 6850 0014 0433     		adds	r3, r3, #4
 6851 0016 1846     		mov	r0, r3
 6852 0018 FFF7FEFF 		bl	uxListRemove
 6853 001c 0346     		mov	r3, r0
 6854              		.loc 1 5097 4
 6855 001e 002B     		cmp	r3, #0
 6856 0020 0BD1     		bne	.L423
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
ARM GAS  /tmp/ccHYJnM0.s 			page 215


5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 6857              		.loc 1 5101 3
 6858 0022 244B     		ldr	r3, .L428+4
 6859 0024 1B68     		ldr	r3, [r3]
 6860 0026 DB6A     		ldr	r3, [r3, #44]
 6861 0028 0122     		movs	r2, #1
 6862 002a 02FA03F3 		lsl	r3, r2, r3
 6863 002e DA43     		mvns	r2, r3
 6864 0030 214B     		ldr	r3, .L428+8
 6865 0032 1B68     		ldr	r3, [r3]
 6866 0034 1340     		ands	r3, r3, r2
 6867 0036 204A     		ldr	r2, .L428+8
 6868 0038 1360     		str	r3, [r2]
 6869              	.L423:
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 6870              		.loc 1 5110 5
 6871 003a 7B68     		ldr	r3, [r7, #4]
 6872 003c B3F1FF3F 		cmp	r3, #-1
 6873 0040 0AD1     		bne	.L424
 6874              		.loc 1 5110 41 discriminator 1
 6875 0042 3B68     		ldr	r3, [r7]
 6876 0044 002B     		cmp	r3, #0
 6877 0046 07D0     		beq	.L424
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6878              		.loc 1 5115 56
 6879 0048 1A4B     		ldr	r3, .L428+4
 6880 004a 1B68     		ldr	r3, [r3]
 6881              		.loc 1 5115 4
 6882 004c 0433     		adds	r3, r3, #4
 6883 004e 1946     		mov	r1, r3
 6884 0050 1A48     		ldr	r0, .L428+12
 6885 0052 FFF7FEFF 		bl	vListInsertEnd
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccHYJnM0.s 			page 216


5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccHYJnM0.s 			page 217


5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6886              		.loc 1 5190 1
 6887 0056 26E0     		b	.L427
 6888              	.L424:
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6889              		.loc 1 5122 16
 6890 0058 FA68     		ldr	r2, [r7, #12]
 6891 005a 7B68     		ldr	r3, [r7, #4]
 6892 005c 1344     		add	r3, r3, r2
 6893 005e BB60     		str	r3, [r7, #8]
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6894              		.loc 1 5125 4
 6895 0060 144B     		ldr	r3, .L428+4
 6896 0062 1B68     		ldr	r3, [r3]
 6897 0064 BA68     		ldr	r2, [r7, #8]
 6898 0066 5A60     		str	r2, [r3, #4]
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6899              		.loc 1 5127 6
 6900 0068 BA68     		ldr	r2, [r7, #8]
 6901 006a FB68     		ldr	r3, [r7, #12]
 6902 006c 9A42     		cmp	r2, r3
 6903 006e 09D2     		bcs	.L426
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6904              		.loc 1 5131 5
 6905 0070 134B     		ldr	r3, .L428+16
 6906 0072 1A68     		ldr	r2, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6907              		.loc 1 5131 60
 6908 0074 0F4B     		ldr	r3, .L428+4
 6909 0076 1B68     		ldr	r3, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6910              		.loc 1 5131 5
 6911 0078 0433     		adds	r3, r3, #4
 6912 007a 1946     		mov	r1, r3
 6913 007c 1046     		mov	r0, r2
 6914 007e FFF7FEFF 		bl	vListInsert
 6915              		.loc 1 5190 1
 6916 0082 10E0     		b	.L427
 6917              	.L426:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6918              		.loc 1 5137 5
 6919 0084 0F4B     		ldr	r3, .L428+20
 6920 0086 1A68     		ldr	r2, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6921              		.loc 1 5137 52
 6922 0088 0A4B     		ldr	r3, .L428+4
 6923 008a 1B68     		ldr	r3, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6924              		.loc 1 5137 5
 6925 008c 0433     		adds	r3, r3, #4
 6926 008e 1946     		mov	r1, r3
 6927 0090 1046     		mov	r0, r2
 6928 0092 FFF7FEFF 		bl	vListInsert
ARM GAS  /tmp/ccHYJnM0.s 			page 218


5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6929              		.loc 1 5142 21
 6930 0096 0C4B     		ldr	r3, .L428+24
 6931 0098 1B68     		ldr	r3, [r3]
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6932              		.loc 1 5142 7
 6933 009a BA68     		ldr	r2, [r7, #8]
 6934 009c 9A42     		cmp	r2, r3
 6935 009e 02D2     		bcs	.L427
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6936              		.loc 1 5144 27
 6937 00a0 094A     		ldr	r2, .L428+24
 6938 00a2 BB68     		ldr	r3, [r7, #8]
 6939 00a4 1360     		str	r3, [r2]
 6940              	.L427:
 6941              		.loc 1 5190 1
 6942 00a6 00BF     		nop
 6943 00a8 1037     		adds	r7, r7, #16
 6944              	.LCFI251:
 6945              		.cfi_def_cfa_offset 8
 6946 00aa BD46     		mov	sp, r7
 6947              	.LCFI252:
 6948              		.cfi_def_cfa_register 13
 6949              		@ sp needed
 6950 00ac 80BD     		pop	{r7, pc}
 6951              	.L429:
 6952 00ae 00BF     		.align	2
 6953              	.L428:
 6954 00b0 00000000 		.word	xTickCount
 6955 00b4 00000000 		.word	pxCurrentTCB
 6956 00b8 00000000 		.word	uxTopReadyPriority
 6957 00bc 00000000 		.word	xSuspendedTaskList
 6958 00c0 00000000 		.word	pxOverflowDelayedTaskList
 6959 00c4 00000000 		.word	pxDelayedTaskList
 6960 00c8 00000000 		.word	xNextTaskUnblockTime
 6961              		.cfi_endproc
 6962              	.LFE54:
 6964              		.text
 6965              	.Letext0:
 6966              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 6967              		.file 4 "/usr/include/newlib/sys/_types.h"
 6968              		.file 5 "/usr/include/newlib/sys/reent.h"
 6969              		.file 6 "/usr/include/newlib/sys/lock.h"
 6970              		.file 7 "/usr/include/newlib/stdlib.h"
 6971              		.file 8 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 6972              		.file 9 "Core/Inc/FreeRTOSConfig.h"
 6973              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6974              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6975              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6976              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccHYJnM0.s 			page 219


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccHYJnM0.s:21     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccHYJnM0.s:18     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccHYJnM0.s:24     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccHYJnM0.s:27     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccHYJnM0.s:30     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccHYJnM0.s:33     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccHYJnM0.s:36     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccHYJnM0.s:39     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccHYJnM0.s:42     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccHYJnM0.s:45     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccHYJnM0.s:48     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccHYJnM0.s:51     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccHYJnM0.s:54     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccHYJnM0.s:57     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccHYJnM0.s:60     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccHYJnM0.s:63     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccHYJnM0.s:66     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccHYJnM0.s:69     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccHYJnM0.s:72     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccHYJnM0.s:75     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccHYJnM0.s:78     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccHYJnM0.s:81     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccHYJnM0.s:84     .bss.xTickCount:0000000000000000 $d
     /tmp/ccHYJnM0.s:87     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccHYJnM0.s:90     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccHYJnM0.s:93     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccHYJnM0.s:96     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccHYJnM0.s:99     .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccHYJnM0.s:102    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccHYJnM0.s:105    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccHYJnM0.s:108    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccHYJnM0.s:111    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccHYJnM0.s:114    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccHYJnM0.s:117    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccHYJnM0.s:120    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccHYJnM0.s:123    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccHYJnM0.s:126    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccHYJnM0.s:129    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccHYJnM0.s:132    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccHYJnM0.s:135    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccHYJnM0.s:138    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccHYJnM0.s:141    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccHYJnM0.s:144    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccHYJnM0.s:152    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccHYJnM0.s:445    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccHYJnM0.s:656    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccHYJnM0.s:324    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccHYJnM0.s:331    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccHYJnM0.s:439    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccHYJnM0.s:650    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccHYJnM0.s:4363   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccHYJnM0.s:797    .text.prvAddNewTaskToReadyList:00000000000000b8 $d
     /tmp/ccHYJnM0.s:808    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccHYJnM0.s:815    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccHYJnM0.s:4545   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
ARM GAS  /tmp/ccHYJnM0.s 			page 220


     /tmp/ccHYJnM0.s:4642   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccHYJnM0.s:1004   .text.vTaskDelete:00000000000000fc $d
     /tmp/ccHYJnM0.s:1018   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccHYJnM0.s:1025   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccHYJnM0.s:2466   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccHYJnM0.s:6823   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccHYJnM0.s:2513   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccHYJnM0.s:1120   .text.vTaskDelay:0000000000000064 $d
     /tmp/ccHYJnM0.s:1126   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccHYJnM0.s:1133   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccHYJnM0.s:1188   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccHYJnM0.s:1193   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccHYJnM0.s:1200   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccHYJnM0.s:1293   .text.uxTaskPriorityGetFromISR:0000000000000058 $d
     /tmp/ccHYJnM0.s:1298   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccHYJnM0.s:1305   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccHYJnM0.s:1548   .text.vTaskPrioritySet:0000000000000148 $d
     /tmp/ccHYJnM0.s:1556   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccHYJnM0.s:1563   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccHYJnM0.s:3256   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccHYJnM0.s:1765   .text.vTaskSuspend:0000000000000108 $d
     /tmp/ccHYJnM0.s:1777   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccHYJnM0.s:1783   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccHYJnM0.s:1878   .text.prvTaskIsTaskSuspended:0000000000000060 $d
     /tmp/ccHYJnM0.s:1884   .text.vTaskResume:0000000000000000 $t
     /tmp/ccHYJnM0.s:1891   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccHYJnM0.s:2028   .text.vTaskResume:00000000000000b0 $d
     /tmp/ccHYJnM0.s:2036   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccHYJnM0.s:2043   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccHYJnM0.s:2216   .text.xTaskResumeFromISR:00000000000000d8 $d
     /tmp/ccHYJnM0.s:2225   .rodata:0000000000000000 $d
     /tmp/ccHYJnM0.s:2229   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccHYJnM0.s:2236   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccHYJnM0.s:2381   .text.vTaskStartScheduler:00000000000000b0 $d
     /tmp/ccHYJnM0.s:4306   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccHYJnM0.s:2391   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccHYJnM0.s:2398   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccHYJnM0.s:2454   .text.vTaskEndScheduler:0000000000000030 $d
     /tmp/ccHYJnM0.s:2459   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccHYJnM0.s:2501   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccHYJnM0.s:2506   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccHYJnM0.s:2990   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccHYJnM0.s:2730   .text.xTaskResumeAll:0000000000000118 $d
     /tmp/ccHYJnM0.s:2743   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccHYJnM0.s:2750   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccHYJnM0.s:2790   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccHYJnM0.s:2795   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccHYJnM0.s:2802   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccHYJnM0.s:2843   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccHYJnM0.s:2848   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccHYJnM0.s:2855   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccHYJnM0.s:2886   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccHYJnM0.s:2891   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccHYJnM0.s:2898   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccHYJnM0.s:2978   .text.pcTaskGetName:0000000000000048 $d
     /tmp/ccHYJnM0.s:2983   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccHYJnM0.s:3234   .text.xTaskIncrementTick:0000000000000148 $d
ARM GAS  /tmp/ccHYJnM0.s 			page 221


     /tmp/ccHYJnM0.s:3249   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccHYJnM0.s:3401   .text.vTaskSwitchContext:00000000000000a8 $d
     /tmp/ccHYJnM0.s:3410   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccHYJnM0.s:3417   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccHYJnM0.s:3489   .text.vTaskPlaceOnEventList:0000000000000048 $d
     /tmp/ccHYJnM0.s:3494   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccHYJnM0.s:3501   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccHYJnM0.s:3609   .text.vTaskPlaceOnUnorderedEventList:0000000000000078 $d
     /tmp/ccHYJnM0.s:3615   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccHYJnM0.s:3622   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccHYJnM0.s:3760   .text.xTaskRemoveFromEventList:00000000000000b0 $d
     /tmp/ccHYJnM0.s:3770   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccHYJnM0.s:3777   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccHYJnM0.s:3921   .text.vTaskRemoveFromUnorderedEventList:00000000000000b8 $d
     /tmp/ccHYJnM0.s:3930   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccHYJnM0.s:3937   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccHYJnM0.s:4010   .text.vTaskSetTimeOutState:0000000000000048 $d
     /tmp/ccHYJnM0.s:4016   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccHYJnM0.s:4023   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccHYJnM0.s:4068   .text.vTaskInternalSetTimeOutState:0000000000000024 $d
     /tmp/ccHYJnM0.s:4074   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccHYJnM0.s:4081   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccHYJnM0.s:4250   .text.xTaskCheckForTimeOut:00000000000000c4 $d
     /tmp/ccHYJnM0.s:4256   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccHYJnM0.s:4263   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccHYJnM0.s:4295   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccHYJnM0.s:4300   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccHYJnM0.s:4459   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccHYJnM0.s:4351   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccHYJnM0.s:4357   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccHYJnM0.s:4441   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/ccHYJnM0.s:4453   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccHYJnM0.s:4532   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
     /tmp/ccHYJnM0.s:4539   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccHYJnM0.s:4636   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccHYJnM0.s:4704   .text.prvResetNextTaskUnblockTime:0000000000000038 $d
     /tmp/ccHYJnM0.s:4710   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccHYJnM0.s:4717   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccHYJnM0.s:4757   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccHYJnM0.s:4762   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccHYJnM0.s:4769   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccHYJnM0.s:4831   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccHYJnM0.s:4837   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccHYJnM0.s:4844   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccHYJnM0.s:5017   .text.xTaskPriorityInherit:00000000000000f4 $d
     /tmp/ccHYJnM0.s:5024   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccHYJnM0.s:5031   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccHYJnM0.s:5227   .text.xTaskPriorityDisinherit:0000000000000108 $d
     /tmp/ccHYJnM0.s:5234   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccHYJnM0.s:5241   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccHYJnM0.s:5463   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000130 $d
     /tmp/ccHYJnM0.s:5470   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccHYJnM0.s:5477   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccHYJnM0.s:5527   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccHYJnM0.s:5532   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccHYJnM0.s:5539   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccHYJnM0.s:5584   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
ARM GAS  /tmp/ccHYJnM0.s 			page 222


     /tmp/ccHYJnM0.s:5589   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccHYJnM0.s:5596   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccHYJnM0.s:5710   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/ccHYJnM0.s:5716   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccHYJnM0.s:5723   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccHYJnM0.s:5858   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/ccHYJnM0.s:5864   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccHYJnM0.s:5871   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccHYJnM0.s:5956   .text.xTaskGenericNotify:0000000000000068 $d
     /tmp/ccHYJnM0.s:5961   .text.xTaskGenericNotify:000000000000007c $t
     /tmp/ccHYJnM0.s:6145   .text.xTaskGenericNotify:0000000000000168 $d
     /tmp/ccHYJnM0.s:6153   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccHYJnM0.s:6160   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccHYJnM0.s:6269   .text.xTaskGenericNotifyFromISR:0000000000000088 $d
     /tmp/ccHYJnM0.s:6274   .text.xTaskGenericNotifyFromISR:000000000000009c $t
     /tmp/ccHYJnM0.s:6487   .text.xTaskGenericNotifyFromISR:00000000000001ac $d
     /tmp/ccHYJnM0.s:6497   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccHYJnM0.s:6504   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccHYJnM0.s:6724   .text.vTaskNotifyGiveFromISR:0000000000000118 $d
     /tmp/ccHYJnM0.s:6734   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccHYJnM0.s:6741   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccHYJnM0.s:6812   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccHYJnM0.s:6817   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccHYJnM0.s:6954   .text.prvAddCurrentTaskToDelayedList:00000000000000b0 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
