ARM GAS  /tmp/ccKara2O.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"event_groups.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  17              		.align	1
  18              		.global	xEventGroupCreateStatic
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	xEventGroupCreateStatic:
  26              	.LFB5:
  27              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/ccKara2O.s 			page 2


  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** for the header files above, but not in this file, in order to generate the
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** correct privileged Vs unprivileged linkage and placement. */
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct EventGroupDef_t
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccKara2O.s 			page 3


  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
  28              		.loc 1 94 2
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 24
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 86B0     		sub	sp, sp, #24
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 32
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  44              		.loc 1 98 3
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 002B     		cmp	r3, #0
  47 000c 0CD1     		bne	.L2
  48              	.LBB36:
  49              	.LBB37:
  50              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
ARM GAS  /tmp/ccKara2O.s 			page 4


  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
ARM GAS  /tmp/ccKara2O.s 			page 5


  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
ARM GAS  /tmp/ccKara2O.s 			page 6


 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
ARM GAS  /tmp/ccKara2O.s 			page 7


  51              		.loc 2 195 2
  52              		.syntax unified
  53              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  54 000e 4FF05003 			mov r3, #80												
  55 0012 72B6     		cpsid i													
  56 0014 83F31188 		msr basepri, r3											
  57 0018 BFF36F8F 		isb														
  58 001c BFF34F8F 		dsb														
  59 0020 62B6     		cpsie i													
  60              	
  61              	@ 0 "" 2
  62              		.thumb
  63              		.syntax unified
  64 0022 3B61     		str	r3, [r7, #16]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
  65              		.loc 2 205 1
  66 0024 00BF     		nop
  67              	.L3:
  68              	.LBE37:
  69              	.LBE36:
  70              		.loc 1 98 3 discriminator 1
  71 0026 FEE7     		b	.L3
  72              	.L2:
  73              	.LBB38:
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
  74              		.loc 1 105 20
  75 0028 1C23     		movs	r3, #28
  76 002a BB60     		str	r3, [r7, #8]
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
  77              		.loc 1 106 4
  78 002c BB68     		ldr	r3, [r7, #8]
  79 002e 1C2B     		cmp	r3, #28
  80 0030 0CD0     		beq	.L4
  81              	.LBB39:
  82              	.LBB40:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
  83              		.loc 2 195 2
  84              		.syntax unified
  85              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  86 0032 4FF05003 			mov r3, #80												
  87 0036 72B6     		cpsid i													
  88 0038 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccKara2O.s 			page 8


  89 003c BFF36F8F 		isb														
  90 0040 BFF34F8F 		dsb														
  91 0044 62B6     		cpsie i													
  92              	
  93              	@ 0 "" 2
  94              		.thumb
  95              		.syntax unified
  96 0046 FB60     		str	r3, [r7, #12]
  97              		.loc 2 205 1
  98 0048 00BF     		nop
  99              	.L5:
 100              	.LBE40:
 101              	.LBE39:
 102              		.loc 1 106 4 discriminator 2
 103 004a FEE7     		b	.L5
 104              	.L4:
 105              	.LBE38:
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticE
 106              		.loc 1 111 15
 107 004c 7B68     		ldr	r3, [r7, #4]
 108 004e 7B61     		str	r3, [r7, #20]
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 109              		.loc 1 113 5
 110 0050 7B69     		ldr	r3, [r7, #20]
 111 0052 002B     		cmp	r3, #0
 112 0054 0AD0     		beq	.L6
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 113              		.loc 1 115 29
 114 0056 7B69     		ldr	r3, [r7, #20]
 115 0058 0022     		movs	r2, #0
 116 005a 1A60     		str	r2, [r3]
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117              		.loc 1 116 4
 118 005c 7B69     		ldr	r3, [r7, #20]
 119 005e 0433     		adds	r3, r3, #4
 120 0060 1846     		mov	r0, r3
 121 0062 FFF7FEFF 		bl	vListInitialise
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 122              		.loc 1 123 40
 123 0066 7B69     		ldr	r3, [r7, #20]
 124 0068 0122     		movs	r2, #1
 125 006a 1A76     		strb	r2, [r3, #24]
 126              	.L6:
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  /tmp/ccKara2O.s 			page 9


 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* xEventGroupCreateStatic should only ever be called with
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventGroupBuffer pointing to a pre-allocated (compile time
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			allocated) StaticEventGroup_t variable. */
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 127              		.loc 1 137 10
 128 006c 7B69     		ldr	r3, [r7, #20]
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 129              		.loc 1 138 2
 130 006e 1846     		mov	r0, r3
 131 0070 1837     		adds	r7, r7, #24
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134 0072 BD46     		mov	sp, r7
 135              	.LCFI4:
 136              		.cfi_def_cfa_register 13
 137              		@ sp needed
 138 0074 80BD     		pop	{r7, pc}
 139              		.cfi_endproc
 140              	.LFE5:
 142              		.section	.text.xEventGroupCreate,"ax",%progbits
 143              		.align	1
 144              		.global	xEventGroupCreate
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv5-d16
 150              	xEventGroupCreate:
 151              	.LFB6:
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 152              		.loc 1 146 2
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 8
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156 0000 80B5     		push	{r7, lr}
 157              	.LCFI5:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 7, -8
 160              		.cfi_offset 14, -4
 161 0002 82B0     		sub	sp, sp, #8
 162              	.LCFI6:
 163              		.cfi_def_cfa_offset 16
 164 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccKara2O.s 			page 10


 165              	.LCFI7:
 166              		.cfi_def_cfa_register 7
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group.  Justification for MISRA deviation as
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		follows:  pvPortMalloc() always ensures returned memory blocks are
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		aligned per the requirements of the MCU stack.  In this case
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		alignment requirements of the EventGroup_t structure - which (if you
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		follow it through) is the alignment requirements of the TickType_t type
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		(EventBits_t being of TickType_t itself).  Therefore, whenever the
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		stack alignment requirements are greater than or equal to the
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		TickType_t alignment requirements the cast is safe.  In other cases,
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		where the natural word size of the architecture is less than
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		sizeof( TickType_t ), the TickType_t variables will be accessed in two
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		or more reads operations, and the alignment requirements is only that
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		of each individual read. */
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see
 167              		.loc 1 162 36
 168 0006 1C20     		movs	r0, #28
 169 0008 FFF7FEFF 		bl	pvPortMalloc
 170 000c 7860     		str	r0, [r7, #4]
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 171              		.loc 1 164 5
 172 000e 7B68     		ldr	r3, [r7, #4]
 173 0010 002B     		cmp	r3, #0
 174 0012 0AD0     		beq	.L9
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 175              		.loc 1 166 29
 176 0014 7B68     		ldr	r3, [r7, #4]
 177 0016 0022     		movs	r2, #0
 178 0018 1A60     		str	r2, [r3]
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 179              		.loc 1 167 4
 180 001a 7B68     		ldr	r3, [r7, #4]
 181 001c 0433     		adds	r3, r3, #4
 182 001e 1846     		mov	r0, r3
 183 0020 FFF7FEFF 		bl	vListInitialise
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 184              		.loc 1 174 40
 185 0024 7B68     		ldr	r3, [r7, #4]
 186 0026 0022     		movs	r2, #0
 187 0028 1A76     		strb	r2, [r3, #24]
 188              	.L9:
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  /tmp/ccKara2O.s 			page 11


 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and doe
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 189              		.loc 1 185 10
 190 002a 7B68     		ldr	r3, [r7, #4]
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 191              		.loc 1 186 2
 192 002c 1846     		mov	r0, r3
 193 002e 0837     		adds	r7, r7, #8
 194              	.LCFI8:
 195              		.cfi_def_cfa_offset 8
 196 0030 BD46     		mov	sp, r7
 197              	.LCFI9:
 198              		.cfi_def_cfa_register 13
 199              		@ sp needed
 200 0032 80BD     		pop	{r7, pc}
 201              		.cfi_endproc
 202              	.LFE6:
 204              		.section	.text.xEventGroupSync,"ax",%progbits
 205              		.align	1
 206              		.global	xEventGroupSync
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 210              		.fpu fpv5-d16
 212              	xEventGroupSync:
 213              	.LFB7:
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 214              		.loc 1 192 1
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 48
 217              		@ frame_needed = 1, uses_anonymous_args = 0
 218 0000 80B5     		push	{r7, lr}
 219              	.LCFI10:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
 223 0002 8CB0     		sub	sp, sp, #48
 224              	.LCFI11:
 225              		.cfi_def_cfa_offset 56
 226 0004 00AF     		add	r7, sp, #0
 227              	.LCFI12:
 228              		.cfi_def_cfa_register 7
 229 0006 F860     		str	r0, [r7, #12]
 230 0008 B960     		str	r1, [r7, #8]
 231 000a 7A60     		str	r2, [r7, #4]
 232 000c 3B60     		str	r3, [r7]
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
ARM GAS  /tmp/ccKara2O.s 			page 12


 233              		.loc 1 194 15
 234 000e FB68     		ldr	r3, [r7, #12]
 235 0010 BB62     		str	r3, [r7, #40]
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 236              		.loc 1 196 12
 237 0012 0023     		movs	r3, #0
 238 0014 7B62     		str	r3, [r7, #36]
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 239              		.loc 1 198 2
 240 0016 7B68     		ldr	r3, [r7, #4]
 241 0018 03F07F43 		and	r3, r3, #-16777216
 242 001c 002B     		cmp	r3, #0
 243 001e 0CD0     		beq	.L12
 244              	.LBB41:
 245              	.LBB42:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 246              		.loc 2 195 2
 247              		.syntax unified
 248              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 249 0020 4FF05003 			mov r3, #80												
 250 0024 72B6     		cpsid i													
 251 0026 83F31188 		msr basepri, r3											
 252 002a BFF36F8F 		isb														
 253 002e BFF34F8F 		dsb														
 254 0032 62B6     		cpsie i													
 255              	
 256              	@ 0 "" 2
 257              		.thumb
 258              		.syntax unified
 259 0034 BB61     		str	r3, [r7, #24]
 260              		.loc 2 205 1
 261 0036 00BF     		nop
 262              	.L13:
 263              	.LBE42:
 264              	.LBE41:
 265              		.loc 1 198 2 discriminator 1
 266 0038 FEE7     		b	.L13
 267              	.L12:
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 268              		.loc 1 199 2
 269 003a 7B68     		ldr	r3, [r7, #4]
 270 003c 002B     		cmp	r3, #0
 271 003e 0CD1     		bne	.L14
 272              	.LBB43:
 273              	.LBB44:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 274              		.loc 2 195 2
 275              		.syntax unified
 276              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 277 0040 4FF05003 			mov r3, #80												
 278 0044 72B6     		cpsid i													
 279 0046 83F31188 		msr basepri, r3											
 280 004a BFF36F8F 		isb														
 281 004e BFF34F8F 		dsb														
 282 0052 62B6     		cpsie i													
ARM GAS  /tmp/ccKara2O.s 			page 13


 283              	
 284              	@ 0 "" 2
 285              		.thumb
 286              		.syntax unified
 287 0054 7B61     		str	r3, [r7, #20]
 288              		.loc 2 205 1
 289 0056 00BF     		nop
 290              	.L15:
 291              	.LBE44:
 292              	.LBE43:
 293              		.loc 1 199 2 discriminator 2
 294 0058 FEE7     		b	.L15
 295              	.L14:
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 296              		.loc 1 202 3
 297 005a FFF7FEFF 		bl	xTaskGetSchedulerState
 298 005e 0346     		mov	r3, r0
 299 0060 002B     		cmp	r3, #0
 300 0062 02D1     		bne	.L16
 301              		.loc 1 202 3 is_stmt 0 discriminator 2
 302 0064 3B68     		ldr	r3, [r7]
 303 0066 002B     		cmp	r3, #0
 304 0068 01D1     		bne	.L17
 305              	.L16:
 306              		.loc 1 202 3 discriminator 3
 307 006a 0123     		movs	r3, #1
 308 006c 00E0     		b	.L18
 309              	.L17:
 310              		.loc 1 202 3 discriminator 4
 311 006e 0023     		movs	r3, #0
 312              	.L18:
 313              		.loc 1 202 3 discriminator 6
 314 0070 002B     		cmp	r3, #0
 315 0072 0CD1     		bne	.L19
 316              	.LBB45:
 317              	.LBB46:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 318              		.loc 2 195 2 is_stmt 1
 319              		.syntax unified
 320              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 321 0074 4FF05003 			mov r3, #80												
 322 0078 72B6     		cpsid i													
 323 007a 83F31188 		msr basepri, r3											
 324 007e BFF36F8F 		isb														
 325 0082 BFF34F8F 		dsb														
 326 0086 62B6     		cpsie i													
 327              	
 328              	@ 0 "" 2
 329              		.thumb
 330              		.syntax unified
 331 0088 3B61     		str	r3, [r7, #16]
 332              		.loc 2 205 1
 333 008a 00BF     		nop
 334              	.L20:
 335              	.LBE46:
ARM GAS  /tmp/ccKara2O.s 			page 14


 336              	.LBE45:
 337              		.loc 1 202 3 discriminator 3
 338 008c FEE7     		b	.L20
 339              	.L19:
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 340              		.loc 1 206 2
 341 008e FFF7FEFF 		bl	vTaskSuspendAll
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 342              		.loc 1 208 22
 343 0092 BB6A     		ldr	r3, [r7, #40]
 344 0094 1B68     		ldr	r3, [r3]
 345 0096 3B62     		str	r3, [r7, #32]
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 346              		.loc 1 210 12
 347 0098 B968     		ldr	r1, [r7, #8]
 348 009a F868     		ldr	r0, [r7, #12]
 349 009c FFF7FEFF 		bl	xEventGroupSetBits
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 350              		.loc 1 212 30
 351 00a0 3A6A     		ldr	r2, [r7, #32]
 352 00a2 BB68     		ldr	r3, [r7, #8]
 353 00a4 1A43     		orrs	r2, r2, r3
 354              		.loc 1 212 46
 355 00a6 7B68     		ldr	r3, [r7, #4]
 356 00a8 1340     		ands	r3, r3, r2
 357              		.loc 1 212 5
 358 00aa 7A68     		ldr	r2, [r7, #4]
 359 00ac 9A42     		cmp	r2, r3
 360 00ae 0DD1     		bne	.L21
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 361              		.loc 1 215 13
 362 00b0 3A6A     		ldr	r2, [r7, #32]
 363 00b2 BB68     		ldr	r3, [r7, #8]
 364 00b4 1343     		orrs	r3, r3, r2
 365 00b6 FB62     		str	r3, [r7, #44]
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 366              		.loc 1 219 29
 367 00b8 BB6A     		ldr	r3, [r7, #40]
 368 00ba 1A68     		ldr	r2, [r3]
 369              		.loc 1 219 32
 370 00bc 7B68     		ldr	r3, [r7, #4]
 371 00be DB43     		mvns	r3, r3
 372              		.loc 1 219 29
 373 00c0 1A40     		ands	r2, r2, r3
 374 00c2 BB6A     		ldr	r3, [r7, #40]
 375 00c4 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccKara2O.s 			page 15


 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 376              		.loc 1 221 17
 377 00c6 0023     		movs	r3, #0
 378 00c8 3B60     		str	r3, [r7]
 379 00ca 13E0     		b	.L22
 380              	.L21:
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 381              		.loc 1 225 6
 382 00cc 3B68     		ldr	r3, [r7]
 383 00ce 002B     		cmp	r3, #0
 384 00d0 0BD0     		beq	.L23
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 385              		.loc 1 232 5
 386 00d2 BB6A     		ldr	r3, [r7, #40]
 387 00d4 181D     		adds	r0, r3, #4
 388 00d6 7B68     		ldr	r3, [r7, #4]
 389 00d8 43F0A063 		orr	r3, r3, #83886080
 390 00dc 3A68     		ldr	r2, [r7]
 391 00de 1946     		mov	r1, r3
 392 00e0 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 393              		.loc 1 238 14
 394 00e4 0023     		movs	r3, #0
 395 00e6 FB62     		str	r3, [r7, #44]
 396 00e8 04E0     		b	.L22
 397              	.L23:
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 398              		.loc 1 244 14
 399 00ea BB6A     		ldr	r3, [r7, #40]
 400 00ec 1B68     		ldr	r3, [r3]
 401 00ee FB62     		str	r3, [r7, #44]
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 402              		.loc 1 245 22
 403 00f0 0123     		movs	r3, #1
 404 00f2 7B62     		str	r3, [r7, #36]
 405              	.L22:
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
ARM GAS  /tmp/ccKara2O.s 			page 16


 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 406              		.loc 1 249 20
 407 00f4 FFF7FEFF 		bl	xTaskResumeAll
 408 00f8 F861     		str	r0, [r7, #28]
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 409              		.loc 1 251 4
 410 00fa 3B68     		ldr	r3, [r7]
 411 00fc 002B     		cmp	r3, #0
 412 00fe 2CD0     		beq	.L24
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 413              		.loc 1 253 5
 414 0100 FB69     		ldr	r3, [r7, #28]
 415 0102 002B     		cmp	r3, #0
 416 0104 07D1     		bne	.L25
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 417              		.loc 1 255 4
 418 0106 174B     		ldr	r3, .L29
 419 0108 4FF08052 		mov	r2, #268435456
 420 010c 1A60     		str	r2, [r3]
 421              		.syntax unified
 422              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 423 010e BFF34F8F 		dsb
 424              	@ 0 "" 2
 425              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 426 0112 BFF36F8F 		isb
 427              	@ 0 "" 2
 428              		.thumb
 429              		.syntax unified
 430              	.L25:
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 431              		.loc 1 266 14
 432 0116 FFF7FEFF 		bl	uxTaskResetEventItemValue
 433 011a F862     		str	r0, [r7, #44]
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 434              		.loc 1 268 18
 435 011c FB6A     		ldr	r3, [r7, #44]
 436 011e 03F00073 		and	r3, r3, #33554432
 437              		.loc 1 268 5
 438 0122 002B     		cmp	r3, #0
 439 0124 15D1     		bne	.L26
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  /tmp/ccKara2O.s 			page 17


 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 440              		.loc 1 271 4
 441 0126 FFF7FEFF 		bl	vPortEnterCritical
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 442              		.loc 1 273 14
 443 012a BB6A     		ldr	r3, [r7, #40]
 444 012c 1B68     		ldr	r3, [r3]
 445 012e FB62     		str	r3, [r7, #44]
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 446              		.loc 1 279 20
 447 0130 FA6A     		ldr	r2, [r7, #44]
 448 0132 7B68     		ldr	r3, [r7, #4]
 449 0134 1340     		ands	r3, r3, r2
 450              		.loc 1 279 7
 451 0136 7A68     		ldr	r2, [r7, #4]
 452 0138 9A42     		cmp	r2, r3
 453 013a 06D1     		bne	.L27
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 454              		.loc 1 281 31
 455 013c BB6A     		ldr	r3, [r7, #40]
 456 013e 1A68     		ldr	r2, [r3]
 457              		.loc 1 281 34
 458 0140 7B68     		ldr	r3, [r7, #4]
 459 0142 DB43     		mvns	r3, r3
 460              		.loc 1 281 31
 461 0144 1A40     		ands	r2, r2, r3
 462 0146 BB6A     		ldr	r3, [r7, #40]
 463 0148 1A60     		str	r2, [r3]
 464              	.L27:
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 465              		.loc 1 288 4
 466 014a FFF7FEFF 		bl	vPortExitCritical
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 467              		.loc 1 290 21
 468 014e 0123     		movs	r3, #1
 469 0150 7B62     		str	r3, [r7, #36]
 470              	.L26:
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  /tmp/ccKara2O.s 			page 18


 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 471              		.loc 1 299 12
 472 0152 FB6A     		ldr	r3, [r7, #44]
 473 0154 23F07F43 		bic	r3, r3, #-16777216
 474 0158 FB62     		str	r3, [r7, #44]
 475              	.L24:
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 476              		.loc 1 307 9
 477 015a FB6A     		ldr	r3, [r7, #44]
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 478              		.loc 1 308 1
 479 015c 1846     		mov	r0, r3
 480 015e 3037     		adds	r7, r7, #48
 481              	.LCFI13:
 482              		.cfi_def_cfa_offset 8
 483 0160 BD46     		mov	sp, r7
 484              	.LCFI14:
 485              		.cfi_def_cfa_register 13
 486              		@ sp needed
 487 0162 80BD     		pop	{r7, pc}
 488              	.L30:
 489              		.align	2
 490              	.L29:
 491 0164 04ED00E0 		.word	-536810236
 492              		.cfi_endproc
 493              	.LFE7:
 495              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 496              		.align	1
 497              		.global	xEventGroupWaitBits
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 501              		.fpu fpv5-d16
 503              	xEventGroupWaitBits:
 504              	.LFB8:
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 505              		.loc 1 312 1
 506              		.cfi_startproc
 507              		@ args = 4, pretend = 0, frame = 64
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              	.LCFI15:
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 7, -8
ARM GAS  /tmp/ccKara2O.s 			page 19


 513              		.cfi_offset 14, -4
 514 0002 90B0     		sub	sp, sp, #64
 515              	.LCFI16:
 516              		.cfi_def_cfa_offset 72
 517 0004 00AF     		add	r7, sp, #0
 518              	.LCFI17:
 519              		.cfi_def_cfa_register 7
 520 0006 F860     		str	r0, [r7, #12]
 521 0008 B960     		str	r1, [r7, #8]
 522 000a 7A60     		str	r2, [r7, #4]
 523 000c 3B60     		str	r3, [r7]
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 524              		.loc 1 313 15
 525 000e FB68     		ldr	r3, [r7, #12]
 526 0010 7B63     		str	r3, [r7, #52]
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 527              		.loc 1 314 23
 528 0012 0023     		movs	r3, #0
 529 0014 BB63     		str	r3, [r7, #56]
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 530              		.loc 1 316 12
 531 0016 0023     		movs	r3, #0
 532 0018 3B63     		str	r3, [r7, #48]
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 533              		.loc 1 320 2
 534 001a FB68     		ldr	r3, [r7, #12]
 535 001c 002B     		cmp	r3, #0
 536 001e 0CD1     		bne	.L32
 537              	.LBB47:
 538              	.LBB48:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 539              		.loc 2 195 2
 540              		.syntax unified
 541              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 542 0020 4FF05003 			mov r3, #80												
 543 0024 72B6     		cpsid i													
 544 0026 83F31188 		msr basepri, r3											
 545 002a BFF36F8F 		isb														
 546 002e BFF34F8F 		dsb														
 547 0032 62B6     		cpsie i													
 548              	
 549              	@ 0 "" 2
 550              		.thumb
 551              		.syntax unified
 552 0034 3B62     		str	r3, [r7, #32]
 553              		.loc 2 205 1
 554 0036 00BF     		nop
 555              	.L33:
 556              	.LBE48:
 557              	.LBE47:
 558              		.loc 1 320 2 discriminator 1
 559 0038 FEE7     		b	.L33
 560              	.L32:
ARM GAS  /tmp/ccKara2O.s 			page 20


 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 561              		.loc 1 321 2
 562 003a BB68     		ldr	r3, [r7, #8]
 563 003c 03F07F43 		and	r3, r3, #-16777216
 564 0040 002B     		cmp	r3, #0
 565 0042 0CD0     		beq	.L34
 566              	.LBB49:
 567              	.LBB50:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 568              		.loc 2 195 2
 569              		.syntax unified
 570              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 571 0044 4FF05003 			mov r3, #80												
 572 0048 72B6     		cpsid i													
 573 004a 83F31188 		msr basepri, r3											
 574 004e BFF36F8F 		isb														
 575 0052 BFF34F8F 		dsb														
 576 0056 62B6     		cpsie i													
 577              	
 578              	@ 0 "" 2
 579              		.thumb
 580              		.syntax unified
 581 0058 FB61     		str	r3, [r7, #28]
 582              		.loc 2 205 1
 583 005a 00BF     		nop
 584              	.L35:
 585              	.LBE50:
 586              	.LBE49:
 587              		.loc 1 321 2 discriminator 2
 588 005c FEE7     		b	.L35
 589              	.L34:
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 590              		.loc 1 322 2
 591 005e BB68     		ldr	r3, [r7, #8]
 592 0060 002B     		cmp	r3, #0
 593 0062 0CD1     		bne	.L36
 594              	.LBB51:
 595              	.LBB52:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 596              		.loc 2 195 2
 597              		.syntax unified
 598              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 599 0064 4FF05003 			mov r3, #80												
 600 0068 72B6     		cpsid i													
 601 006a 83F31188 		msr basepri, r3											
 602 006e BFF36F8F 		isb														
 603 0072 BFF34F8F 		dsb														
 604 0076 62B6     		cpsie i													
 605              	
 606              	@ 0 "" 2
 607              		.thumb
 608              		.syntax unified
 609 0078 BB61     		str	r3, [r7, #24]
 610              		.loc 2 205 1
 611 007a 00BF     		nop
 612              	.L37:
 613              	.LBE52:
ARM GAS  /tmp/ccKara2O.s 			page 21


 614              	.LBE51:
 615              		.loc 1 322 2 discriminator 3
 616 007c FEE7     		b	.L37
 617              	.L36:
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 618              		.loc 1 325 3
 619 007e FFF7FEFF 		bl	xTaskGetSchedulerState
 620 0082 0346     		mov	r3, r0
 621 0084 002B     		cmp	r3, #0
 622 0086 02D1     		bne	.L38
 623              		.loc 1 325 3 is_stmt 0 discriminator 2
 624 0088 BB6C     		ldr	r3, [r7, #72]
 625 008a 002B     		cmp	r3, #0
 626 008c 01D1     		bne	.L39
 627              	.L38:
 628              		.loc 1 325 3 discriminator 3
 629 008e 0123     		movs	r3, #1
 630 0090 00E0     		b	.L40
 631              	.L39:
 632              		.loc 1 325 3 discriminator 4
 633 0092 0023     		movs	r3, #0
 634              	.L40:
 635              		.loc 1 325 3 discriminator 6
 636 0094 002B     		cmp	r3, #0
 637 0096 0CD1     		bne	.L41
 638              	.LBB53:
 639              	.LBB54:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 640              		.loc 2 195 2 is_stmt 1
 641              		.syntax unified
 642              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 643 0098 4FF05003 			mov r3, #80												
 644 009c 72B6     		cpsid i													
 645 009e 83F31188 		msr basepri, r3											
 646 00a2 BFF36F8F 		isb														
 647 00a6 BFF34F8F 		dsb														
 648 00aa 62B6     		cpsie i													
 649              	
 650              	@ 0 "" 2
 651              		.thumb
 652              		.syntax unified
 653 00ac 7B61     		str	r3, [r7, #20]
 654              		.loc 2 205 1
 655 00ae 00BF     		nop
 656              	.L42:
 657              	.LBE54:
 658              	.LBE53:
 659              		.loc 1 325 3 discriminator 4
 660 00b0 FEE7     		b	.L42
 661              	.L41:
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 662              		.loc 1 329 2
ARM GAS  /tmp/ccKara2O.s 			page 22


 663 00b2 FFF7FEFF 		bl	vTaskSuspendAll
 664              	.LBB55:
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 665              		.loc 1 331 21
 666 00b6 7B6B     		ldr	r3, [r7, #52]
 667 00b8 1B68     		ldr	r3, [r3]
 668 00ba FB62     		str	r3, [r7, #44]
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 669              		.loc 1 334 23
 670 00bc 3A68     		ldr	r2, [r7]
 671 00be B968     		ldr	r1, [r7, #8]
 672 00c0 F86A     		ldr	r0, [r7, #44]
 673 00c2 FFF7FEFF 		bl	prvTestWaitCondition
 674 00c6 B862     		str	r0, [r7, #40]
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 675              		.loc 1 336 5
 676 00c8 BB6A     		ldr	r3, [r7, #40]
 677 00ca 002B     		cmp	r3, #0
 678 00cc 0ED0     		beq	.L43
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 679              		.loc 1 340 13
 680 00ce FB6A     		ldr	r3, [r7, #44]
 681 00d0 FB63     		str	r3, [r7, #60]
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 682              		.loc 1 341 17
 683 00d2 0023     		movs	r3, #0
 684 00d4 BB64     		str	r3, [r7, #72]
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 685              		.loc 1 344 6
 686 00d6 7B68     		ldr	r3, [r7, #4]
 687 00d8 002B     		cmp	r3, #0
 688 00da 28D0     		beq	.L44
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 689              		.loc 1 346 30
 690 00dc 7B6B     		ldr	r3, [r7, #52]
 691 00de 1A68     		ldr	r2, [r3]
 692              		.loc 1 346 33
 693 00e0 BB68     		ldr	r3, [r7, #8]
 694 00e2 DB43     		mvns	r3, r3
 695              		.loc 1 346 30
 696 00e4 1A40     		ands	r2, r2, r3
 697 00e6 7B6B     		ldr	r3, [r7, #52]
 698 00e8 1A60     		str	r2, [r3]
 699 00ea 20E0     		b	.L44
 700              	.L43:
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
ARM GAS  /tmp/ccKara2O.s 			page 23


 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 701              		.loc 1 353 10
 702 00ec BB6C     		ldr	r3, [r7, #72]
 703 00ee 002B     		cmp	r3, #0
 704 00f0 04D1     		bne	.L45
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 705              		.loc 1 357 13
 706 00f2 FB6A     		ldr	r3, [r7, #44]
 707 00f4 FB63     		str	r3, [r7, #60]
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 708              		.loc 1 358 21
 709 00f6 0123     		movs	r3, #1
 710 00f8 3B63     		str	r3, [r7, #48]
 711 00fa 18E0     		b	.L44
 712              	.L45:
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 713              		.loc 1 366 6
 714 00fc 7B68     		ldr	r3, [r7, #4]
 715 00fe 002B     		cmp	r3, #0
 716 0100 03D0     		beq	.L46
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 717              		.loc 1 368 19
 718 0102 BB6B     		ldr	r3, [r7, #56]
 719 0104 43F08073 		orr	r3, r3, #16777216
 720 0108 BB63     		str	r3, [r7, #56]
 721              	.L46:
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 722              		.loc 1 375 6
 723 010a 3B68     		ldr	r3, [r7]
 724 010c 002B     		cmp	r3, #0
 725 010e 03D0     		beq	.L47
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 726              		.loc 1 377 19
 727 0110 BB6B     		ldr	r3, [r7, #56]
 728 0112 43F08063 		orr	r3, r3, #67108864
ARM GAS  /tmp/ccKara2O.s 			page 24


 729 0116 BB63     		str	r3, [r7, #56]
 730              	.L47:
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 731              		.loc 1 387 4
 732 0118 7B6B     		ldr	r3, [r7, #52]
 733 011a 181D     		adds	r0, r3, #4
 734 011c BA68     		ldr	r2, [r7, #8]
 735 011e BB6B     		ldr	r3, [r7, #56]
 736 0120 1343     		orrs	r3, r3, r2
 737 0122 BA6C     		ldr	r2, [r7, #72]
 738 0124 1946     		mov	r1, r3
 739 0126 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 740              		.loc 1 392 13
 741 012a 0023     		movs	r3, #0
 742 012c FB63     		str	r3, [r7, #60]
 743              	.L44:
 744              	.LBE55:
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 745              		.loc 1 397 20
 746 012e FFF7FEFF 		bl	xTaskResumeAll
 747 0132 7862     		str	r0, [r7, #36]
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 748              		.loc 1 399 4
 749 0134 BB6C     		ldr	r3, [r7, #72]
 750 0136 002B     		cmp	r3, #0
 751 0138 31D0     		beq	.L48
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 752              		.loc 1 401 5
 753 013a 7B6A     		ldr	r3, [r7, #36]
 754 013c 002B     		cmp	r3, #0
 755 013e 07D1     		bne	.L49
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 756              		.loc 1 403 4
 757 0140 194B     		ldr	r3, .L53
 758 0142 4FF08052 		mov	r2, #268435456
 759 0146 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccKara2O.s 			page 25


 760              		.syntax unified
 761              	@ 403 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 762 0148 BFF34F8F 		dsb
 763              	@ 0 "" 2
 764              	@ 403 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 765 014c BFF36F8F 		isb
 766              	@ 0 "" 2
 767              		.thumb
 768              		.syntax unified
 769              	.L49:
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 770              		.loc 1 414 14
 771 0150 FFF7FEFF 		bl	uxTaskResetEventItemValue
 772 0154 F863     		str	r0, [r7, #60]
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 773              		.loc 1 416 18
 774 0156 FB6B     		ldr	r3, [r7, #60]
 775 0158 03F00073 		and	r3, r3, #33554432
 776              		.loc 1 416 5
 777 015c 002B     		cmp	r3, #0
 778 015e 1AD1     		bne	.L50
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 779              		.loc 1 418 4
 780 0160 FFF7FEFF 		bl	vPortEnterCritical
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 781              		.loc 1 421 14
 782 0164 7B6B     		ldr	r3, [r7, #52]
 783 0166 1B68     		ldr	r3, [r3]
 784 0168 FB63     		str	r3, [r7, #60]
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 785              		.loc 1 425 9
 786 016a 3A68     		ldr	r2, [r7]
 787 016c B968     		ldr	r1, [r7, #8]
 788 016e F86B     		ldr	r0, [r7, #60]
 789 0170 FFF7FEFF 		bl	prvTestWaitCondition
 790 0174 0346     		mov	r3, r0
 791              		.loc 1 425 7
 792 0176 002B     		cmp	r3, #0
 793 0178 09D0     		beq	.L51
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
ARM GAS  /tmp/ccKara2O.s 			page 26


 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 794              		.loc 1 427 8
 795 017a 7B68     		ldr	r3, [r7, #4]
 796 017c 002B     		cmp	r3, #0
 797 017e 06D0     		beq	.L51
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 798              		.loc 1 429 32
 799 0180 7B6B     		ldr	r3, [r7, #52]
 800 0182 1A68     		ldr	r2, [r3]
 801              		.loc 1 429 35
 802 0184 BB68     		ldr	r3, [r7, #8]
 803 0186 DB43     		mvns	r3, r3
 804              		.loc 1 429 32
 805 0188 1A40     		ands	r2, r2, r3
 806 018a 7B6B     		ldr	r3, [r7, #52]
 807 018c 1A60     		str	r2, [r3]
 808              	.L51:
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 809              		.loc 1 440 22
 810 018e 0123     		movs	r3, #1
 811 0190 3B63     		str	r3, [r7, #48]
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 812              		.loc 1 442 4
 813 0192 FFF7FEFF 		bl	vPortExitCritical
 814              	.L50:
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 815              		.loc 1 450 12
 816 0196 FB6B     		ldr	r3, [r7, #60]
 817 0198 23F07F43 		bic	r3, r3, #-16777216
 818 019c FB63     		str	r3, [r7, #60]
 819              	.L48:
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
ARM GAS  /tmp/ccKara2O.s 			page 27


 820              		.loc 1 457 9
 821 019e FB6B     		ldr	r3, [r7, #60]
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 822              		.loc 1 458 1
 823 01a0 1846     		mov	r0, r3
 824 01a2 4037     		adds	r7, r7, #64
 825              	.LCFI18:
 826              		.cfi_def_cfa_offset 8
 827 01a4 BD46     		mov	sp, r7
 828              	.LCFI19:
 829              		.cfi_def_cfa_register 13
 830              		@ sp needed
 831 01a6 80BD     		pop	{r7, pc}
 832              	.L54:
 833              		.align	2
 834              	.L53:
 835 01a8 04ED00E0 		.word	-536810236
 836              		.cfi_endproc
 837              	.LFE8:
 839              		.section	.text.xEventGroupClearBits,"ax",%progbits
 840              		.align	1
 841              		.global	xEventGroupClearBits
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 845              		.fpu fpv5-d16
 847              	xEventGroupClearBits:
 848              	.LFB9:
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 849              		.loc 1 462 1
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 24
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853 0000 80B5     		push	{r7, lr}
 854              	.LCFI20:
 855              		.cfi_def_cfa_offset 8
 856              		.cfi_offset 7, -8
 857              		.cfi_offset 14, -4
 858 0002 86B0     		sub	sp, sp, #24
 859              	.LCFI21:
 860              		.cfi_def_cfa_offset 32
 861 0004 00AF     		add	r7, sp, #0
 862              	.LCFI22:
 863              		.cfi_def_cfa_register 7
 864 0006 7860     		str	r0, [r7, #4]
 865 0008 3960     		str	r1, [r7]
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 866              		.loc 1 463 15
 867 000a 7B68     		ldr	r3, [r7, #4]
 868 000c 7B61     		str	r3, [r7, #20]
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
ARM GAS  /tmp/ccKara2O.s 			page 28


 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 869              		.loc 1 468 2
 870 000e 7B68     		ldr	r3, [r7, #4]
 871 0010 002B     		cmp	r3, #0
 872 0012 0CD1     		bne	.L56
 873              	.LBB56:
 874              	.LBB57:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 875              		.loc 2 195 2
 876              		.syntax unified
 877              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 878 0014 4FF05003 			mov r3, #80												
 879 0018 72B6     		cpsid i													
 880 001a 83F31188 		msr basepri, r3											
 881 001e BFF36F8F 		isb														
 882 0022 BFF34F8F 		dsb														
 883 0026 62B6     		cpsie i													
 884              	
 885              	@ 0 "" 2
 886              		.thumb
 887              		.syntax unified
 888 0028 FB60     		str	r3, [r7, #12]
 889              		.loc 2 205 1
 890 002a 00BF     		nop
 891              	.L57:
 892              	.LBE57:
 893              	.LBE56:
 894              		.loc 1 468 2 discriminator 1
 895 002c FEE7     		b	.L57
 896              	.L56:
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 897              		.loc 1 469 2
 898 002e 3B68     		ldr	r3, [r7]
 899 0030 03F07F43 		and	r3, r3, #-16777216
 900 0034 002B     		cmp	r3, #0
 901 0036 0CD0     		beq	.L58
 902              	.LBB58:
 903              	.LBB59:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 904              		.loc 2 195 2
 905              		.syntax unified
 906              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 907 0038 4FF05003 			mov r3, #80												
 908 003c 72B6     		cpsid i													
 909 003e 83F31188 		msr basepri, r3											
 910 0042 BFF36F8F 		isb														
 911 0046 BFF34F8F 		dsb														
 912 004a 62B6     		cpsie i													
 913              	
 914              	@ 0 "" 2
 915              		.thumb
 916              		.syntax unified
 917 004c BB60     		str	r3, [r7, #8]
 918              		.loc 2 205 1
 919 004e 00BF     		nop
 920              	.L59:
 921              	.LBE59:
ARM GAS  /tmp/ccKara2O.s 			page 29


 922              	.LBE58:
 923              		.loc 1 469 2 discriminator 2
 924 0050 FEE7     		b	.L59
 925              	.L58:
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 926              		.loc 1 471 2
 927 0052 FFF7FEFF 		bl	vPortEnterCritical
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 928              		.loc 1 477 12
 929 0056 7B69     		ldr	r3, [r7, #20]
 930 0058 1B68     		ldr	r3, [r3]
 931 005a 3B61     		str	r3, [r7, #16]
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 932              		.loc 1 480 28
 933 005c 7B69     		ldr	r3, [r7, #20]
 934 005e 1A68     		ldr	r2, [r3]
 935              		.loc 1 480 31
 936 0060 3B68     		ldr	r3, [r7]
 937 0062 DB43     		mvns	r3, r3
 938              		.loc 1 480 28
 939 0064 1A40     		ands	r2, r2, r3
 940 0066 7B69     		ldr	r3, [r7, #20]
 941 0068 1A60     		str	r2, [r3]
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 942              		.loc 1 482 2
 943 006a FFF7FEFF 		bl	vPortExitCritical
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 944              		.loc 1 484 9
 945 006e 3B69     		ldr	r3, [r7, #16]
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 946              		.loc 1 485 1
 947 0070 1846     		mov	r0, r3
 948 0072 1837     		adds	r7, r7, #24
 949              	.LCFI23:
 950              		.cfi_def_cfa_offset 8
 951 0074 BD46     		mov	sp, r7
 952              	.LCFI24:
 953              		.cfi_def_cfa_register 13
 954              		@ sp needed
 955 0076 80BD     		pop	{r7, pc}
 956              		.cfi_endproc
 957              	.LFE9:
 959              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 960              		.align	1
 961              		.global	xEventGroupGetBitsFromISR
 962              		.syntax unified
 963              		.thumb
ARM GAS  /tmp/ccKara2O.s 			page 30


 964              		.thumb_func
 965              		.fpu fpv5-d16
 967              	xEventGroupGetBitsFromISR:
 968              	.LFB10:
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 969              		.loc 1 504 1
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 32
 972              		@ frame_needed = 1, uses_anonymous_args = 0
 973              		@ link register save eliminated.
 974 0000 80B4     		push	{r7}
 975              	.LCFI25:
 976              		.cfi_def_cfa_offset 4
 977              		.cfi_offset 7, -4
 978 0002 89B0     		sub	sp, sp, #36
 979              	.LCFI26:
 980              		.cfi_def_cfa_offset 40
 981 0004 00AF     		add	r7, sp, #0
 982              	.LCFI27:
 983              		.cfi_def_cfa_register 7
 984 0006 7860     		str	r0, [r7, #4]
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t const * const pxEventBits = xEventGroup;
 985              		.loc 1 506 28
 986 0008 7B68     		ldr	r3, [r7, #4]
 987 000a FB61     		str	r3, [r7, #28]
 988              	.LBB60:
 989              	.LBB61:
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 990              		.loc 2 213 2
 991              		.syntax unified
 992              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
ARM GAS  /tmp/ccKara2O.s 			page 31


 993 000c EFF31182 			mrs r2, basepri											
 994 0010 4FF05003 		mov r3, #80												
 995 0014 72B6     		cpsid i													
 996 0016 83F31188 		msr basepri, r3											
 997 001a BFF36F8F 		isb														
 998 001e BFF34F8F 		dsb														
 999 0022 62B6     		cpsie i													
 1000              	
 1001              	@ 0 "" 2
 1002              		.thumb
 1003              		.syntax unified
 1004 0024 FA60     		str	r2, [r7, #12]
 1005 0026 BB60     		str	r3, [r7, #8]
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 1006              		.loc 2 227 9
 1007 0028 FB68     		ldr	r3, [r7, #12]
 1008              	.LBE61:
 1009              	.LBE60:
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1010              		.loc 1 509 27
 1011 002a BB61     		str	r3, [r7, #24]
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 1012              		.loc 1 511 12
 1013 002c FB69     		ldr	r3, [r7, #28]
 1014 002e 1B68     		ldr	r3, [r3]
 1015 0030 7B61     		str	r3, [r7, #20]
 1016 0032 BB69     		ldr	r3, [r7, #24]
 1017 0034 3B61     		str	r3, [r7, #16]
 1018              	.LBB62:
 1019              	.LBB63:
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1020              		.loc 2 233 2
 1021 0036 3B69     		ldr	r3, [r7, #16]
 1022              		.syntax unified
 1023              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1024 0038 83F31188 			msr basepri, r3	
ARM GAS  /tmp/ccKara2O.s 			page 32


 1025              	@ 0 "" 2
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 1026              		.loc 2 237 1
 1027              		.thumb
 1028              		.syntax unified
 1029 003c 00BF     		nop
 1030              	.LBE63:
 1031              	.LBE62:
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 1032              		.loc 1 515 9
 1033 003e 7B69     		ldr	r3, [r7, #20]
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 1034              		.loc 1 516 1
 1035 0040 1846     		mov	r0, r3
 1036 0042 2437     		adds	r7, r7, #36
 1037              	.LCFI28:
 1038              		.cfi_def_cfa_offset 4
 1039 0044 BD46     		mov	sp, r7
 1040              	.LCFI29:
 1041              		.cfi_def_cfa_register 13
 1042              		@ sp needed
 1043 0046 5DF8047B 		ldr	r7, [sp], #4
 1044              	.LCFI30:
 1045              		.cfi_restore 7
 1046              		.cfi_def_cfa_offset 0
 1047 004a 7047     		bx	lr
 1048              		.cfi_endproc
 1049              	.LFE10:
 1051              		.section	.text.xEventGroupSetBits,"ax",%progbits
 1052              		.align	1
 1053              		.global	xEventGroupSetBits
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv5-d16
 1059              	xEventGroupSetBits:
 1060              	.LFB11:
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1061              		.loc 1 520 1
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 56
 1064              		@ frame_needed = 1, uses_anonymous_args = 0
 1065 0000 80B5     		push	{r7, lr}
 1066              	.LCFI31:
 1067              		.cfi_def_cfa_offset 8
 1068              		.cfi_offset 7, -8
 1069              		.cfi_offset 14, -4
 1070 0002 8EB0     		sub	sp, sp, #56
ARM GAS  /tmp/ccKara2O.s 			page 33


 1071              	.LCFI32:
 1072              		.cfi_def_cfa_offset 64
 1073 0004 00AF     		add	r7, sp, #0
 1074              	.LCFI33:
 1075              		.cfi_def_cfa_register 7
 1076 0006 7860     		str	r0, [r7, #4]
 1077 0008 3960     		str	r1, [r7]
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t const * pxList;
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 1078              		.loc 1 524 13
 1079 000a 0023     		movs	r3, #0
 1080 000c 3B63     		str	r3, [r7, #48]
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 1081              		.loc 1 525 15
 1082 000e 7B68     		ldr	r3, [r7, #4]
 1083 0010 BB62     		str	r3, [r7, #40]
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 1084              		.loc 1 526 12
 1085 0012 0023     		movs	r3, #0
 1086 0014 FB62     		str	r3, [r7, #44]
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 1087              		.loc 1 530 2
 1088 0016 7B68     		ldr	r3, [r7, #4]
 1089 0018 002B     		cmp	r3, #0
 1090 001a 0CD1     		bne	.L65
 1091              	.LBB64:
 1092              	.LBB65:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1093              		.loc 2 195 2
 1094              		.syntax unified
 1095              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1096 001c 4FF05003 			mov r3, #80												
 1097 0020 72B6     		cpsid i													
 1098 0022 83F31188 		msr basepri, r3											
 1099 0026 BFF36F8F 		isb														
 1100 002a BFF34F8F 		dsb														
 1101 002e 62B6     		cpsie i													
 1102              	
 1103              	@ 0 "" 2
 1104              		.thumb
 1105              		.syntax unified
 1106 0030 3B61     		str	r3, [r7, #16]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1107              		.loc 2 205 1
 1108 0032 00BF     		nop
 1109              	.L66:
 1110              	.LBE65:
 1111              	.LBE64:
 1112              		.loc 1 530 2 discriminator 1
 1113 0034 FEE7     		b	.L66
 1114              	.L65:
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
ARM GAS  /tmp/ccKara2O.s 			page 34


 1115              		.loc 1 531 2
 1116 0036 3B68     		ldr	r3, [r7]
 1117 0038 03F07F43 		and	r3, r3, #-16777216
 1118 003c 002B     		cmp	r3, #0
 1119 003e 0CD0     		beq	.L67
 1120              	.LBB66:
 1121              	.LBB67:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1122              		.loc 2 195 2
 1123              		.syntax unified
 1124              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1125 0040 4FF05003 			mov r3, #80												
 1126 0044 72B6     		cpsid i													
 1127 0046 83F31188 		msr basepri, r3											
 1128 004a BFF36F8F 		isb														
 1129 004e BFF34F8F 		dsb														
 1130 0052 62B6     		cpsie i													
 1131              	
 1132              	@ 0 "" 2
 1133              		.thumb
 1134              		.syntax unified
 1135 0054 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1136              		.loc 2 205 1
 1137 0056 00BF     		nop
 1138              	.L68:
 1139              	.LBE67:
 1140              	.LBE66:
 1141              		.loc 1 531 2 discriminator 2
 1142 0058 FEE7     		b	.L68
 1143              	.L67:
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 1144              		.loc 1 533 9
 1145 005a BB6A     		ldr	r3, [r7, #40]
 1146 005c 0433     		adds	r3, r3, #4
 1147 005e 7B62     		str	r3, [r7, #36]
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is use
 1148              		.loc 1 534 12
 1149 0060 7B6A     		ldr	r3, [r7, #36]
 1150 0062 0833     		adds	r3, r3, #8
 1151 0064 3B62     		str	r3, [r7, #32]
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 1152              		.loc 1 535 2
 1153 0066 FFF7FEFF 		bl	vTaskSuspendAll
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 1154              		.loc 1 539 14
 1155 006a 7B6A     		ldr	r3, [r7, #36]
 1156 006c DB68     		ldr	r3, [r3, #12]
 1157 006e 7B63     		str	r3, [r7, #52]
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 1158              		.loc 1 542 28
ARM GAS  /tmp/ccKara2O.s 			page 35


 1159 0070 BB6A     		ldr	r3, [r7, #40]
 1160 0072 1A68     		ldr	r2, [r3]
 1161 0074 3B68     		ldr	r3, [r7]
 1162 0076 1A43     		orrs	r2, r2, r3
 1163 0078 BB6A     		ldr	r3, [r7, #40]
 1164 007a 1A60     		str	r2, [r3]
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 1165              		.loc 1 545 8
 1166 007c 3CE0     		b	.L69
 1167              	.L74:
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 1168              		.loc 1 547 11
 1169 007e 7B6B     		ldr	r3, [r7, #52]
 1170 0080 5B68     		ldr	r3, [r3, #4]
 1171 0082 FB61     		str	r3, [r7, #28]
 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 1172              		.loc 1 548 20
 1173 0084 7B6B     		ldr	r3, [r7, #52]
 1174 0086 1B68     		ldr	r3, [r3]
 1175 0088 BB61     		str	r3, [r7, #24]
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 1176              		.loc 1 549 16
 1177 008a 0023     		movs	r3, #0
 1178 008c FB62     		str	r3, [r7, #44]
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 1179              		.loc 1 552 18
 1180 008e BB69     		ldr	r3, [r7, #24]
 1181 0090 03F07F43 		and	r3, r3, #-16777216
 1182 0094 7B61     		str	r3, [r7, #20]
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 1183              		.loc 1 553 20
 1184 0096 BB69     		ldr	r3, [r7, #24]
 1185 0098 23F07F43 		bic	r3, r3, #-16777216
 1186 009c BB61     		str	r3, [r7, #24]
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 1187              		.loc 1 555 24
 1188 009e 7B69     		ldr	r3, [r7, #20]
 1189 00a0 03F08063 		and	r3, r3, #67108864
 1190              		.loc 1 555 6
 1191 00a4 002B     		cmp	r3, #0
 1192 00a6 08D1     		bne	.L70
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 1193              		.loc 1 558 40
 1194 00a8 BB6A     		ldr	r3, [r7, #40]
 1195 00aa 1A68     		ldr	r2, [r3]
 1196              		.loc 1 558 27
 1197 00ac BB69     		ldr	r3, [r7, #24]
 1198 00ae 1340     		ands	r3, r3, r2
 1199              		.loc 1 558 7
ARM GAS  /tmp/ccKara2O.s 			page 36


 1200 00b0 002B     		cmp	r3, #0
 1201 00b2 0BD0     		beq	.L71
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 1202              		.loc 1 560 18
 1203 00b4 0123     		movs	r3, #1
 1204 00b6 FB62     		str	r3, [r7, #44]
 1205 00b8 08E0     		b	.L71
 1206              	.L70:
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 1207              		.loc 1 567 44
 1208 00ba BB6A     		ldr	r3, [r7, #40]
 1209 00bc 1A68     		ldr	r2, [r3]
 1210              		.loc 1 567 31
 1211 00be BB69     		ldr	r3, [r7, #24]
 1212 00c0 1340     		ands	r3, r3, r2
 1213              		.loc 1 567 11
 1214 00c2 BA69     		ldr	r2, [r7, #24]
 1215 00c4 9A42     		cmp	r2, r3
 1216 00c6 01D1     		bne	.L71
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 1217              		.loc 1 570 17
 1218 00c8 0123     		movs	r3, #1
 1219 00ca FB62     		str	r3, [r7, #44]
 1220              	.L71:
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 1221              		.loc 1 577 6
 1222 00cc FB6A     		ldr	r3, [r7, #44]
 1223 00ce 002B     		cmp	r3, #0
 1224 00d0 10D0     		beq	.L72
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 1225              		.loc 1 580 25
 1226 00d2 7B69     		ldr	r3, [r7, #20]
 1227 00d4 03F08073 		and	r3, r3, #16777216
 1228              		.loc 1 580 7
 1229 00d8 002B     		cmp	r3, #0
 1230 00da 03D0     		beq	.L73
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 1231              		.loc 1 582 20
 1232 00dc 3A6B     		ldr	r2, [r7, #48]
ARM GAS  /tmp/ccKara2O.s 			page 37


 1233 00de BB69     		ldr	r3, [r7, #24]
 1234 00e0 1343     		orrs	r3, r3, r2
 1235 00e2 3B63     		str	r3, [r7, #48]
 1236              	.L73:
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 1237              		.loc 1 594 63
 1238 00e4 BB6A     		ldr	r3, [r7, #40]
 1239 00e6 1B68     		ldr	r3, [r3]
 1240              		.loc 1 594 5
 1241 00e8 43F00073 		orr	r3, r3, #33554432
 1242 00ec 1946     		mov	r1, r3
 1243 00ee 786B     		ldr	r0, [r7, #52]
 1244 00f0 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1245              	.L72:
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 1246              		.loc 1 600 15
 1247 00f4 FB69     		ldr	r3, [r7, #28]
 1248 00f6 7B63     		str	r3, [r7, #52]
 1249              	.L69:
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1250              		.loc 1 545 8
 1251 00f8 7A6B     		ldr	r2, [r7, #52]
 1252 00fa 3B6A     		ldr	r3, [r7, #32]
 1253 00fc 9A42     		cmp	r2, r3
 1254 00fe BED1     		bne	.L74
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 1255              		.loc 1 605 28
 1256 0100 BB6A     		ldr	r3, [r7, #40]
 1257 0102 1A68     		ldr	r2, [r3]
 1258              		.loc 1 605 31
 1259 0104 3B6B     		ldr	r3, [r7, #48]
 1260 0106 DB43     		mvns	r3, r3
 1261              		.loc 1 605 28
 1262 0108 1A40     		ands	r2, r2, r3
 1263 010a BB6A     		ldr	r3, [r7, #40]
 1264 010c 1A60     		str	r2, [r3]
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
ARM GAS  /tmp/ccKara2O.s 			page 38


 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 1265              		.loc 1 607 11
 1266 010e FFF7FEFF 		bl	xTaskResumeAll
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 1267              		.loc 1 609 20
 1268 0112 BB6A     		ldr	r3, [r7, #40]
 1269 0114 1B68     		ldr	r3, [r3]
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1270              		.loc 1 610 1
 1271 0116 1846     		mov	r0, r3
 1272 0118 3837     		adds	r7, r7, #56
 1273              	.LCFI34:
 1274              		.cfi_def_cfa_offset 8
 1275 011a BD46     		mov	sp, r7
 1276              	.LCFI35:
 1277              		.cfi_def_cfa_register 13
 1278              		@ sp needed
 1279 011c 80BD     		pop	{r7, pc}
 1280              		.cfi_endproc
 1281              	.LFE11:
 1283              		.section	.text.vEventGroupDelete,"ax",%progbits
 1284              		.align	1
 1285              		.global	vEventGroupDelete
 1286              		.syntax unified
 1287              		.thumb
 1288              		.thumb_func
 1289              		.fpu fpv5-d16
 1291              	vEventGroupDelete:
 1292              	.LFB12:
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1293              		.loc 1 614 1
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 24
 1296              		@ frame_needed = 1, uses_anonymous_args = 0
 1297 0000 80B5     		push	{r7, lr}
 1298              	.LCFI36:
 1299              		.cfi_def_cfa_offset 8
 1300              		.cfi_offset 7, -8
 1301              		.cfi_offset 14, -4
 1302 0002 86B0     		sub	sp, sp, #24
 1303              	.LCFI37:
 1304              		.cfi_def_cfa_offset 32
 1305 0004 00AF     		add	r7, sp, #0
 1306              	.LCFI38:
 1307              		.cfi_def_cfa_register 7
 1308 0006 7860     		str	r0, [r7, #4]
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 1309              		.loc 1 615 15
 1310 0008 7B68     		ldr	r3, [r7, #4]
 1311 000a 7B61     		str	r3, [r7, #20]
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 1312              		.loc 1 616 15
 1313 000c 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccKara2O.s 			page 39


 1314 000e 0433     		adds	r3, r3, #4
 1315 0010 3B61     		str	r3, [r7, #16]
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 1316              		.loc 1 618 2
 1317 0012 FFF7FEFF 		bl	vTaskSuspendAll
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 1318              		.loc 1 622 8
 1319 0016 19E0     		b	.L77
 1320              	.L80:
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 1321              		.loc 1 626 4
 1322 0018 3B69     		ldr	r3, [r7, #16]
 1323 001a DA68     		ldr	r2, [r3, #12]
 1324 001c 3B69     		ldr	r3, [r7, #16]
 1325 001e 0833     		adds	r3, r3, #8
 1326 0020 9A42     		cmp	r2, r3
 1327 0022 0CD1     		bne	.L78
 1328              	.LBB68:
 1329              	.LBB69:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1330              		.loc 2 195 2
 1331              		.syntax unified
 1332              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1333 0024 4FF05003 			mov r3, #80												
 1334 0028 72B6     		cpsid i													
 1335 002a 83F31188 		msr basepri, r3											
 1336 002e BFF36F8F 		isb														
 1337 0032 BFF34F8F 		dsb														
 1338 0036 62B6     		cpsie i													
 1339              	
 1340              	@ 0 "" 2
 1341              		.thumb
 1342              		.syntax unified
 1343 0038 FB60     		str	r3, [r7, #12]
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1344              		.loc 2 205 1
 1345 003a 00BF     		nop
 1346              	.L79:
 1347              	.LBE69:
 1348              	.LBE68:
 1349              		.loc 1 626 4 discriminator 1
 1350 003c FEE7     		b	.L79
 1351              	.L78:
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1352              		.loc 1 627 70
 1353 003e 3B69     		ldr	r3, [r7, #16]
 1354 0040 DB68     		ldr	r3, [r3, #12]
 1355              		.loc 1 627 4
 1356 0042 4FF00071 		mov	r1, #33554432
 1357 0046 1846     		mov	r0, r3
ARM GAS  /tmp/ccKara2O.s 			page 40


 1358 0048 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1359              	.L77:
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1360              		.loc 1 622 10
 1361 004c 3B69     		ldr	r3, [r7, #16]
 1362 004e 1B68     		ldr	r3, [r3]
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1363              		.loc 1 622 8
 1364 0050 002B     		cmp	r3, #0
 1365 0052 E1D1     		bne	.L80
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 1366              		.loc 1 640 19
 1367 0054 7B69     		ldr	r3, [r7, #20]
 1368 0056 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1369              		.loc 1 640 6
 1370 0058 002B     		cmp	r3, #0
 1371 005a 02D1     		bne	.L81
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 1372              		.loc 1 642 5
 1373 005c 7869     		ldr	r0, [r7, #20]
 1374 005e FFF7FEFF 		bl	vPortFree
 1375              	.L81:
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 1376              		.loc 1 651 11
 1377 0062 FFF7FEFF 		bl	xTaskResumeAll
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1378              		.loc 1 652 1
 1379 0066 00BF     		nop
 1380 0068 1837     		adds	r7, r7, #24
 1381              	.LCFI39:
 1382              		.cfi_def_cfa_offset 8
 1383 006a BD46     		mov	sp, r7
 1384              	.LCFI40:
 1385              		.cfi_def_cfa_register 13
 1386              		@ sp needed
 1387 006c 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccKara2O.s 			page 41


 1388              		.cfi_endproc
 1389              	.LFE12:
 1391              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1392              		.align	1
 1393              		.global	vEventGroupSetBitsCallback
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1397              		.fpu fpv5-d16
 1399              	vEventGroupSetBitsCallback:
 1400              	.LFB13:
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1401              		.loc 1 658 1
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 8
 1404              		@ frame_needed = 1, uses_anonymous_args = 0
 1405 0000 80B5     		push	{r7, lr}
 1406              	.LCFI41:
 1407              		.cfi_def_cfa_offset 8
 1408              		.cfi_offset 7, -8
 1409              		.cfi_offset 14, -4
 1410 0002 82B0     		sub	sp, sp, #8
 1411              	.LCFI42:
 1412              		.cfi_def_cfa_offset 16
 1413 0004 00AF     		add	r7, sp, #0
 1414              	.LCFI43:
 1415              		.cfi_def_cfa_register 7
 1416 0006 7860     		str	r0, [r7, #4]
 1417 0008 3960     		str	r1, [r7]
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
 1418              		.loc 1 659 11
 1419 000a 3968     		ldr	r1, [r7]
 1420 000c 7868     		ldr	r0, [r7, #4]
 1421 000e FFF7FEFF 		bl	xEventGroupSetBits
 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1422              		.loc 1 660 1
 1423 0012 00BF     		nop
 1424 0014 0837     		adds	r7, r7, #8
 1425              	.LCFI44:
 1426              		.cfi_def_cfa_offset 8
 1427 0016 BD46     		mov	sp, r7
 1428              	.LCFI45:
 1429              		.cfi_def_cfa_register 13
 1430              		@ sp needed
 1431 0018 80BD     		pop	{r7, pc}
 1432              		.cfi_endproc
 1433              	.LFE13:
 1435              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1436              		.align	1
 1437              		.global	vEventGroupClearBitsCallback
 1438              		.syntax unified
 1439              		.thumb
ARM GAS  /tmp/ccKara2O.s 			page 42


 1440              		.thumb_func
 1441              		.fpu fpv5-d16
 1443              	vEventGroupClearBitsCallback:
 1444              	.LFB14:
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 1445              		.loc 1 666 1
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 8
 1448              		@ frame_needed = 1, uses_anonymous_args = 0
 1449 0000 80B5     		push	{r7, lr}
 1450              	.LCFI46:
 1451              		.cfi_def_cfa_offset 8
 1452              		.cfi_offset 7, -8
 1453              		.cfi_offset 14, -4
 1454 0002 82B0     		sub	sp, sp, #8
 1455              	.LCFI47:
 1456              		.cfi_def_cfa_offset 16
 1457 0004 00AF     		add	r7, sp, #0
 1458              	.LCFI48:
 1459              		.cfi_def_cfa_register 7
 1460 0006 7860     		str	r0, [r7, #4]
 1461 0008 3960     		str	r1, [r7]
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 1462              		.loc 1 667 11
 1463 000a 3968     		ldr	r1, [r7]
 1464 000c 7868     		ldr	r0, [r7, #4]
 1465 000e FFF7FEFF 		bl	xEventGroupClearBits
 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1466              		.loc 1 668 1
 1467 0012 00BF     		nop
 1468 0014 0837     		adds	r7, r7, #8
 1469              	.LCFI49:
 1470              		.cfi_def_cfa_offset 8
 1471 0016 BD46     		mov	sp, r7
 1472              	.LCFI50:
 1473              		.cfi_def_cfa_register 13
 1474              		@ sp needed
 1475 0018 80BD     		pop	{r7, pc}
 1476              		.cfi_endproc
 1477              	.LFE14:
 1479              		.section	.text.prvTestWaitCondition,"ax",%progbits
 1480              		.align	1
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1484              		.fpu fpv5-d16
 1486              	prvTestWaitCondition:
 1487              	.LFB15:
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
ARM GAS  /tmp/ccKara2O.s 			page 43


 1488              		.loc 1 672 1
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 24
 1491              		@ frame_needed = 1, uses_anonymous_args = 0
 1492              		@ link register save eliminated.
 1493 0000 80B4     		push	{r7}
 1494              	.LCFI51:
 1495              		.cfi_def_cfa_offset 4
 1496              		.cfi_offset 7, -4
 1497 0002 87B0     		sub	sp, sp, #28
 1498              	.LCFI52:
 1499              		.cfi_def_cfa_offset 32
 1500 0004 00AF     		add	r7, sp, #0
 1501              	.LCFI53:
 1502              		.cfi_def_cfa_register 7
 1503 0006 F860     		str	r0, [r7, #12]
 1504 0008 B960     		str	r1, [r7, #8]
 1505 000a 7A60     		str	r2, [r7, #4]
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 1506              		.loc 1 673 12
 1507 000c 0023     		movs	r3, #0
 1508 000e 7B61     		str	r3, [r7, #20]
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
 1509              		.loc 1 675 4
 1510 0010 7B68     		ldr	r3, [r7, #4]
 1511 0012 002B     		cmp	r3, #0
 1512 0014 07D1     		bne	.L85
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 1513              		.loc 1 679 28
 1514 0016 FA68     		ldr	r2, [r7, #12]
 1515 0018 BB68     		ldr	r3, [r7, #8]
 1516 001a 1340     		ands	r3, r3, r2
 1517              		.loc 1 679 5
 1518 001c 002B     		cmp	r3, #0
 1519 001e 0AD0     		beq	.L86
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 1520              		.loc 1 681 22
 1521 0020 0123     		movs	r3, #1
 1522 0022 7B61     		str	r3, [r7, #20]
 1523 0024 07E0     		b	.L86
 1524              	.L85:
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 689:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 690:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 691:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
ARM GAS  /tmp/ccKara2O.s 			page 44


 1525              		.loc 1 692 28
 1526 0026 FA68     		ldr	r2, [r7, #12]
 1527 0028 BB68     		ldr	r3, [r7, #8]
 1528 002a 1340     		ands	r3, r3, r2
 1529              		.loc 1 692 5
 1530 002c BA68     		ldr	r2, [r7, #8]
 1531 002e 9A42     		cmp	r2, r3
 1532 0030 01D1     		bne	.L86
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 694:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 1533              		.loc 1 694 22
 1534 0032 0123     		movs	r3, #1
 1535 0034 7B61     		str	r3, [r7, #20]
 1536              	.L86:
 695:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 696:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 697:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 698:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 699:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 700:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 701:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 702:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 1537              		.loc 1 702 9
 1538 0036 7B69     		ldr	r3, [r7, #20]
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1539              		.loc 1 703 1
 1540 0038 1846     		mov	r0, r3
 1541 003a 1C37     		adds	r7, r7, #28
 1542              	.LCFI54:
 1543              		.cfi_def_cfa_offset 4
 1544 003c BD46     		mov	sp, r7
 1545              	.LCFI55:
 1546              		.cfi_def_cfa_register 13
 1547              		@ sp needed
 1548 003e 5DF8047B 		ldr	r7, [sp], #4
 1549              	.LCFI56:
 1550              		.cfi_restore 7
 1551              		.cfi_def_cfa_offset 0
 1552 0042 7047     		bx	lr
 1553              		.cfi_endproc
 1554              	.LFE15:
 1556              		.text
 1557              	.Letext0:
 1558              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1559              		.file 4 "/usr/include/newlib/sys/_types.h"
 1560              		.file 5 "/usr/include/newlib/sys/reent.h"
 1561              		.file 6 "/usr/include/newlib/sys/lock.h"
 1562              		.file 7 "/usr/include/newlib/stdlib.h"
 1563              		.file 8 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1564              		.file 9 "Core/Inc/FreeRTOSConfig.h"
 1565              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1566              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1567              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
ARM GAS  /tmp/ccKara2O.s 			page 45


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccKara2O.s:17     .text.xEventGroupCreateStatic:0000000000000000 $t
     /tmp/ccKara2O.s:25     .text.xEventGroupCreateStatic:0000000000000000 xEventGroupCreateStatic
     /tmp/ccKara2O.s:143    .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccKara2O.s:150    .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccKara2O.s:205    .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccKara2O.s:212    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccKara2O.s:1059   .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccKara2O.s:491    .text.xEventGroupSync:0000000000000164 $d
     /tmp/ccKara2O.s:496    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccKara2O.s:503    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccKara2O.s:1486   .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/ccKara2O.s:835    .text.xEventGroupWaitBits:00000000000001a8 $d
     /tmp/ccKara2O.s:840    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccKara2O.s:847    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccKara2O.s:960    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccKara2O.s:967    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccKara2O.s:1052   .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccKara2O.s:1284   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccKara2O.s:1291   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccKara2O.s:1392   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccKara2O.s:1399   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccKara2O.s:1436   .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccKara2O.s:1443   .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
     /tmp/ccKara2O.s:1480   .text.prvTestWaitCondition:0000000000000000 $t

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskRemoveFromUnorderedEventList
vPortFree
